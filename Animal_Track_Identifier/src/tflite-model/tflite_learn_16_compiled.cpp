/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 11.12.2023 21:17:55

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 30
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 60
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 56272;
#else
constexpr int kTensorArenaSize = 55248;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_MEAN, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[35];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 1, 2, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data3[3] = { -66, -197, 233, };
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const TfArray<1, float> quant3_scale = { 1, { 8.4024322859477252e-05, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[3*64] = { 
  -53, -28, 11, -65, 85, -86, 81, 57, 34, -82, -5, 44, -70, -10, -3, -68, 73, -66, 90, 24, -42, -5, -80, -55, -96, -20, 53, 19, 21, 11, -32, -89, -62, 91, -27, 88, -81, 14, 77, -49, -42, -79, -101, 79, -9, -105, -92, -19, 9, 68, -43, 79, -43, 83, 25, -33, -58, -72, 65, 78, 81, 26, -86, -25, 
  -47, 7, -59, -22, 20, -56, -96, -98, 7, -72, 40, 48, -51, 88, -50, 17, -63, 26, -29, -3, 127, -36, 104, -57, 98, -62, 39, -1, 43, -60, -61, -38, 59, 23, -93, 44, -64, 52, 44, 89, -31, -60, -98, 86, 89, 56, 14, -14, -92, -76, 20, -78, -24, -32, -59, -67, -71, 50, 44, 3, -40, 29, -1, 35, 
  -84, 15, 15, 85, -35, 17, 21, -47, 1, -77, 85, -60, 71, -12, -72, -84, -89, -78, -43, -99, 59, 78, -67, 15, -94, 4, 82, 5, 102, -2, 2, 4, 39, -123, 36, 69, 86, 29, 5, 23, 97, 38, -5, -50, -92, -76, 1, -26, 6, 35, -83, -71, -36, -52, 51, -125, 50, 2, 28, -80, 20, 83, -40, -110, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 3,64 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0031480393372476101, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[64] = { -157, 225, -230, -222, -154, 216, 154, -134, -321, -213, -60, -206, 384, -254, -199, -407, 366, -216, 176, 178, 194, -137, 227, 226, -83, 222, 64, -85, 301, -291, 96, -275, -292, 347, -152, -196, -259, -274, -274, -235, -43, -155, 400, -156, 225, -338, -189, -253, -81, 758, 261, 114, -194, -315, 0, 371, 110, -323, -680, -411, -325, -277, -397, -208, };
const TfArray<1, int> tensor_dimension5 = { 1, { 64 } };
const TfArray<1, float> quant5_scale = { 1, { 5.2877752750646323e-05, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[64*102] = { 
  51, -12, -4, -70, 35, 19, -22, 54, -63, 52, -74, 11, -36, -13, -57, 58, 38, 116, -41, 42, 94, -77, 6, 1, 21, -91, 42, -8, -74, 42, -14, 62, -70, 49, 34, 28, 25, 25, -43, 97, -57, -4, 0, 76, -44, -54, -42, -10, 60, 88, 5, 40, -13, 95, 47, -20, -22, 10, 38, -1, -28, -66, -77, 66, 32, -35, 60, 75, -67, -63, 36, 36, -82, -5, -96, -65, -12, -2, -41, 14, 42, 0, -25, 54, 17, 61, 45, 50, -75, 25, 50, 33, -4, 57, -50, 12, -15, 14, 54, 97, -23, -50, 
  17, 93, 53, -14, 84, 51, -26, -7, 96, -12, -35, -95, 73, -70, 44, -24, -36, 96, 42, -23, -30, 18, -91, -21, 41, -53, -13, -86, 40, 49, 21, 50, 75, 12, 10, -75, 112, -55, 62, 62, 78, 4, 63, -53, 23, 67, -14, -5, -2, -32, 84, -65, 40, -7, 77, 88, 46, 55, 2, -8, 48, -17, -24, -38, -38, 4, -64, 30, 42, 9, 29, 10, 27, -71, 65, -41, 56, 63, 44, 31, 112, -79, 64, 38, -96, 27, -50, 86, 80, 42, -83, -86, -29, -78, 50, -37, -82, 97, -14, -4, -56, -32, 
  -35, 37, -66, -20, 41, -16, -78, 49, 81, -56, -74, -57, -18, -41, -1, 37, -11, 20, 41, -38, 38, -60, 44, 30, 8, -2, -85, -52, -4, -94, -55, -52, -37, 12, 52, 41, 59, -21, 67, -19, 3, -73, 50, 46, -28, -5, -16, -43, 55, -61, -46, 13, -35, -5, -11, 77, 43, -37, -66, 60, 70, -60, 78, -2, -60, -31, -74, 53, -67, -60, 43, -14, -77, -36, 46, -50, 77, 42, 8, -32, -57, 44, -14, -10, 2, -55, 28, -84, -23, -46, 56, -66, 50, 40, 70, 73, 33, 21, -41, 15, 21, -1, 
  -44, -15, 45, -16, -68, 69, 38, 55, -27, 15, -30, 60, -57, -44, -61, -25, 68, 57, -61, -58, 80, -44, -51, -29, -66, -17, 58, 20, 89, 88, -40, -23, 60, 44, 49, -77, 28, 11, -10, -84, 10, 80, -45, -19, 47, -91, 50, -11, -14, -28, -52, -55, -1, -87, -16, 38, 2, -62, -19, 84, 53, 14, 3, -57, 48, -53, -25, 41, 39, 20, -40, -28, -88, 15, -12, 46, -38, 57, 31, 23, -31, 60, -76, -17, 58, 80, 50, 79, -16, 40, -56, -85, -21, 21, 5, -80, -55, 22, 29, -24, -90, 89, 
  -71, -28, 0, 59, 37, 54, -6, -52, 46, 43, -10, 1, -62, -19, 35, 51, -38, 42, 39, 20, 52, -74, 46, -77, 91, -83, -27, -68, 13, -45, -15, -68, -58, 20, 64, -82, 81, -5, -3, -18, -27, 73, -66, 4, -15, 27, -65, -47, -19, -37, 4, -26, -36, 3, -38, 16, -39, 15, 18, -87, -29, -8, 73, 76, -69, 46, 56, -56, 51, 63, 69, -1, -65, -19, -57, 46, -70, -39, 52, -69, 77, 53, 49, -38, -74, -14, 32, -62, -29, -7, -11, -15, -25, -38, -64, -29, 70, -12, 60, 44, -88, 33, 
  2, 48, 62, 76, 66, -65, -70, 60, 100, 45, 50, 16, 67, -84, -36, 67, 51, -82, 4, 48, 30, -30, -95, -76, -40, -19, 55, -54, -50, -58, 72, -66, 38, 104, 6, -79, -49, -5, 35, 65, 55, -14, 101, -31, -2, -45, -24, -44, -7, -66, 66, 45, 69, 72, -5, 82, -6, -14, 45, 52, -40, -56, 36, -30, -51, -49, -45, 33, 47, 16, -38, -29, 15, 28, -69, 22, 4, 56, -46, 33, 15, -54, 49, -86, 38, 29, 36, 69, -32, -58, -62, 56, 54, 26, -65, -32, -41, 48, -59, -40, -62, 68, 
  -74, 47, -3, 58, -97, 58, -42, 56, 55, 51, 42, -45, -95, -67, -28, -33, -70, -48, 79, 21, 2, 46, -46, 59, -38, -52, 75, -21, 19, -17, -54, -31, -28, -78, 69, 18, -35, -13, 48, -2, -41, 48, -103, -53, -48, -54, -34, 13, -19, -84, -53, 52, 19, -56, 45, 69, -59, 11, 45, 15, 72, 11, 63, 27, -22, 26, 72, -45, 27, 12, -56, 53, -51, -57, 77, -69, -36, -63, 48, 61, -54, 67, -4, 15, -27, -16, 86, -25, -87, 15, 76, -7, 48, 36, -26, -100, -15, -6, -26, -30, 64, 61, 
  0, -101, 85, 75, -73, -26, -89, 40, -81, 4, 3, -35, -94, 32, -97, 76, -22, -18, 0, -78, 0, 13, -94, 39, 35, -51, 37, -1, 64, -75, 59, 18, 59, -1, 19, 52, 8, -13, 28, -58, 39, 4, -94, -11, 50, 81, 79, 10, 44, -28, 22, 59, -67, -3, -79, -19, -64, 47, 27, -24, 61, -84, -32, 41, 13, -21, 8, 15, 76, -39, -94, -1, 58, 70, 12, -54, 13, -34, -77, -13, -18, 71, 28, -29, 85, -1, 26, -101, 45, -68, 37, 69, 17, -36, 0, 13, -21, -27, 11, 56, -3, 40, 
  -39, -15, 69, -29, 52, 30, -58, 68, 32, -43, 35, -76, -9, 46, 29, 52, 60, -19, 70, 12, -8, 4, -32, 6, 74, 28, -22, 44, 62, -20, 44, -43, 27, 1, 13, -48, 29, -2, -66, -81, 48, -92, -48, 60, 27, 73, -2, 25, 47, 54, -72, -82, -42, 20, -52, 47, 54, -88, -7, 75, -49, -35, 72, 73, -61, -30, 6, -24, -56, -32, 49, -68, -58, 63, 39, -72, -27, 22, -58, -53, -71, -21, 32, 67, -22, 9, -29, -20, -13, 56, -77, -37, 19, 62, 1, -77, -74, 25, -75, -85, -90, 18, 
  57, 22, -74, 17, 39, -9, 70, 39, -24, 48, -59, 53, -86, -2, -53, 74, 61, 4, -52, -39, -80, -5, -79, 66, -37, 74, 43, 21, -75, 57, -49, -15, -77, -38, -80, 52, -83, -78, 23, -21, -20, 34, 25, -79, -3, 47, -54, 73, -65, 48, -53, -9, -60, -13, -63, -6, -45, -87, 40, 12, -89, 32, -26, -73, -60, 62, -46, -48, 21, -53, 46, -28, 20, 29, 44, 7, 58, 43, 71, -70, -79, -38, -32, -23, 53, 67, 37, -51, -67, -45, -26, -86, -82, 4, -54, 14, -46, 26, 20, 45, -75, 66, 
  60, 69, 46, 44, 42, -1, -3, 12, 35, 22, -37, -4, -44, 2, -37, 13, -42, 78, 44, -4, -1, -27, -81, -72, -64, 65, 40, -49, 64, -36, 17, -56, -61, -18, 9, 50, -14, 8, 30, -3, 82, -35, -42, 24, -55, 36, -47, -29, -73, 29, -76, -27, 48, -13, 6, 45, 0, 41, -67, 28, -17, -44, 79, -77, -35, -86, -59, 1, -9, -34, 2, -62, -69, -24, 7, -69, 13, 42, -18, 23, -58, 39, -7, -1, -70, -62, 2, -69, -82, -80, -26, 56, -38, 39, 79, -24, -41, 60, 77, -70, -10, -19, 
  -47, -15, 33, -23, 58, -51, 72, 26, -47, 36, 48, -21, -52, 33, -86, -62, -72, -57, -63, 68, -29, 5, -78, -78, 36, 5, -26, 24, 37, -67, 28, -44, -80, -77, -19, -63, -18, -69, -79, 40, 32, -58, -80, 64, -78, -33, 76, -69, -73, 37, 57, 8, 37, 59, -44, -86, -77, -75, 49, 13, 42, -57, 66, -20, -37, -79, -79, 70, 51, -55, 26, 49, 47, -36, 74, -19, -38, 20, -50, -24, -49, -59, 8, 10, -16, 13, 69, -16, -30, 18, -28, -88, 24, 61, -63, 27, -83, 11, -81, 26, -57, 61, 
  101, -54, 12, 12, -38, -30, 76, 15, 101, -44, -57, -11, 21, -72, -98, 68, 56, -73, 18, 17, -35, -62, -50, 45, 36, -52, -42, 33, -70, -41, -35, -44, 3, 7, -26, -22, 52, -25, 31, -39, 80, 80, 77, 49, -28, -59, -95, 12, -58, -91, 51, 97, 88, -71, -67, 36, 77, -30, 127, -67, -34, 8, -26, -47, 33, 6, 11, -58, -60, 27, 23, -37, -49, 34, 37, 23, 75, -84, -64, 47, -53, 77, -35, -47, -12, 3, 12, 17, -35, 55, -19, -29, 15, -70, 17, 50, -83, 36, 87, -58, 66, 11, 
  -20, -3, -108, 54, -15, -44, -36, -65, 29, 55, 53, -1, 14, 47, 57, 26, -43, 59, 49, -66, -22, 100, 46, -31, 49, -35, 48, -74, -81, -46, -69, -63, -64, -56, 61, 84, 55, 92, 45, 23, -38, -56, 78, 2, 59, 69, -65, 2, -37, 56, -5, -14, -87, 41, 30, -42, -39, -51, 34, 60, -56, -80, -9, 31, -15, 9, -79, -14, 63, -26, 65, -90, -63, 58, 16, -18, -36, -70, 25, -19, 40, 45, -16, 38, -5, -25, -56, -7, -80, 9, -2, -22, 63, 70, 14, -76, -21, -4, -93, 59, 83, 20, 
  -34, -82, -87, -48, -10, 34, 3, 9, -67, -72, 3, 66, -64, 6, 44, 18, -34, 65, -27, -1, 55, -79, -77, -76, -6, -66, 43, 11, -63, 12, -54, -8, -28, -43, -35, 13, 62, 5, -63, 35, -17, -88, 70, 12, 8, -69, -18, 48, -36, -76, -38, 35, 61, -7, -44, -14, 8, 43, 70, 74, -27, 32, -83, 19, 30, 0, 62, -78, -55, -63, 10, 76, -29, -61, 54, -41, -18, -47, 66, -85, -17, -44, 28, 25, -1, 66, 24, -55, -70, 15, -15, -57, 21, 42, 35, 25, -73, 14, 11, -76, 54, 73, 
  -10, 59, -47, -48, 55, 8, 86, -56, 62, 7, -72, 42, 52, 58, -7, 46, 19, 22, 31, 59, 66, -39, -54, -23, -3, 27, 11, 29, -18, 58, 1, -3, -95, 7, -35, -3, -69, 59, 57, -70, 60, 21, -38, -33, 81, 1, 58, 27, -20, 81, -41, -38, 83, -37, -54, 32, -38, 5, 0, -3, 54, 56, -81, -55, 14, -35, -91, 77, -7, -86, -49, 24, 62, -52, -74, -19, 49, -19, 66, -63, -16, -15, 85, 24, -44, -80, -40, 26, -60, -70, 42, 2, -63, -25, 52, 32, 52, -33, 25, -6, 23, 36, 
  -40, 29, 30, -56, 64, -85, -54, 97, -17, -67, -68, 29, 45, 12, -44, -3, 17, 80, 75, -68, -49, 52, 38, -17, 74, -89, -86, 56, -50, -53, -44, 27, 12, -13, -20, 83, 41, -14, -76, 61, -55, -52, 31, -39, 26, 70, 3, 9, 66, 12, 49, -13, -29, 28, 81, -38, 45, 14, 38, 37, 60, 23, -66, 59, 78, -67, 15, -53, 3, -63, -54, -15, 42, 33, 69, 15, 47, -69, -48, -66, 19, 29, -79, -50, -29, 63, 23, 27, -70, -41, -1, 24, -7, -34, 79, -45, 5, -102, -53, -32, -54, 45, 
  -20, 1, -57, -96, -51, -11, 71, 59, 16, 11, -91, -16, -26, 3, -21, -9, -64, 37, 20, -32, -10, 56, 13, 39, 38, 21, -16, 24, -52, -83, -65, -65, -19, -54, -19, -57, -68, -56, 16, -27, 17, 67, -78, 4, 74, 63, 24, -75, 28, 54, -29, -58, -1, -43, 38, -1, 72, 68, -99, 56, -88, 42, 69, 19, -30, -36, -23, 34, 68, -60, 32, -34, -86, 74, -52, -93, 37, 59, -41, 63, -47, -3, -74, 43, -38, 7, 54, 37, -22, -72, 71, 57, -58, -45, 82, -69, -11, -67, 27, 16, 9, 81, 
  -60, -36, 25, 18, -29, -1, -79, 59, -64, -34, -9, 69, 12, -54, -72, 0, 30, -23, 35, -97, 45, 3, 4, 16, -71, 1, -81, -72, 6, 63, -74, 66, 34, -57, 16, -78, -3, 21, 39, 25, -82, 57, -83, 39, -93, -6, 28, -7, 62, 74, -35, 14, 62, -26, -59, -32, 19, 70, 3, -45, 20, -42, 14, 58, 22, 62, 6, 91, -48, -1, -70, 50, 88, 76, 27, -75, 3, 43, 18, 18, 27, 32, -5, 62, -34, -69, 17, -80, 44, 3, 80, 25, -57, 54, -53, -2, -41, -63, -60, -44, -35, -10, 
  2, 40, 42, -71, 23, -17, 52, -19, -16, -31, -96, -22, -36, -22, 10, 8, 75, -25, 13, -92, -6, -39, 76, -67, -40, 61, -2, -25, 22, -78, 45, 78, -8, 41, -61, 71, -12, 83, -46, -3, 4, -63, -60, 66, -53, -52, 34, -95, -70, 58, 69, -3, -39, 78, 50, 21, 38, -35, 18, 34, 6, 27, -36, -17, 9, -15, 19, 69, 83, -29, 10, 60, 66, -51, -61, 28, -53, 17, 40, -54, -71, 58, 5, 75, 93, 0, 26, 40, -32, -25, -42, 15, 19, -76, 91, 69, 39, -15, -10, 50, 84, -74, 
  -2, 28, 54, 32, 58, 20, -48, -109, -33, -78, 16, 76, -67, 81, 84, 33, -24, 120, 31, 83, 16, 3, 7, -34, -3, -62, -53, -18, -28, -31, -44, 70, -80, 45, -64, 81, -16, 14, -55, 43, 13, 37, 10, -57, 100, -43, -37, -1, 86, -27, -16, -25, 6, -69, -41, 10, -81, 12, 3, 21, -19, 7, 29, 90, 106, 11, -10, 29, 25, 40, -64, 23, -20, -77, 15, -38, 93, 59, 68, -58, -32, -53, 21, -2, -30, -66, 10, 70, 34, -90, 16, -55, 64, -64, -95, -28, 28, 14, -11, 76, 9, 80, 
  59, 65, 87, 57, -32, 79, 63, -39, -73, 35, 54, -42, 6, -43, 10, -71, -13, 11, -78, -69, 25, -23, 18, -34, -7, -66, 43, 15, 36, -52, 45, 61, -15, -24, -38, 13, 82, 35, 79, -55, 73, 10, -32, 16, 14, -50, 48, -30, -31, 55, -46, 32, -36, -12, -15, -52, -9, -16, 77, -59, -5, -11, 16, 27, 18, -42, -102, -17, -58, -68, -25, 40, 36, 13, -33, -8, -19, 47, 62, -82, 39, 7, 35, -35, 63, 1, 27, -49, 17, -76, -74, -1, 78, -60, 28, -17, -69, 61, -78, -54, 52, 58, 
  -40, 80, -29, 4, 37, 39, -46, -123, 48, 22, -1, 13, -20, 39, -63, -43, 16, -38, -56, -18, 33, 95, 23, -11, -58, -43, -76, -105, -86, -15, 67, -30, 18, -34, 66, 4, 23, 31, 58, -8, 95, 18, 91, -47, 31, -62, -73, -33, -40, 8, -32, 23, -46, 6, 8, 79, 36, -48, -31, 29, 38, -56, 57, -4, -36, 52, -26, -30, -75, -67, -42, 59, 27, 39, -79, -87, 32, 20, 103, 49, -12, 13, 117, 82, -45, 2, 66, -22, -12, -21, 4, 23, 51, -64, 27, -66, 7, 58, -4, -21, 42, 9, 
  39, 34, 43, -16, 10, 48, 75, 80, 60, -17, -3, 44, -54, -46, 9, -22, 81, -29, 66, 91, -85, 15, -37, -7, -73, 66, -77, 35, -35, -71, 81, -108, 52, -13, -96, -89, 64, 2, 36, -74, 9, -18, 34, 35, 52, -43, 70, 64, 15, -57, 51, 48, 14, -60, -66, 16, -60, 44, 27, 57, 39, 27, 47, -15, -57, 29, -44, -49, -79, -12, 68, 48, 84, -76, -13, 2, 74, -93, -19, -27, -74, -2, -110, 13, -4, -23, -72, 8, -37, -83, 25, -84, 62, -3, 53, -72, 36, 26, 77, -1, -27, 75, 
  3, -40, -7, -73, 71, 42, 51, -6, -6, -74, 62, 49, 70, -49, -27, -66, 13, -3, -95, 20, 9, 22, 11, 44, 14, -29, -44, 20, 13, 60, 60, 75, -95, -10, 76, 27, -19, 0, -39, -78, -17, -64, 84, -61, -3, -30, 41, -29, -33, 21, -44, 60, -57, -89, -12, -60, -43, 51, -3, -16, -79, -33, 51, 37, 66, 40, 73, 35, 7, 55, 71, -5, -5, -72, -108, 40, -48, 17, 67, 63, 0, 40, 17, -48, -44, -19, 9, 36, -67, 10, 35, -64, -36, -26, 18, 48, -15, -41, 51, 68, -12, 10, 
  14, -86, 46, -62, 18, 27, 71, 96, 9, -62, 65, -37, 12, 48, -88, 29, 58, -110, 34, 30, -92, -106, -34, 15, 2, -15, -23, 66, -35, 48, -74, 7, 18, -75, 28, 23, -75, -69, -60, 69, 34, -2, -8, -63, 54, 62, 55, -17, -87, 23, -60, 27, 4, -45, 62, -20, 43, -34, 53, -58, -67, 80, 61, -2, 79, -77, 20, 37, 1, -53, 30, -49, -40, -17, 87, -7, 43, 0, -3, 4, -3, -14, -80, 25, -56, -4, -38, 20, -52, -38, 81, 77, -42, -78, -13, 30, -2, 2, 49, 38, -8, -77, 
  -22, -89, -16, -67, 78, -14, -42, 44, 25, -20, -57, 10, -40, -36, -97, -29, 24, -71, 95, 20, 48, 4, 2, 30, 4, 36, 51, -65, 72, 5, -59, -106, 39, -40, -34, -111, -53, -11, -59, -84, 82, 51, 2, 30, -34, 30, 58, 89, -60, -4, -44, -17, 21, -78, 5, 27, -62, 38, 35, 42, 73, 87, 2, -26, -29, -84, 51, 56, 36, 49, 14, 11, 32, -38, -51, -56, 96, -50, -100, -55, -1, -12, 21, 56, -42, 2, -75, -6, 85, -12, 59, 37, 60, -16, 37, -11, -30, -43, 22, 71, -35, 37, 
  50, -79, 49, -35, -34, -80, -7, 1, 80, -4, -49, 40, -10, -29, 74, 68, 48, 6, -55, -75, -41, 16, 10, -49, -79, -12, 10, -67, -31, 42, -70, -17, -82, -83, 50, 64, 45, -28, 4, -13, -81, -58, -15, 31, 28, 2, -45, 52, -72, -39, -7, -57, -27, -24, -83, 54, -18, 11, -21, -21, 61, 20, 29, 74, -31, -52, -72, 0, 29, 32, -38, -75, 37, 13, -23, -63, -58, 27, -5, 1, -39, 12, 77, 13, -81, 35, 45, 70, -47, -63, 40, 26, -87, -86, 80, -57, -12, 28, 7, 37, -63, -41, 
  91, -74, 63, -39, -60, -7, 58, 77, 108, 36, -17, -83, 34, 17, -46, -10, -17, 20, 78, 78, 26, -41, 38, -60, -45, 52, -32, 7, 119, 81, -23, -99, -34, 62, 27, -94, 18, 40, 15, -20, 91, 3, 42, -76, -76, 6, -74, 35, -82, 39, -73, 67, 18, 55, 6, 70, 17, -70, 53, -46, -3, -17, 54, -69, 56, -67, -9, -16, -38, -83, -76, -81, 74, 20, -54, -26, -27, -44, -81, -49, 18, 96, -71, -77, -79, 86, 47, 5, -22, 39, 23, -47, 37, -30, -80, -36, -76, 51, 79, 10, -38, 36, 
  -84, -87, -65, 60, 0, 18, 29, 8, -43, -15, -17, 45, -83, -83, -19, 32, -92, 36, 1, -27, 65, -7, 56, 32, 65, -98, -39, 89, -36, -43, 29, -54, 23, -26, -13, 41, 46, -20, -57, 28, 12, -67, -17, -45, -8, -52, -73, -29, -38, 41, 75, -98, 47, -74, -22, -86, -28, 59, -28, 15, -21, 45, -69, 32, -78, 68, 22, 65, 17, -85, -91, -8, 15, 74, 17, 95, -44, -48, -22, 7, 45, -55, 35, 0, -20, 49, 68, -13, -41, -63, 67, 78, -9, 68, 11, 2, 21, 7, -34, 29, 57, -21, 
  3, 55, -10, 93, 61, -9, -43, 4, 21, 69, 82, 25, 92, 33, -12, -65, 11, 27, 16, -60, -35, 46, -63, -66, -52, 7, 2, -40, -30, 34, -50, -83, -22, 3, 72, 32, -26, -35, 66, 25, -47, -74, 64, -60, -44, 80, -84, 50, -8, -41, -105, 38, 28, -13, 31, 41, -71, -22, -46, 18, 22, -32, -68, -32, 72, -48, 75, -27, 50, 0, 0, -7, -74, -71, 76, -7, -9, -44, 5, -48, -84, 2, -70, 42, -83, -17, 21, 33, 42, -51, -32, -8, -40, -80, 12, 29, 47, 32, 25, 25, -79, -32, 
  -47, -1, 4, -57, 4, 41, 56, 37, 54, 54, -44, -13, 12, 48, -11, 61, 46, -71, -66, -2, -56, -71, 58, 45, 26, 24, -48, 61, -70, 42, 58, 60, -8, 11, -53, -59, 72, 17, 64, -19, 4, 45, -27, 27, 62, 18, -85, 92, 62, 8, -5, 51, -83, -69, 60, -33, 67, -94, 7, -71, 33, 23, -74, -11, -6, 8, -16, 14, 6, -29, 12, 55, 39, 69, 58, -44, -39, 1, -82, -40, 66, 47, -86, -27, 49, -23, 60, 80, 22, -69, -26, -17, -65, -48, -16, -53, -1, 61, -73, -44, -86, 80, 
  1, 18, -17, 12, -5, 55, 46, 6, 87, 15, -49, 28, 76, -78, -77, -63, 70, 48, 69, 55, 56, 82, 48, -34, -25, -65, 20, -57, -71, -80, -47, 54, -66, 14, 12, -59, 95, -65, -53, -46, -10, -66, 95, -5, 2, 58, -92, -44, 4, 53, -35, -48, 65, 51, -64, -10, -35, -8, 96, 89, -30, -22, -63, -30, -52, 18, -15, 39, 38, 51, 79, 41, 24, 7, -42, 18, -39, 8, 27, 3, -31, 26, 44, 50, -33, -41, 44, 49, 83, 50, -56, -41, -61, -4, 13, 26, 40, 33, -86, -55, 42, -51, 
  -4, 54, 32, -54, -53, -81, -50, 26, -71, -66, -44, 67, -13, -24, 5, -67, -48, -7, 48, -95, 51, -84, -15, 51, 32, 6, 26, -2, 69, -53, -26, 31, -13, 28, 34, 78, -61, -58, -47, 23, -87, -66, 24, 50, 59, 48, 36, 27, -71, 1, -65, -65, -19, 26, 93, -37, 74, -38, 33, 51, 22, 56, -56, 26, 82, 95, 19, 84, 84, -47, -9, -34, 68, 49, 42, 27, 62, 30, -49, 67, -42, 59, -67, -23, 72, -71, -43, -70, -65, 20, 101, -42, 17, 39, 82, -11, 63, 18, 66, -17, -36, 49, 
  52, -3, -57, -90, 35, -47, 4, -24, -69, -74, 47, 38, -43, 64, -41, 7, 83, -28, -70, -74, 2, 74, -93, 68, 6, -60, 77, -15, 53, 64, 69, 55, -32, -62, -5, -23, 9, -33, 47, -15, 17, -21, -25, 3, 2, 69, 72, -70, 55, -88, -16, -76, -20, 5, 18, -5, -27, 39, -55, -49, 29, -2, -30, 62, 57, 74, 67, -67, 56, -30, 68, 53, -82, 4, 24, 45, 4, -50, -64, -71, -65, -3, -84, -40, 24, 91, -28, 9, 3, 1, 63, -46, -61, 41, -19, 50, -1, 86, -10, 37, 17, 70, 
  28, 51, 1, 44, -74, -82, -10, -10, 32, -8, 12, -73, 26, 36, -33, -80, 11, -83, 44, -12, 25, -103, -57, 31, 47, -5, 9, -54, 61, 64, 34, 10, -52, -12, 54, 24, -10, 53, -64, -7, -65, -20, 12, 0, -62, 1, 30, 88, 41, -67, -75, -79, 28, 70, 6, -91, -49, -79, 42, 15, -66, -54, 81, -39, -40, 47, 47, 43, 34, 34, -59, 70, 71, -47, -5, 69, 6, 41, -8, 18, 12, -10, 16, 20, -21, -19, -15, -33, -73, 59, 56, 36, 9, 70, 34, -57, 42, -95, 47, 71, 34, -60, 
  0, -26, 47, 15, 23, -33, -15, -25, 5, -75, 68, 34, -46, -40, 27, 47, -63, -39, -74, -12, -37, 59, 13, -83, -33, -20, 63, -71, -46, -93, 64, 12, -77, 49, -26, -72, -55, 60, 3, -11, -65, -15, -74, -13, 52, 12, -46, 68, 51, 24, -43, 43, -41, -29, -60, -60, 68, 28, -48, -44, -62, 31, -23, 59, -70, 43, -28, 38, -74, 31, 17, -56, -54, -55, -18, 27, -78, 53, 4, 67, -71, -66, 22, 44, -42, -11, 18, 59, -33, 10, 60, 65, 31, -13, -78, 49, -74, 18, 41, -89, -65, -63, 
  -27, -37, 41, -43, 91, 14, 4, -81, -70, -16, -48, 89, -42, 11, 76, 16, 54, 104, -67, 61, -69, 70, 70, 46, 31, -36, 13, -76, 61, 46, 78, -8, -1, 24, -54, -55, 2, 17, 60, -56, 55, 43, 58, 21, -70, -27, -83, -12, 15, -16, 22, 48, 91, -33, 7, 74, 75, -41, -31, 2, -33, -30, 67, 37, 45, -25, 63, 62, -68, 29, -73, 4, -22, 21, 2, 75, -28, -82, 10, -55, -22, -54, -43, 36, 13, -50, 20, -21, -46, -10, 66, 35, 1, -25, 2, -53, -33, -2, 72, 52, 20, 51, 
  24, 22, -38, 71, -21, -21, -61, -63, -36, 42, 49, 24, -30, -4, -102, -49, 20, 49, -45, 16, 80, -25, 19, 77, 86, -27, -12, -75, 57, -14, -60, 22, -77, -88, -79, -71, 68, 8, -29, -63, 65, 10, -75, 36, -79, 30, 92, 59, 72, 70, -55, 33, 1, 22, -76, 19, -1, 54, -96, 55, 80, -84, -16, -29, 67, 24, -79, 57, 28, 39, -24, 46, 30, -75, 55, 12, -42, 39, 14, -43, -27, -12, -24, -8, -41, -82, -58, -4, 13, -18, 11, 77, 20, -50, 59, -45, 25, 17, -52, -53, 7, -77, 
  74, 81, 19, 66, 45, 46, -2, -48, -39, 48, -46, -8, 12, -63, 87, 13, -54, -56, -24, 53, -72, -73, -40, -1, -21, -39, -31, -54, -61, -6, -17, 42, 60, 52, -72, 86, -7, 65, -76, -28, -57, 23, -9, -50, -46, -72, -75, 17, 66, -54, -39, -64, -54, -37, -19, -14, -33, -37, 69, -64, 44, -70, 79, 23, -2, -84, -45, -21, 46, -49, 16, 39, -6, 67, -7, 37, 84, -74, -66, -76, 19, -49, 77, -66, 43, 31, -70, 58, 5, 13, -77, 64, -36, -49, -7, -34, -31, 26, 43, 35, 57, 8, 
  54, -40, -77, 2, 48, -44, 25, 67, 74, -81, -68, -79, -24, -67, -63, -42, 40, 24, -45, 49, -41, 53, 0, -1, 34, 59, 57, 59, -74, -48, -9, 71, 41, 59, 63, -95, -49, 23, 12, 67, 8, -18, 72, 2, -11, -9, 7, 48, -53, -23, 17, -3, 73, -93, -84, -7, -4, 32, 78, 45, -68, -32, -59, 51, -90, -21, 35, -31, -51, 47, 11, -84, 53, -73, 51, -15, 49, 29, -22, -38, -42, 80, -73, -34, 31, -61, 74, -27, 26, -70, -81, -73, 36, 8, 51, 81, -11, -21, -75, -29, 76, -11, 
  22, 39, 37, -65, 18, -52, -26, -56, 61, 59, 4, -3, 60, 63, 26, 6, 44, -65, -58, -1, -4, -78, 19, -59, -98, -38, -71, 20, -42, -26, -70, -19, 46, 64, 16, -24, 40, 34, -38, 60, 9, -10, -83, -23, -47, 55, 29, 11, -13, -9, -41, -35, 88, -65, 48, -12, -3, 24, 77, 51, 27, 46, 29, 39, 2, 58, -62, -59, 9, 78, 25, -60, 55, -2, -27, 67, 83, -76, -40, 6, -24, -29, -81, -70, -39, 103, 23, 64, -36, -78, 4, 27, -28, -37, -26, 17, -71, -72, 61, 33, 27, 3, 
  80, -52, -29, 40, 30, 43, -16, -51, 1, 47, 90, -33, -6, -61, -46, 10, 2, -96, 56, 84, -49, 66, -20, -3, 29, 7, 31, -37, 87, -63, -22, -88, 17, -16, 12, -93, 11, -65, -48, -58, 47, 20, -44, 53, -37, -48, -82, 69, -65, 68, 4, 44, -19, 8, 61, 75, 38, 59, 60, 21, 75, -54, -12, 2, -18, -94, -28, 9, 41, -65, 76, 85, 16, 5, 39, 37, -55, -1, 4, -33, 71, 38, -72, 44, -63, -16, -66, 16, -29, 57, 2, -46, -36, 44, -52, -103, -76, -11, 3, -5, 1, 107, 
  43, 26, 10, -67, -46, -89, 27, -23, 47, 20, 59, -28, -34, 30, -56, 35, -82, 59, -41, 3, 88, 70, 73, -10, -45, 43, -27, -54, -24, -68, 34, 60, 9, 54, -4, 79, 32, 0, -1, 50, -49, 60, -7, 97, -11, 44, -52, -28, -77, 8, 38, -39, 23, 64, 71, 20, 46, -30, 1, -23, -8, 3, 67, 6, 66, 87, -19, 59, 59, 38, 56, -72, -5, -32, 60, -109, -32, -46, -23, 42, -55, -79, -46, 10, 24, -69, 69, 73, -40, -55, -22, -1, 110, 18, -14, 60, 108, -41, -55, 37, -70, -32, 
  71, -31, -90, -44, 75, -7, 46, 31, -46, 41, -64, 106, -25, -33, 4, 37, -24, 66, 39, 24, 60, -57, 89, 34, -9, -19, 75, 39, -64, -18, -48, 52, 33, -25, -47, 58, -64, -28, 58, 8, -14, -46, -24, -76, -33, 34, -33, -72, 6, 85, 20, -21, -51, -5, -57, -29, -60, 1, -82, 16, -71, 8, -11, 2, 68, -80, 40, -24, -88, -51, -25, -2, -31, 28, -95, 19, 25, 10, 48, 22, 40, 38, -9, 100, -2, -2, -15, -75, 44, 12, -32, 53, -4, 54, 0, -23, -17, 92, 29, 15, -21, -86, 
  -6, 95, -28, 19, 64, 71, 55, 20, 57, -61, -14, 19, 29, -43, 68, -77, 38, 61, 10, 33, 44, -27, -41, -81, -2, 64, -16, -16, 35, -46, 18, 38, 52, 46, -27, 57, -30, 18, -90, 11, 16, 46, -11, -44, 36, -88, -33, 6, -35, 62, 47, 18, -63, 36, 4, -85, -4, 2, 49, 70, 39, 26, -70, -3, -14, 78, -73, 37, -87, -15, 51, -79, -95, 29, -21, -83, 30, 65, -22, 11, 65, 4, 59, 16, -64, -1, 62, -20, 45, 20, -35, -31, 9, 17, 31, -40, 23, 37, -19, -5, -73, 39, 
  77, 3, 80, -45, 70, 1, 61, -109, 10, 26, -35, -86, 57, 75, 31, -66, -2, -9, 35, -68, -28, -26, 72, -84, -67, 49, 6, -63, -14, 18, -5, 68, -19, 82, 18, 57, -50, -31, -1, -2, 57, 21, -6, 75, 16, 37, -68, -26, -66, 6, -27, 49, 60, -37, 25, 29, -17, -64, 83, -64, -36, 44, -18, -59, 50, -25, -45, 27, -6, -63, -76, -51, -41, 43, 58, 42, 62, -56, 60, -21, 1, 52, 17, -47, -36, 30, 10, 97, 43, 8, 0, -33, -65, -39, 46, 44, 44, 74, 65, 4, 48, -22, 
  -28, -33, 1, 75, -63, 50, -27, -47, -41, -44, 50, 79, -36, -49, -20, 2, 37, -63, -21, -81, 64, -55, 47, -71, 32, 58, 42, -62, -89, -27, -6, -62, -89, 51, 41, 25, 14, -79, 73, -87, -5, 3, -55, 65, -5, -35, -25, 53, 34, 12, -21, 71, -6, 24, 23, 80, -65, 71, -31, 6, -10, 3, -74, -28, 36, -59, -35, -43, 3, -79, 42, 77, -87, 26, -37, 31, -64, 69, -28, -64, 18, 64, 71, -17, -71, -20, 32, 9, 60, -62, -4, 18, -18, 66, 49, 3, -83, 32, -19, 46, 8, 25, 
  17, -73, 85, 66, -74, 60, 25, 57, 47, 58, -30, 14, 47, -26, -60, 90, 72, -19, -75, 51, -74, -3, -51, 83, 1, 28, -82, -49, 58, -32, 7, 35, 17, 7, -46, -53, -13, -78, -28, -5, -56, 57, -54, 66, -44, 67, 29, -53, -77, 65, 34, 30, -85, 15, 35, -33, -59, 9, -76, -60, 34, 27, -43, -34, 0, -52, -79, 36, 39, 59, 45, -62, 18, -14, 94, -61, 9, 72, 67, 31, 3, 80, -49, -88, -6, 54, -37, 19, 56, 31, -77, 19, 9, -68, -77, 27, -15, 4, -23, 29, 12, -3, 
  46, -5, -3, -32, -14, -10, -46, 111, 91, -66, -63, -70, 80, 42, -47, 83, -41, -75, 90, 54, 21, -62, 19, -13, 24, -23, -63, 19, -23, -59, -51, -66, -33, 7, 72, 54, -61, -57, -50, 30, -37, -88, -15, -18, 60, -27, -16, -34, 47, -54, 24, 32, 31, -36, 50, 28, -6, 84, -86, -17, -46, 26, -31, 23, 37, -26, -54, -6, 8, 13, 49, 46, -13, 42, 107, 100, 57, 86, -8, -11, -97, 20, -76, 17, -34, 26, 50, 24, -40, 81, 49, 15, -41, 75, -64, -32, -31, -80, -35, 53, 48, -63, 
  -17, -52, -35, 30, 35, 26, -7, -5, -24, -4, 41, 78, -11, -57, -26, 65, 48, -15, -75, -1, 29, -3, 78, -66, 96, 43, 19, -78, 12, -24, -6, 44, 6, -40, 70, 111, 99, -3, -77, -58, -25, 36, 33, 56, -6, -38, 0, -57, 12, -20, -61, -18, -3, 85, 4, 81, -36, 24, 2, 9, 88, -50, 47, 55, 77, 18, -28, 74, -28, 12, 0, 12, -56, -33, -93, -20, 56, 72, 79, -26, -26, -60, 81, 115, 4, -55, -66, 76, -50, -54, 68, -56, 40, 52, -15, 84, 8, 0, -3, 15, -64, 44, 
  9, 11, 87, 34, -71, 22, -7, 117, -8, 25, -48, -45, 31, 57, 33, -64, 36, 30, -39, -42, 23, -110, 12, -56, 70, 56, -13, -5, 45, -28, -15, -3, 35, -66, 14, 31, 53, 15, -85, 56, -103, 38, 40, -31, -82, -33, -18, 45, -32, 10, 63, -93, 66, 58, 42, -8, 17, -15, -15, -9, 21, 42, 78, -29, 20, -101, 1, -4, 75, 58, -25, -49, 62, -24, 21, -91, -78, -69, 18, -9, -3, 72, 27, -55, -52, -41, -25, -81, 26, -46, -71, -21, -42, -24, 80, 44, 55, 35, -32, -59, 70, -53, 
  -5, -58, -5, -45, 56, 82, 38, 1, 32, 43, 65, -39, 11, -28, 38, -75, -71, 10, -63, -6, 50, -2, 35, -10, 32, 70, 61, 60, 10, -62, -43, -42, -35, 20, 27, 49, -10, -27, -10, 71, 50, -29, 40, 80, -12, -9, 23, 15, -40, -85, -62, 69, -14, -5, -68, 11, -52, 74, -16, 60, 37, 8, 2, -84, 18, 55, 63, -50, -8, 72, -14, -17, 23, 23, -4, 49, -4, 8, 13, -15, -70, -67, 97, 109, 33, -46, 76, 3, -8, -11, -29, -22, -30, 8, -43, 12, -79, -59, -7, -28, -14, 90, 
  7, -53, 39, -33, -18, -23, 16, 81, -18, -65, -60, -18, 17, 15, -11, 53, -64, -92, -10, 51, 32, 13, -52, -61, -13, 44, 50, 49, -67, 72, -61, 36, -65, 23, 35, -48, -41, 65, 65, -57, -46, 11, 56, 24, 18, -30, -22, -33, -92, -6, 55, 50, 54, 47, -56, 73, 59, -1, -30, 52, 62, 7, 17, -59, 62, -69, -25, -59, -73, -74, -70, 3, 56, -1, -21, -65, -63, -13, 17, 23, -105, -66, 44, -32, 69, -27, -47, -32, 53, 74, 80, 31, 57, 59, 9, -48, 73, -30, -64, 68, 14, -18, 
  -9, -4, -67, -70, -28, -82, -82, 71, -6, 17, 56, 78, 8, -75, 5, -81, -65, -70, -67, 21, -55, -14, -32, -19, 5, -27, -31, 44, -77, -51, 45, 32, -8, -59, -72, -46, 26, -35, -82, -29, -73, -29, 64, 57, 4, -67, -81, 44, 1, -57, -2, 82, -32, -36, 7, 48, 8, 0, -35, 84, 84, -14, -16, -6, -61, -61, 36, 48, -83, 70, -65, -26, 58, -7, -71, -77, -68, -72, 79, 66, -3, -7, -62, -46, -81, 33, -57, 4, 66, 61, -81, -18, 78, -76, -33, 76, 0, -2, 55, -25, -76, 46, 
  -46, -70, 47, 64, -55, -84, 73, 4, -49, 25, -88, -39, -87, 73, -64, 2, -48, 35, 87, 9, -16, 2, 16, -36, 81, -41, -3, -11, -11, 73, -6, 38, -55, -34, 64, -22, 35, 71, -52, 54, -50, -23, -4, 90, 68, 3, 73, 24, 23, -85, 57, 78, -53, -16, -31, 5, -26, -20, -92, 19, 40, 20, -47, 51, -59, 99, -75, 19, -61, 71, -55, -11, -50, -73, 70, -79, -27, -9, 60, -61, -44, 69, 7, 44, 18, -1, -21, -15, -71, 96, 29, 43, 62, 28, 50, 2, 62, 14, 93, 2, 55, -61, 
  -40, 49, 56, -48, -54, 90, 21, -54, -15, -23, -43, -26, 72, -24, 19, 59, -54, -22, -18, -68, -94, -4, -7, -74, -31, 23, -54, -41, 48, -20, 13, 39, 33, 61, 67, -74, 58, -44, 62, -79, 64, 57, 60, -26, -72, 53, -59, 62, -57, -73, 9, -44, 8, -62, 42, -44, -51, 38, 92, -20, -29, 8, 53, 69, 87, -34, -59, -84, 12, 75, -49, 16, -68, 71, -29, 12, -46, -57, 15, 10, 62, 63, -77, -91, 48, -65, 86, 77, 73, -40, 50, 35, -17, -15, 63, -65, -43, -45, 71, 59, -84, 81, 
  -60, 40, -50, 24, -52, 56, 90, -64, -73, 85, 47, 60, -58, -41, 63, -45, 33, -34, 3, 37, 43, 95, 26, -79, -87, -63, 63, -74, -71, -44, -29, 43, 13, -21, -33, 80, 50, -40, 51, -13, 88, 48, -59, -68, 82, -2, 58, 26, -76, -36, 59, 1, 68, 43, -85, 16, 55, 26, -37, -42, -57, 13, 66, -75, -21, 7, -41, 38, 59, 41, 16, -23, 51, 35, -54, 27, 9, 19, 82, 34, 75, -37, 0, 75, -96, -1, 50, -24, 81, -40, 32, -20, -69, 62, -49, -46, 59, -2, -12, 36, -68, 30, 
  -7, -55, -22, -73, 35, 21, -73, -22, -14, 42, -9, 28, 26, -61, -67, 56, 45, 50, 39, 59, -56, -14, 40, 27, 7, -57, -70, 83, 18, -30, 34, -45, -57, -23, -27, 18, -9, 12, -14, 43, 0, -84, 50, 24, 0, 10, 70, 29, 52, 26, -48, -24, 24, -41, 76, 59, -98, 68, 37, 22, 8, -13, 59, -6, -12, -76, -31, 0, 50, -37, 47, 51, -7, 49, -86, 59, -4, -73, -46, -5, -14, -89, 29, 0, 4, 1, 14, 28, 24, -5, 13, -6, -90, -74, 67, 12, 30, -37, -55, 29, 56, -95, 
  -19, 51, -32, 15, 55, -80, 0, -15, -37, -36, 20, -81, 46, 17, 31, -88, 68, -39, 49, -23, 79, -70, 43, 75, -53, -12, 26, -2, 60, 24, 28, -21, -57, -17, -24, 79, -74, 46, -1, -13, 22, 54, -9, 37, -49, 42, -19, -83, 7, -4, 12, -43, -32, -56, -61, -3, -86, 66, -15, 58, 35, -96, -34, 4, -98, 12, 39, -18, 74, 14, -24, -18, -33, 42, -69, 1, 45, -34, 16, 72, -50, 50, 52, 78, 8, 45, 62, 50, -89, 38, -41, -67, -1, -42, -39, -77, 72, -58, -47, 40, -44, 49, 
  -88, -64, 52, 49, 60, 48, -55, -25, 29, -24, 53, 46, -93, -49, -32, 35, -6, -85, 37, 6, -23, -42, -31, -51, -30, -57, -41, 37, -28, -5, -11, 22, -29, -92, 9, -32, -60, 6, 53, 57, -33, -81, 41, -8, -8, 42, -78, 21, -29, -40, 49, 21, 13, -71, 73, 32, -82, 9, -53, 5, 44, 26, 75, 41, -34, 67, -27, 15, 59, 7, -66, 78, 40, 64, -46, -12, -49, 24, 6, 58, 7, 85, 27, -89, 28, -58, 27, -87, -80, -14, 35, -56, -68, -10, -14, -43, 37, 62, -21, -8, 25, 62, 
  -19, 70, 28, 21, 19, -26, 66, 58, -21, 43, -43, -73, 56, -50, 75, -74, 7, -110, 37, 12, -62, -3, -110, 49, -27, 59, 86, -82, -49, -97, -69, 59, -14, -59, 56, 21, 1, -81, 14, -54, -34, 61, -47, -40, 20, 25, 68, 89, 74, 73, 33, 8, -24, 26, -21, -24, -51, -95, -43, 53, 49, 35, 23, 10, 66, 35, 1, 40, 40, 37, -78, 35, -62, -8, -31, 28, 5, 15, 27, -7, 40, -39, -25, -14, 14, 87, 10, -24, -71, -6, 21, -28, 22, -5, 55, -33, -89, -16, 56, 28, -79, 76, 
  -22, -73, -12, -6, 24, -34, 21, 40, 2, -32, -15, -64, -87, -58, -62, -9, -87, -50, -57, -71, 35, 3, 14, 21, 70, -26, -76, 42, 42, 52, 73, -55, 12, -49, 9, 11, 53, 27, -41, 47, 63, -48, -18, 13, -86, 64, -26, 7, 48, -24, 42, -51, -24, 39, -31, 34, 60, -37, -59, 34, 30, -73, -53, -25, 30, -13, 17, -92, 48, -92, 49, -70, -4, 29, -60, 37, -69, 18, 44, -59, 36, -50, -45, 25, -27, -14, -55, 72, 10, 42, 67, 8, 19, 18, 42, -4, 51, -42, -43, 17, -60, -88, 
  0, -33, -93, -80, -10, 10, 20, -66, 74, 50, -43, 63, 29, 27, -60, -33, -85, 120, -41, -59, 61, 82, 4, 75, 4, 24, 30, 42, 58, 33, 82, 59, 15, 60, 21, 2, -2, -3, -6, 11, 76, 36, 27, 38, -27, 57, 5, -23, 18, -38, -25, -31, 12, 4, 79, -17, -52, 37, 0, -71, -9, -35, -41, 34, -74, 51, 51, 82, -5, -75, 72, -91, -46, 3, 57, 45, 64, -36, -76, 52, 37, 49, 48, 99, 46, -74, 75, 17, -67, 41, -11, -53, -43, -12, 68, 103, -52, -52, -31, 56, 13, 13, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 64,102 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0022559603676199913, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[102] = { -10045, -1197, 30172, 27094, 18801, 12942, 23540, -6712, 25651, -10762, 10168, -1853, -2188, 9963, 7992, 17857, -9274, 12623, 11212, 32226, 14921, 14095, -1734, 14418, -14827, 14661, 12880, 20566, 33636, 8781, 19147, -6652, 20366, 43034, 28084, -7895, 24027, 5418, 4459, 2592, 23241, 5263, -5117, 15727, -551, -22262, 16573, 25466, 5916, 46121, 14555, 2156, 19807, -33358, 19316, -4846, 12807, 20232, 7831, 14708, 4513, 14023, 34675, 24753, 16664, 8186, 380, 9345, 18936, -11442, 26151, -2439, 17690, -17562, -12888, 32514, 26699, 29330, 31454, 28527, 9185, -17679, -4728, -1297, 8441, 36447, 20163, 906, 54515, -8712, -12894, 16493, -1991, 21833, 24639, 16176, -18490, 16115, 4902, 5216, 20503, 19737, };
const TfArray<1, int> tensor_dimension7 = { 1, { 102 } };
const TfArray<102, float> quant7_scale = { 102, { 0.00019308163609821349, 0.00014905480202287436, 0.0001735482073854655, 0.00015701595111750066, 0.00022716421517543495, 0.00016802932077553123, 0.00019680392870213836, 0.00013738124107476324, 0.00013692001812160015, 0.00014860781084280461, 0.00018999303574673831, 0.00022842426551505923, 0.0001769060327205807, 0.00019789155339822173, 0.00016127397248055786, 0.0001785185158951208, 0.00015159971371758729, 0.000222081333049573, 0.00017536862287670374, 0.0001379295572405681, 0.00015050036017782986, 0.00019284186419099569, 0.00018651116988621652, 0.0002590577641967684, 0.0001598314120201394, 0.00014415441546589136, 0.00021212443243712187, 0.00020493792544584721, 0.00016019848408177495, 0.00015106658975128084, 0.00017874460900202394, 0.00022386146883945912, 0.00022916590387467295, 0.00019598976359702647, 0.00023169342603068799, 0.00015917344717308879, 0.00019345952023286372, 0.00014510021719615906, 0.00016066149692051113, 0.00016730705101508647, 0.0001795316202333197, 0.00014833507884759456, 0.00020230685186106712, 0.00018885359168052673, 0.00012865642202086747, 0.00015416527458000928, 0.00015510221419390291, 0.00020820603822357953, 0.00019898226310033351, 0.00024962075985968113, 0.00018694395839702338, 0.0002400092052994296, 0.0001773063704604283, 0.00013399760064203292, 0.00026513138436712325, 0.00019478693138808012, 0.0002843857801053673, 0.00015941256424412131, 0.0002488495665602386, 0.00017940303951036185, 0.00016797060379758477, 0.00022839833400212228, 0.000152646578499116, 0.00015612476272508502, 0.00020508079614955932, 0.00017317829770036042, 0.00016994265024550259, 0.00019884541688952595, 0.00019276060629636049, 0.00013049460540059954, 0.00020496590877883136, 0.00016704743029549718, 0.00024144248163793236, 0.00013862924242857844, 0.00018543886835686862, 0.0001523978280602023, 0.00017748044047039002, 0.00014639974688179791, 0.00021232507424429059, 0.0002091242786264047, 0.00021561220637522638, 0.00013636704534292221, 0.000210515660000965, 0.00020824250532314181, 0.00022537416953127831, 0.00016233990027103573, 0.00017077560187317431, 0.00018548039952293038, 0.00016422539192717522, 0.00016981613589450717, 0.00019324458844494075, 0.00019814255938399583, 0.00021432853827718645, 0.00020217096607666463, 0.00021913539967499673, 0.00027922567096538842, 0.00018598341557662934, 0.0001991192257264629, 0.00022705219453200698, 0.00021018831466790289, 0.00016312208026647568, 0.00019881859770976007, } };
const TfArray<102, int> quant7_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[102*1*1*102] = { 
  /* [0][0][][] */ 3,-10,1,27,22,-3,6,52,53,23,10,29,127,77,5,58,41,-22,-6,33,4,57,26,-26,45,12,13,-7,62,-28,-16,-14,7,-59,-63,-17,5,-41,-39,15,-14,-25,22,-15,58,-8,18,-25,4,-27,-68,-6,29,18,-19,19,-34,74,22,-4,26,24,-3,14,33,-35,-36,-17,12,-38,-10,-24,-1,-44,49,-50,-39,10,-60,-8,-57,7,18,-16,23,3,15,-36,22,85,20,31,-56,-30,4,43,-19,-1,-11,48,21,-47, 
  /* [1][0][][] */ 56,-92,35,-31,36,4,-69,16,-81,-24,28,-39,-39,117,-86,50,21,3,0,-25,42,-1,56,-11,60,-8,25,79,-28,54,15,-23,-72,11,-39,-49,40,-42,83,-69,-9,-50,44,67,-54,-41,7,41,68,-67,71,-12,58,-96,-26,-127,83,43,16,84,-40,-26,46,-57,-61,24,1,-72,-28,40,-1,96,46,20,87,-56,-4,20,-39,-64,-3,4,40,-30,23,15,109,-40,88,38,16,21,-44,67,15,-19,0,-41,-58,-47,45,-120, 
  /* [2][0][][] */ -9,-26,0,3,-75,0,-40,-99,-31,9,38,15,-86,14,16,-41,-76,-49,-32,11,-24,60,5,-111,-27,-6,108,-31,10,-92,71,-51,-61,-41,65,34,6,3,-23,6,111,-28,69,35,-71,-7,17,47,-4,-43,49,38,-18,-24,-38,1,-70,-15,-37,32,-57,-31,-10,-43,-32,-37,-8,-13,28,-127,-8,62,18,-25,-27,-12,13,38,84,-23,52,-20,-3,12,-52,61,66,13,-41,-2,3,75,-28,18,32,3,-38,17,-18,-105,-5,33, 
  /* [3][0][][] */ -40,41,-23,6,9,-31,-108,58,-60,0,-35,102,46,-50,-7,-41,-28,0,-84,-34,2,38,-83,-28,-15,-38,-90,-45,16,-11,80,44,-47,-65,-9,-55,43,5,-34,-2,48,32,-48,17,36,-8,-10,-1,58,21,-7,-31,20,-44,2,47,-11,100,55,36,46,-3,-31,-79,-41,64,-11,-31,11,20,-29,-23,-84,-37,127,-82,44,16,65,-52,48,69,-8,-30,9,80,20,-2,-14,-4,-94,-78,-104,36,47,79,43,-26,-29,19,-109,-67, 
  /* [4][0][][] */ -54,6,-20,29,6,-27,-8,-10,-49,2,68,-30,35,28,14,-63,-1,68,20,-2,-12,4,70,24,18,-19,-8,42,22,-15,-29,32,-14,-67,9,-1,10,48,21,-41,10,53,-54,-83,-45,-55,-51,39,11,8,-10,-27,-13,5,73,-5,-16,18,-45,-32,-14,12,62,6,-34,-14,69,10,18,9,-25,-55,-28,-27,10,-5,-14,35,-38,7,-41,-4,4,14,7,-34,-22,-32,-43,14,9,-45,-68,127,-5,-5,16,26,-54,-67,75,-71, 
  /* [5][0][][] */ -10,49,-29,-87,7,1,-54,-32,-47,-11,4,4,-7,-21,90,1,-35,38,-59,12,120,45,-36,-55,-61,31,-71,127,6,-18,80,-9,5,19,-18,-48,16,21,87,-28,-1,-33,-75,4,-57,112,50,23,14,-90,20,-13,46,84,-36,-32,0,30,-69,-1,-63,-32,0,-38,-77,-79,-38,-15,-86,47,54,16,-12,-21,1,31,-71,9,-122,-41,-36,11,49,25,30,-25,35,47,-32,78,90,67,-27,8,60,-30,32,37,30,92,-11,1, 
  /* [6][0][][] */ -5,-54,-46,19,-7,10,-8,-38,-46,-5,35,40,1,-12,-17,-34,-66,-48,-20,13,84,96,-65,-1,-42,-45,30,-17,-13,-36,-52,0,-40,1,-53,22,7,72,-21,68,-105,50,-46,-27,6,-10,21,-28,38,27,44,15,53,99,-30,45,0,29,-23,15,-73,40,-38,23,-45,12,32,-17,27,42,-15,-63,14,2,70,-54,49,-56,67,62,-44,-42,-8,27,-69,-64,-3,1,20,58,50,79,-34,12,2,-54,22,-1,-62,-80,-42,-127, 
  /* [7][0][][] */ 3,127,41,26,84,-12,36,20,13,82,-17,-101,-64,-76,63,59,-40,-61,34,-71,-74,19,21,45,-20,-82,-12,6,54,28,-83,-28,-79,-62,-28,42,42,-16,108,5,-64,26,-5,88,-89,-93,-59,37,29,-86,-49,-54,-35,-11,42,-47,7,46,-9,-5,0,16,25,41,-28,36,-40,-19,-38,-38,-29,58,39,36,19,58,81,72,44,-32,100,-7,107,61,-8,39,21,32,-102,-65,-13,40,32,68,-12,67,19,19,-33,-82,-21,1, 
  /* [8][0][][] */ 82,69,7,-32,36,-27,-8,-44,-29,-4,48,29,77,-12,120,-79,16,-15,-56,-1,-50,-19,-6,69,-52,66,-71,-87,81,119,-34,26,2,83,-64,2,-13,14,-127,29,-99,-88,18,-13,-51,3,-55,-12,-41,24,-13,-46,-16,77,4,30,-29,39,2,-27,-55,5,1,-65,88,-47,86,36,3,-9,-15,2,-40,-20,9,-26,-43,7,-74,12,-52,10,-64,-22,61,-25,-12,39,9,24,37,20,0,-23,-20,-45,63,-45,8,-31,-78,-57, 
  /* [9][0][][] */ 77,-126,-22,34,32,29,-13,-15,106,73,-39,44,-20,57,106,-67,-64,31,104,-31,79,25,0,-58,69,-30,45,-93,-44,-10,-2,-5,2,0,-25,12,-5,50,37,-6,48,38,2,7,-65,-37,57,-19,53,-90,56,30,13,14,-19,1,-127,28,-57,48,14,40,-5,-7,12,27,-43,64,-65,113,34,48,0,49,-56,-63,-45,-13,5,59,32,-6,50,-104,-41,-73,-19,-27,-40,-36,15,6,3,14,-34,29,40,44,5,-59,118,24, 
  /* [10][0][][] */ -44,23,-62,63,1,-23,-10,6,15,26,7,-66,49,32,40,-23,-7,-32,-56,-16,-8,-4,-34,-37,56,48,28,23,-59,-9,-10,-8,-39,-32,17,27,5,31,-8,-3,-5,-83,-63,-15,-5,-16,-15,-10,36,6,27,33,-51,7,59,-12,5,127,16,-9,-31,7,1,55,16,-14,28,-21,-14,27,-29,-4,-19,-31,5,-41,6,21,68,0,-8,-5,21,21,-6,42,-50,98,-110,-16,-1,-2,-13,-77,-27,-59,-59,-63,3,26,44,-40, 
  /* [11][0][][] */ 33,-3,-3,51,25,3,-57,25,25,16,-15,-13,50,127,34,-32,37,-43,34,-19,-9,-64,14,-6,-38,38,31,-60,8,51,-40,21,-71,64,45,6,-25,7,-61,7,33,-34,-7,32,26,-13,15,15,18,14,-104,-8,-56,-3,-50,-5,-40,-17,11,-6,-18,-11,0,-8,72,37,-71,46,16,-72,10,12,37,8,-4,88,10,-4,12,-24,-2,0,50,48,-3,77,13,-31,-29,11,-26,0,-50,7,41,-28,-2,14,-18,25,-12,12, 
  /* [12][0][][] */ -75,56,36,37,36,-18,81,-10,-6,-5,-20,-15,-25,-50,37,3,26,1,-17,-22,26,51,-3,106,68,61,9,14,-27,37,2,-10,-29,12,-66,16,-32,22,-10,-27,-65,8,-72,14,3,-19,-57,57,-35,-43,-94,-85,19,42,-25,-49,37,-13,-23,-8,11,-10,64,-26,-9,53,56,-10,23,8,3,8,48,65,4,31,39,-35,38,-14,-16,16,17,-19,10,7,-41,5,-14,54,-19,-49,48,10,-36,53,-90,19,-9,77,39,-127, 
  /* [13][0][][] */ 127,-23,46,37,-15,61,-23,-8,6,-43,28,-5,-40,-53,6,35,-13,-4,-63,-28,39,-6,6,-2,-47,-13,41,72,-32,-22,-27,-19,61,-1,-17,-85,-37,-33,-57,-48,-12,4,-87,-20,-5,20,-29,-16,62,-31,28,48,6,34,73,74,9,27,-37,-64,-78,-23,-17,59,-96,2,-102,3,-33,-56,40,33,-20,-22,19,-71,27,31,-97,3,-4,-4,28,37,33,-19,38,48,41,35,-40,-52,-87,-24,69,10,-64,34,51,-10,8,-19, 
  /* [14][0][][] */ -4,-63,-79,76,16,-37,-16,-4,48,-58,49,44,-67,64,-21,31,-100,-88,-127,-7,-18,76,-58,-36,-108,-12,-60,17,-89,69,55,-79,71,23,-43,62,-26,-33,70,58,-13,-6,2,-52,-94,44,-29,-10,27,14,105,0,-28,53,15,8,0,12,-80,35,48,101,-1,45,-20,-5,14,-2,-9,33,-23,-11,-21,-26,20,-117,92,62,38,60,-61,-45,9,-25,22,-20,1,26,23,-3,-3,-49,43,-36,-25,-8,-33,-49,-7,-38,62,64, 
  /* [15][0][][] */ -19,29,-22,12,-60,-29,-23,-70,-2,34,-7,19,114,-39,91,27,14,-58,5,-38,-36,-27,11,34,0,3,-15,3,-24,-7,-33,7,-1,43,-5,-13,-38,-26,-18,-28,11,-26,-127,-17,31,11,5,-14,-8,-43,-101,-18,44,-57,29,44,-37,-44,-45,-41,88,-42,3,-54,-28,57,30,33,-26,25,51,2,-1,-17,26,1,38,44,22,34,54,3,-27,83,-7,-58,-67,4,-41,-90,-18,-25,33,-43,-10,-40,-8,-8,36,25,27,-6, 
  /* [16][0][][] */ 21,50,68,48,40,1,61,-34,-49,24,-55,-4,31,8,0,-3,5,-21,32,84,41,0,20,83,4,46,2,-111,36,23,27,-32,-99,-51,-1,-57,31,-38,-89,84,66,-63,-29,-20,-52,-71,-70,-15,76,86,39,12,-52,81,31,72,-10,-22,-32,27,27,-66,-49,-127,-76,-14,-21,54,-28,-22,44,85,-36,34,11,24,-21,11,69,8,-2,18,51,-26,59,50,31,35,91,34,12,-57,-21,-22,-33,45,-2,-58,-49,7,-41,44, 
  /* [17][0][][] */ 45,0,-13,-35,-4,-21,47,0,16,-100,-2,-6,-19,-47,-16,-34,-8,-62,-16,16,-24,31,39,-12,-5,-16,1,42,25,17,27,69,6,-18,28,-14,20,9,-3,-3,-25,-1,-55,-5,65,-66,1,-1,36,-3,4,4,40,-35,14,-46,57,-39,16,-18,-4,-33,-19,56,-37,2,6,19,22,-46,-23,-20,0,-21,-26,6,-3,68,17,7,-41,-127,-34,7,-70,29,-1,24,26,41,14,-25,-39,1,11,-45,40,-79,39,-22,-18,-11, 
  /* [18][0][][] */ 38,3,-17,2,77,21,18,-2,40,-46,-4,-24,-15,42,-53,44,-59,-7,-50,25,-35,67,-12,35,41,17,12,68,-127,-28,-39,-49,-35,-34,34,48,22,6,-7,-44,-70,-39,45,46,41,42,48,-42,-37,-107,-13,-45,3,-45,-90,32,31,-22,6,-23,-123,35,6,-62,32,-5,-14,25,-6,13,20,8,1,45,-24,-16,-49,47,2,22,53,103,3,64,-98,-20,-63,-34,54,60,-14,-39,16,35,-1,9,65,106,-56,-4,-4,-42, 
  /* [19][0][][] */ 27,22,-60,-17,30,-47,-32,-94,-59,40,30,-33,-103,3,-37,-7,72,-4,-8,-25,48,-57,-1,-11,20,-22,-25,6,60,62,-49,62,85,57,63,-18,45,9,-7,-17,-80,-2,-87,53,-127,65,-23,57,42,37,-34,-15,6,-107,-38,47,-63,-118,-32,55,-34,-7,41,23,43,-32,-94,49,-23,-108,-50,-73,13,19,-29,-7,120,-93,28,-39,34,41,-58,-18,36,-32,-29,117,12,44,-48,15,25,-96,6,25,-61,-5,8,-9,-24,-46, 
  /* [20][0][][] */ -34,-48,20,87,100,-1,-72,-2,8,-16,-35,42,14,-30,-39,-119,57,-6,69,-68,-113,110,77,-50,40,68,-3,-46,78,5,-24,0,-67,3,-36,-79,7,15,-80,-62,-59,-37,-28,-11,36,97,25,-20,33,101,-53,-63,105,48,-92,22,-76,-87,38,18,64,36,11,-61,-46,25,-127,28,-26,-38,68,63,-33,74,87,82,60,-29,-53,-47,-58,9,1,-12,-18,7,-121,-16,-9,15,3,-28,-25,39,-16,21,-53,-17,31,64,94,4, 
  /* [21][0][][] */ 20,-13,-42,65,-46,48,-80,26,-15,14,13,-1,-39,121,-50,27,-37,-36,-13,-38,8,0,44,-11,5,-6,39,6,-34,-42,-23,10,26,-127,19,-20,9,2,8,90,21,32,85,37,-3,2,70,19,29,-26,-14,-14,-39,46,3,-17,-79,-44,33,-47,-9,-11,10,-6,10,-30,-80,0,26,49,-15,-21,-81,-1,-25,-47,-36,8,-76,-14,-28,-7,29,-37,-24,-8,14,-62,25,-10,-3,2,-56,120,37,-19,0,25,81,10,-44,27, 
  /* [22][0][][] */ -8,-22,31,20,-31,-12,-19,-30,-76,27,-64,72,-2,54,-88,16,40,14,-66,-29,-64,-8,19,-1,-120,47,-38,-21,43,-31,-41,-30,1,14,-46,42,-51,-15,-31,-47,-46,107,-13,-28,33,-24,-8,79,9,16,44,-26,7,-10,-21,-18,26,-54,2,-18,-89,-6,41,-48,27,82,7,1,7,14,13,-1,-58,13,88,39,13,62,-30,-39,26,26,21,127,-42,-10,2,47,35,1,11,48,-9,-11,56,6,-5,-20,48,67,11,8, 
  /* [23][0][][] */ 17,-11,27,29,17,-34,-21,21,-8,14,13,42,-6,-19,36,-46,19,-25,15,-35,-15,-1,-25,58,-48,10,-42,36,12,-13,24,8,16,31,4,-30,-23,-12,-51,3,-4,-14,31,-23,-34,45,19,-13,14,-18,42,21,-10,14,-30,-12,-17,48,17,9,-23,9,-2,-127,-2,47,8,1,-15,28,-39,-6,-9,-12,-34,-25,2,-29,18,10,-31,-9,-48,47,22,-25,-17,-37,-48,-7,-19,23,5,0,13,14,-1,24,-14,-29,13,10, 
  /* [24][0][][] */ -35,12,30,15,5,-69,-6,31,40,39,-54,-6,46,48,-13,-6,22,73,15,-50,15,-42,74,-120,-19,-3,7,28,-8,-10,-29,-10,11,85,36,25,0,-28,31,-2,19,6,-28,48,47,2,76,18,23,-5,8,-2,-7,-37,-46,-60,-41,-105,-67,-42,-25,-27,38,112,127,49,-2,14,-47,6,16,39,61,4,-76,-25,-13,-26,-80,-33,31,37,27,9,-24,89,-72,36,9,9,6,28,28,24,-47,11,-87,18,23,-59,43,-19, 
  /* [25][0][][] */ 67,-16,1,-5,-7,6,-36,-4,-45,90,-24,53,-88,-24,74,-16,59,-15,13,-42,-127,94,-60,-65,19,46,22,-52,-33,-31,-28,46,-17,41,-88,-39,-31,1,51,-9,-99,41,35,-33,61,-18,-23,113,67,-5,38,-56,1,20,83,3,29,5,11,5,-104,-48,119,44,89,-29,62,45,-22,44,63,46,90,-15,8,112,-54,-80,-51,56,53,-85,18,-108,67,32,-67,-19,-112,-60,29,-44,-23,-35,-75,16,9,1,-22,-43,-98,16, 
  /* [26][0][][] */ -48,17,0,-28,-63,45,7,39,-127,-18,-15,39,-22,-13,38,31,-19,27,-40,-22,53,72,19,-115,-20,1,47,34,-4,-47,-10,29,10,18,-70,-12,57,54,-7,-39,-3,49,58,0,-35,3,36,-17,-12,-27,-50,-40,0,3,6,-39,22,-14,-31,5,-48,-72,-30,-48,36,23,-20,-30,33,-48,55,-19,51,-12,-3,-30,97,-57,-39,35,-19,-29,-10,17,18,72,3,14,-8,16,-3,-23,16,17,-33,14,5,13,0,29,67,22, 
  /* [27][0][][] */ -42,-21,-56,-8,-29,-3,16,-16,-75,-81,-12,-61,-30,-70,68,-127,17,3,-29,-30,47,-12,26,-11,-23,64,-5,-39,-11,-22,12,71,-45,15,11,-25,-15,28,-37,24,-11,12,21,-23,-11,36,85,-19,-5,-69,-11,30,13,12,-22,9,62,-57,-6,2,-3,30,-13,8,30,54,10,15,0,-19,70,-6,-49,76,26,24,25,36,-86,16,15,-54,35,9,-10,12,-11,9,29,-36,-46,-71,10,25,19,-35,-4,6,30,-27,29,-37, 
  /* [28][0][][] */ -3,27,-13,-35,51,-43,26,-11,-86,40,-8,8,2,24,18,14,-56,7,20,10,-86,-49,27,-127,55,2,-66,0,-6,9,31,-19,-48,28,-35,29,-21,35,25,52,-22,-57,-97,10,55,51,3,49,113,-10,-6,21,-49,-1,14,20,-22,-14,-18,-52,25,22,69,-95,9,-77,32,85,-29,14,-56,-39,-62,12,33,-56,-49,-9,-66,102,-75,1,44,-6,-35,74,-17,-42,-41,-34,-24,-40,3,3,69,-52,-17,35,-102,-40,-18,37, 
  /* [29][0][][] */ 67,-12,28,-49,-41,102,-4,58,26,-11,22,-20,70,-30,12,27,-7,-7,25,-55,-24,-31,-50,3,-83,-24,12,-8,10,127,-56,30,-74,-21,-1,-22,15,4,59,-46,39,-26,108,-102,-54,92,5,-36,-20,12,97,16,-101,25,-89,-11,-36,-42,21,-11,40,-15,-40,-41,1,26,89,-21,38,-6,-58,48,-17,23,11,19,-14,12,51,29,22,-39,13,7,-19,-23,-4,-22,52,10,-44,-10,38,54,-4,-28,-14,-6,-67,26,-23,-16, 
  /* [30][0][][] */ -91,41,-89,-37,-1,-50,34,28,8,-36,-19,-20,-45,4,36,14,-51,24,-17,-14,-4,-53,-82,-64,-21,-84,12,62,78,-56,-12,26,42,-43,-4,37,-20,5,-34,76,63,29,-127,-23,65,7,-14,2,-83,80,-50,13,22,4,-32,-1,-7,-9,15,34,-57,-22,-43,-24,23,-19,16,-60,59,83,122,3,48,-40,-79,10,-15,27,-81,-11,19,22,-18,16,20,-26,93,3,3,34,49,-10,-93,38,-11,2,-2,56,-85,-79,31,22, 
  /* [31][0][][] */ 15,20,58,21,45,53,-62,21,24,-27,37,56,57,-18,-20,32,5,-35,-33,-21,38,-29,62,31,-32,16,-12,-39,28,-18,18,-2,-62,8,-16,-42,-25,27,39,-49,-2,127,-19,-73,13,1,30,-24,-8,-46,28,19,-34,-26,25,-15,-15,-34,16,22,85,8,-6,-63,-21,70,39,-19,-5,20,10,-47,-3,-37,2,9,-23,-83,-26,-23,11,12,17,31,-1,33,-9,-14,51,-3,32,-27,10,8,5,-13,21,-24,-18,33,1,-29, 
  /* [32][0][][] */ -32,-21,0,0,-34,-29,5,46,37,14,-17,-3,-25,14,28,-9,-27,127,17,-30,45,20,16,4,-14,33,-82,-6,-26,61,7,18,-35,-36,8,-38,-36,32,-25,31,-22,-52,-3,21,-109,-53,4,-23,47,-24,-3,5,8,-32,-23,1,26,17,-5,-12,-48,-1,-39,-24,-35,-66,-37,-28,-5,-22,23,-23,-85,-1,21,-15,-6,-54,30,13,-62,-21,29,15,3,-12,26,-18,-17,-45,55,-14,16,-47,14,-46,-22,-18,58,-18,96,27, 
  /* [33][0][][] */ 8,-91,-16,11,-60,-28,41,-28,-86,-37,-15,35,-10,-3,-14,7,-50,-2,1,-27,-28,20,-55,-57,-63,35,1,-4,44,-56,-19,-68,-28,-37,0,73,-12,60,23,-5,11,-68,-25,-22,-12,13,3,81,-31,5,1,14,-53,67,-63,7,-36,23,-33,18,29,40,65,-72,45,37,24,55,-28,30,24,24,7,55,-4,-127,16,-102,16,-31,-17,-121,-4,-5,-30,-9,-4,-29,-15,29,19,-26,-25,44,-6,-24,43,-15,-17,32,57,-68, 
  /* [34][0][][] */ -20,-9,-55,-33,83,-23,-1,-2,3,13,20,-110,27,-61,-44,21,21,13,-6,-34,7,13,0,-15,-7,31,-37,48,-100,56,20,-51,-38,-75,-119,25,-30,-23,15,40,8,21,2,28,-1,-60,-127,-31,32,-2,-6,7,29,-12,-48,-58,103,-14,2,-2,35,49,-22,7,6,-37,-19,-35,-35,42,32,-34,26,18,-13,9,-52,1,42,17,44,-42,-22,71,8,59,-8,-18,-74,-12,-13,14,-13,53,42,-32,-25,-73,-50,-17,72,23, 
  /* [35][0][][] */ 43,-30,0,-24,36,31,-19,-40,100,-23,44,56,-12,-1,56,-20,57,-7,-47,-1,-20,-14,-22,69,-24,-63,-15,46,-48,-29,-44,83,-30,40,43,29,127,-49,18,-65,12,19,39,1,-10,-23,9,78,56,-8,41,32,-4,9,6,-81,4,61,-16,-3,-55,44,92,21,35,-38,-16,7,2,13,1,12,-52,58,37,-22,-76,7,-50,1,-75,57,-13,-23,-45,26,22,21,24,-4,17,1,-30,47,15,-13,26,13,16,12,-46,-108, 
  /* [36][0][][] */ 11,-67,28,1,-22,64,22,8,20,-37,-78,3,-22,20,-3,-97,62,127,-44,-50,-6,71,24,-63,-47,8,-51,35,10,-68,-14,-34,-77,32,11,-5,13,-54,-38,-86,-63,37,-38,-26,2,-32,-10,-29,8,-47,56,88,-33,-76,-43,-65,-30,23,22,19,43,15,9,-54,62,-81,21,34,-13,15,-36,-41,45,-4,42,2,50,30,-17,48,-76,1,17,43,-7,-25,-49,4,85,10,-52,3,26,-7,-51,-42,-45,58,1,-32,-20,19, 
  /* [37][0][][] */ -6,-2,-23,100,83,16,-41,52,4,-127,43,8,26,75,-12,-25,9,18,42,-5,32,48,-65,-60,123,-70,-53,7,31,-52,19,-35,-38,40,63,-16,10,-86,13,-17,-45,46,-17,75,21,-50,34,6,-53,-10,58,4,-31,44,-18,57,13,-29,-45,-47,30,21,49,-70,-61,24,35,-36,8,-55,-92,66,-113,-35,-2,10,-56,-27,15,-7,66,-8,65,0,44,-57,-75,108,30,110,-37,35,-26,6,-14,-118,-39,-23,25,-82,99,-12, 
  /* [38][0][][] */ -28,43,-57,-27,-84,76,-30,10,-12,-2,-9,46,-8,65,76,127,-8,-32,-29,-28,29,-65,-56,-39,-17,8,19,-37,65,-89,-94,-23,47,15,43,99,20,-6,-69,6,-6,-44,15,-4,2,17,-44,54,26,-22,-19,47,56,-37,16,29,-87,60,-10,-5,-21,14,30,-57,-11,-24,-75,35,-4,13,-36,-34,-94,-25,11,70,17,53,80,11,32,-1,60,-84,-85,-6,-18,-57,84,34,-29,-43,29,5,29,4,-98,74,17,-65,-1,72, 
  /* [39][0][][] */ 46,51,13,6,62,-31,23,-52,66,33,-31,-38,-15,-39,3,11,21,-24,-5,-44,-81,83,-97,-42,14,-8,-65,39,-59,50,-78,14,-101,-15,-90,30,55,-25,-20,-32,68,-6,20,63,-47,-36,-44,-10,-64,-119,40,34,107,5,63,5,31,35,38,13,-64,25,-16,25,70,27,7,12,16,47,-39,-66,11,79,52,34,55,-76,7,-54,26,-48,-102,16,75,11,28,-3,127,-120,-46,-8,-7,-9,23,-64,32,83,18,-2,60,21, 
  /* [40][0][][] */ 35,21,-93,-80,44,16,-53,-55,-71,25,59,-74,-16,-4,24,-38,12,28,63,-22,14,28,53,36,-19,15,-16,37,-79,24,4,-76,68,-44,14,0,-3,7,-16,4,3,7,-60,30,-2,-89,-7,-13,17,-107,69,-37,10,-18,-63,44,-31,5,-19,-38,-15,21,11,2,-63,49,-49,3,29,-3,-31,50,26,14,-30,-50,17,-34,-34,24,-18,19,89,0,-13,-89,-17,-11,127,-22,-56,-10,-76,49,30,26,-25,-71,25,87,33,19, 
  /* [41][0][][] */ -17,38,-41,95,-77,-48,50,37,61,0,20,-55,-95,-14,-25,-16,57,-47,-4,-57,45,40,102,25,-34,25,-96,31,-51,41,22,-40,-7,102,-95,7,39,61,74,45,-73,-73,-56,-62,62,-74,51,-2,-38,-107,2,41,0,-108,-86,-6,109,0,123,50,-24,37,55,-72,86,26,-105,96,73,23,12,43,-10,75,23,48,-79,-24,-22,17,-99,-63,30,-84,-42,-127,-14,123,-20,79,37,-7,25,119,-92,13,45,-76,5,-5,34,-27, 
  /* [42][0][][] */ 13,-1,-38,-11,-17,-3,-28,-66,2,-68,-13,-19,127,22,23,-16,0,25,-25,1,12,8,10,-7,11,-41,-60,-17,-19,-32,37,-1,30,64,18,-36,17,-9,-44,25,31,-10,36,41,44,69,12,-28,36,-89,12,-14,73,36,21,-39,74,31,-19,-53,-16,9,28,3,41,20,19,-34,-35,51,-25,4,15,-18,1,-15,84,35,-49,-22,24,-13,15,-26,-48,-75,-13,4,-21,8,0,-39,0,-19,-14,10,43,-33,2,-32,3,5, 
  /* [43][0][][] */ -24,5,-2,-100,-12,-24,8,58,48,51,-49,26,105,31,0,-67,83,15,55,-45,10,-74,-29,-1,14,38,71,16,54,-57,30,-95,-48,-34,-52,-5,-43,-32,37,22,37,81,37,-19,-73,50,127,-4,-59,44,56,-32,-20,-21,79,106,-7,-100,36,8,-101,16,5,11,-23,1,-26,3,-15,-17,13,-61,-47,23,36,-29,-32,51,4,-8,-73,-58,-57,-9,38,-7,9,89,-55,-10,-37,-51,-82,46,-27,-8,54,-111,15,-31,-41,62, 
  /* [44][0][][] */ 18,-65,-21,54,-29,87,9,-14,-43,20,2,-78,-86,5,-67,50,93,124,77,-63,94,82,-9,-17,56,35,-42,-12,-19,-38,31,-9,36,-6,-4,55,-36,113,-79,-109,-38,65,-21,-21,40,19,4,50,-127,20,28,40,38,-17,-57,-35,55,-45,72,41,-61,13,46,73,68,29,-30,-49,-74,18,66,-29,-30,30,4,-38,71,35,-77,-14,-36,50,-4,-57,67,-28,-11,33,95,32,-45,-56,-10,-59,-54,78,-49,3,-17,-59,52,-103, 
  /* [45][0][][] */ -25,9,18,82,3,10,-41,2,-104,79,3,-20,67,-73,-30,68,-27,-25,126,8,127,36,27,21,49,19,-21,-92,43,40,35,81,-5,-1,-25,-41,-47,21,2,0,45,-44,-77,52,35,-66,-39,-56,-1,-9,10,-14,16,45,70,-35,34,-27,90,53,12,-50,5,85,-59,46,81,62,26,8,-37,20,-1,-43,16,-40,-12,-73,-8,13,32,-20,108,-6,28,-13,11,-3,-29,11,-61,-49,85,92,-77,-18,-23,0,-39,-22,73,-51, 
  /* [46][0][][] */ 7,-56,19,-95,-42,-29,-17,-47,107,43,-4,35,7,52,12,-25,-28,41,28,-25,-17,-22,41,-4,31,-6,-11,-36,-38,-55,60,53,-62,-71,48,46,34,-96,-41,71,101,-19,18,-47,0,52,21,22,-4,-108,10,-23,78,-3,-22,87,-41,-37,-55,49,-13,104,-19,-14,-58,28,-81,-47,-53,-6,-23,-11,-5,-45,13,-20,-1,4,41,4,51,-80,-58,36,48,-102,127,-95,15,36,-15,-3,-11,-8,93,1,16,20,28,-117,-7,-18, 
  /* [47][0][][] */ -34,-15,1,-71,24,-31,-52,19,-9,85,46,-11,-23,55,-3,20,19,-38,-58,-33,127,-8,-55,11,-11,-59,24,8,8,-23,-25,16,-22,-27,50,-26,-20,-73,39,-56,20,0,-42,16,4,4,-50,5,-1,-15,6,-41,-29,22,-24,-114,-3,-4,20,7,-81,9,51,-26,11,-5,75,53,0,9,59,1,-52,-19,52,-8,-2,-125,1,-4,-44,35,2,-10,-30,-63,-8,-26,-67,-38,53,-31,-29,24,-25,72,-4,23,36,-2,111,-13, 
  /* [48][0][][] */ -5,-21,91,11,-19,-54,60,40,3,-25,37,41,13,11,-61,20,-60,-80,-64,-84,-32,-14,-47,4,45,46,-27,-32,59,-24,124,29,47,44,-13,-52,-35,-80,-28,-33,-18,-15,-3,28,-48,118,63,42,-54,67,-9,-8,4,-46,-31,14,-44,4,-31,20,5,8,-34,26,7,21,-28,-23,-41,-1,-20,2,-18,58,2,-52,15,65,-72,-5,-50,15,-4,24,48,11,34,-14,54,127,-61,2,17,-6,65,35,-56,-32,-45,-22,-28,-55, 
  /* [49][0][][] */ -39,-50,12,-9,-39,-16,-50,-1,3,-28,-1,-54,-60,26,-28,17,-12,-13,-53,-64,52,-41,49,-25,-23,-7,8,47,-20,12,-59,-30,36,30,-82,-8,32,39,3,-127,8,-23,9,10,39,20,-26,11,-6,-49,42,-2,8,8,-7,-6,-16,12,-22,-4,-43,34,17,-78,-41,22,-34,-31,31,4,-38,-39,-29,-1,-1,58,21,-8,12,21,-14,47,-24,-10,-4,-15,37,-23,-2,40,-37,-50,-72,-51,20,-36,-19,-46,14,-38,-23,-14, 
  /* [50][0][][] */ -16,-4,42,64,-10,-82,-3,3,-19,59,-39,36,4,32,-30,-33,126,-66,-72,2,91,-89,11,22,106,-52,-42,-14,49,-11,22,13,-9,-50,-31,-4,-10,-20,-30,-40,6,30,8,19,-95,52,36,-66,22,-37,127,-66,-4,33,-55,-1,0,3,-4,28,-11,40,-64,-21,27,-38,48,62,-84,-49,1,27,0,-24,7,-30,27,111,-15,12,-15,-37,-3,-34,13,-10,-4,-52,-21,29,-22,-11,-11,-43,12,4,-22,-40,30,40,-19,-74, 
  /* [51][0][][] */ 13,25,-44,16,9,-36,0,32,37,12,-3,-81,-30,-22,-4,-2,31,20,18,5,29,0,43,-8,14,48,16,48,17,-20,18,7,-31,0,-3,-37,13,-33,14,-33,-31,-7,19,1,-2,-23,-5,-8,-23,-3,-32,-48,-39,63,36,45,63,11,1,15,-32,1,10,45,20,36,-37,-6,46,14,25,12,17,16,25,26,-18,26,-2,-20,-50,8,-33,-18,-59,-4,-41,-35,1,9,-24,25,15,-7,-15,21,-25,-37,-127,-37,35,20, 
  /* [52][0][][] */ -33,-25,28,33,-42,-39,29,-51,-68,-58,-33,41,-23,-32,127,19,-20,-35,-1,-32,-23,-61,-7,-92,-10,-26,26,55,6,-4,51,12,5,-31,-38,8,38,-51,-26,33,-28,-22,19,-60,7,-23,-15,1,-9,-90,41,-19,17,12,-32,-3,-10,15,-41,-65,97,28,8,2,-81,-39,-73,29,-75,-90,114,26,-48,23,-23,-34,22,23,70,25,-24,107,26,90,6,59,-7,-53,52,10,52,9,-26,22,41,-38,0,21,-27,75,-62,-12, 
  /* [53][0][][] */ 55,-8,10,111,50,-5,66,53,55,22,61,29,42,4,-102,-2,26,116,19,20,14,44,30,-13,72,-26,-13,-3,31,39,-63,76,104,1,-77,-33,11,-34,-68,-50,-67,-8,-48,30,-3,53,64,-12,-26,53,-62,85,-40,37,-127,-15,83,18,2,-58,-41,9,22,16,4,37,61,54,69,34,-3,19,33,26,-16,14,-19,-41,12,-12,-53,51,-21,-7,-8,-25,-41,-5,-42,-83,-5,18,-15,68,-13,100,40,1,14,47,41,-79, 
  /* [54][0][][] */ -73,-127,-33,8,-25,54,26,-40,-36,-16,19,17,-32,1,8,31,7,13,16,49,46,-25,-26,-7,14,-56,19,-20,-27,-15,87,27,-66,-5,-13,-10,33,-50,8,-11,36,-19,-16,32,-7,-23,-17,18,-10,-48,29,-6,7,-12,-8,39,9,26,-2,-10,-6,17,5,21,-51,32,-13,28,-36,2,8,-16,-102,-19,17,-41,-33,10,41,-52,-2,-39,-18,29,-14,-41,47,49,3,37,-59,-14,-15,12,66,-10,52,25,19,-26,-54,9, 
  /* [55][0][][] */ 1,-12,59,6,78,-46,-45,-19,24,-29,-35,-42,-4,-40,-55,7,-31,-18,-7,-30,-53,79,-76,30,112,7,-3,46,-7,6,8,-11,2,16,49,-72,-3,16,85,8,-13,33,-26,16,45,1,-30,-51,-23,-46,-16,-46,6,-49,41,-53,33,-7,19,-12,-38,-6,32,1,-24,58,-71,-9,-45,60,25,-83,69,-32,50,19,-4,68,-14,30,-36,56,28,39,-27,7,-17,-7,55,-33,-7,-56,-34,-48,-61,-41,43,-16,127,-31,30,-36, 
  /* [56][0][][] */ 16,-17,-47,-33,74,-6,15,-6,3,-51,31,32,34,-25,68,-10,-14,-32,-49,-18,-23,57,-36,-6,-63,-7,15,-11,-30,-25,0,36,15,-33,52,-2,13,-24,3,43,-19,-23,24,47,-1,-51,-27,6,26,-87,-6,38,41,-3,15,-37,-6,-28,5,36,12,6,-28,11,11,-46,127,-36,-36,-43,17,13,-17,45,-31,-26,-16,-4,15,12,-36,5,-29,8,-28,17,78,31,-45,68,12,-18,-3,-4,13,-56,-45,50,-54,-29,24,-42, 
  /* [57][0][][] */ -43,13,34,38,14,-19,127,51,-85,-99,-14,49,-11,-8,35,-106,-33,-58,72,40,-55,-12,-61,59,-38,-8,-84,56,-46,7,-44,6,36,-7,-27,56,-32,-103,-2,44,96,-29,-72,13,-32,17,-50,20,74,-22,61,7,34,-24,-79,57,-7,-76,-24,-1,-13,10,0,-52,-23,1,-57,84,12,22,32,40,8,49,11,-51,52,-11,1,-43,-61,60,-29,15,-49,-56,-37,-46,-5,17,-19,-27,-10,51,7,-26,10,62,62,-36,-18,-98, 
  /* [58][0][][] */ -8,-17,-12,-35,-36,-10,36,-10,-56,-44,4,-40,-1,-12,-20,28,-9,-10,13,-13,-36,36,3,30,22,-6,-2,-29,2,-29,63,42,-30,-20,21,-5,-21,-69,12,41,-12,35,-4,-19,-11,-18,3,13,-36,-28,7,5,19,-7,-14,33,17,37,-42,4,-16,25,10,-26,48,11,15,8,-15,30,11,12,11,-37,-28,44,-5,-51,45,37,-127,67,68,11,37,25,8,-22,-12,21,-3,-13,-26,36,1,41,-3,-24,-37,-32,-16,-13, 
  /* [59][0][][] */ 74,33,54,-89,13,-58,-34,-16,3,-54,-23,83,0,43,14,-61,-4,20,14,54,47,-127,-30,-42,40,37,-39,-31,-36,24,-22,-3,58,-25,-18,-28,-67,-18,-53,-31,10,59,44,-95,63,41,-5,-44,-44,-108,51,-52,-11,52,-18,-5,17,-11,38,-51,-88,21,-18,4,68,2,23,-1,-34,31,59,-50,19,5,-41,-77,10,35,42,22,10,35,73,82,-14,-20,-17,5,-52,44,-33,23,16,57,11,-1,-56,-53,-78,72,-6,31, 
  /* [60][0][][] */ 15,-50,29,34,57,3,7,-14,59,-12,28,25,-35,-30,-23,-44,21,0,9,81,2,-32,-27,7,-103,71,-24,19,-9,61,20,-14,-24,42,-20,28,-105,-51,-19,-14,-71,37,-18,-16,-34,52,41,17,-37,-7,-77,34,51,63,81,1,121,23,-79,-5,-63,-33,1,-34,-44,-27,15,2,30,-10,33,102,-29,-48,55,-58,-4,-7,-65,-53,127,-2,-14,25,17,13,-52,-78,-51,9,47,-43,58,-1,-3,17,1,-46,-45,3,1,44, 
  /* [61][0][][] */ 1,-5,-16,-18,56,-44,-47,-13,8,50,-14,-9,35,23,-31,4,-3,-32,-62,-49,53,-26,84,-8,37,28,53,-63,-12,-21,3,-18,31,45,38,-5,-43,-3,31,37,-13,-39,-51,-127,-85,-63,-18,-38,64,-15,28,62,-19,19,8,39,-32,48,-11,-27,-29,24,-19,-60,47,1,-74,-53,-9,44,9,70,-13,37,41,21,23,34,-21,-27,-36,-23,-3,0,53,-41,29,-23,-41,-71,4,-1,-19,-12,-34,-16,42,-19,-8,-9,64,-47, 
  /* [62][0][][] */ -12,-5,-33,18,-3,-3,77,-11,0,-19,-25,12,-14,-30,31,-40,73,-85,-69,-73,-41,14,-8,23,-57,57,-67,29,-127,-32,-33,36,-16,22,-23,-82,-17,-53,-43,64,17,-43,-37,90,-7,-2,15,57,123,-21,-57,-35,-66,-30,31,15,-94,-11,94,49,-64,-17,79,-71,-116,-57,-59,-4,38,-29,54,18,25,22,-78,-59,-36,46,32,5,-14,-7,25,-34,-50,-26,-101,-91,12,-13,27,-33,76,9,49,-12,-44,42,102,17,61,-30, 
  /* [63][0][][] */ -9,-25,-106,-78,-39,-30,5,-30,-31,41,66,-36,-40,48,79,-39,-18,-98,20,16,-103,-36,40,21,-39,48,-68,61,127,29,-36,20,43,27,-16,74,102,20,-12,69,-34,-32,-33,-115,20,29,-88,76,-46,-93,31,-26,-56,-66,-24,-33,-52,-31,47,41,26,23,10,-15,59,-94,-30,3,-25,-1,82,-11,-2,85,-5,51,3,-6,-41,53,59,-117,100,71,-53,29,49,92,0,-47,6,-25,-28,68,-1,-24,-84,-55,-13,17,-60,-17, 
  /* [64][0][][] */ -67,-19,41,45,19,-13,-44,-19,-28,-20,19,-9,8,-40,-123,25,-41,17,41,17,-62,-37,3,-34,9,15,30,12,3,-13,-12,4,-11,56,33,19,25,79,-23,-23,-15,4,-17,-39,-10,39,-23,30,-8,-38,26,21,8,-68,-127,-51,40,22,-34,-19,-26,-4,24,51,-21,20,-37,-37,-29,25,9,0,48,-14,-38,-49,8,-51,22,-26,-45,45,-45,0,8,-5,6,-85,-2,54,30,18,16,33,-27,-24,16,15,14,35,-37,61, 
  /* [65][0][][] */ -46,93,40,-1,-29,46,31,-74,2,31,-12,-73,1,-19,-21,-8,-75,62,72,33,-15,0,-18,57,-55,-21,-7,3,-84,-34,-40,-34,8,57,59,9,46,25,-41,18,-42,-37,56,68,11,-34,-6,6,-48,-22,-62,45,-25,-10,-35,-66,25,-6,127,80,-72,-29,0,5,-13,48,24,55,-16,-8,-32,-4,-29,28,52,3,-14,43,-30,30,-45,42,-62,7,-43,36,21,43,58,24,-70,79,-71,12,-37,37,-31,8,40,-69,-40,23, 
  /* [66][0][][] */ 20,-106,45,64,-68,0,30,-14,68,9,-60,40,82,-78,45,-53,-17,7,-15,-56,19,31,-41,22,127,34,38,-22,5,-33,12,-28,50,-22,-9,115,-67,-97,-37,-34,27,57,36,34,50,12,-63,32,-78,-26,17,-13,-60,29,29,-42,26,16,-29,18,24,117,68,19,38,63,3,124,11,-47,-28,-18,7,-26,-8,-62,18,-41,-38,-21,9,-54,-71,-30,36,63,4,65,-67,8,-57,-13,13,-39,-43,14,-3,40,8,68,-7,-30, 
  /* [67][0][][] */ 57,89,-43,79,-16,-79,38,25,-25,53,4,37,-27,50,79,9,28,-5,40,7,5,58,38,-43,0,37,42,8,26,-104,127,-36,4,-24,-27,34,22,38,-55,-18,11,-42,-42,-30,54,21,-15,92,13,16,-29,-6,20,29,-2,-49,31,-11,18,-17,-13,-41,25,-44,32,-7,59,24,-54,10,-10,-7,-66,52,11,-28,26,35,-34,12,34,-2,0,-4,5,-89,6,-19,3,-56,-18,-64,-74,-16,36,2,-35,-23,-51,49,-73,-94, 
  /* [68][0][][] */ 9,22,-17,1,-35,-53,-56,-14,-59,19,46,-7,-74,-5,-19,-60,27,-12,14,-34,11,-35,-76,-24,15,-36,18,62,-127,-27,14,-28,-31,-48,30,26,49,-28,-19,-2,-7,16,-39,-19,49,-75,38,23,4,48,46,-24,21,-41,16,-9,66,32,-58,-32,-38,-30,-3,-40,-36,-6,29,6,-29,-15,-4,13,31,-7,27,18,49,58,10,26,29,-8,23,16,-34,19,33,11,-38,-38,16,-9,22,22,29,40,-17,23,-51,76,-2,36, 
  /* [69][0][][] */ -8,105,32,-73,10,-8,-9,56,-2,32,29,37,-36,38,5,0,61,90,38,-29,112,-3,68,83,60,25,104,-71,3,3,-11,61,-29,-6,-69,-48,4,-5,-83,-89,-103,88,-80,-10,-15,-41,14,34,88,108,25,59,13,-73,-127,-27,-102,-15,29,54,13,-16,48,8,62,-41,11,42,-28,35,-33,-2,10,6,-32,91,-44,26,-5,8,4,29,23,-25,-53,56,-24,-23,-7,39,82,-49,63,-36,-10,-80,72,-40,44,-85,53,-62, 
  /* [70][0][][] */ -53,-11,66,8,-58,127,-7,-49,-38,-25,-8,-40,-46,-61,27,-5,-12,-15,-56,36,3,-66,-21,24,-15,25,-79,20,-5,16,-7,-4,-54,-1,93,-12,1,13,-30,-16,-19,-16,50,-96,14,-31,10,19,16,-67,-29,-3,56,66,-30,-14,59,-72,0,-41,-79,-12,16,-26,-32,13,-60,29,7,-14,1,-19,19,59,33,38,81,9,-3,24,-8,-11,-22,44,23,-30,-25,11,-80,-21,-37,-13,-34,38,5,19,32,-33,8,-50,41,-38, 
  /* [71][0][][] */ -37,-25,8,86,11,8,-5,23,-34,52,12,29,-84,79,9,-1,-9,100,-45,-38,57,5,-87,58,-16,14,36,-43,71,-113,-47,-12,-50,46,-9,-35,9,48,1,14,56,-127,42,-4,40,15,41,-12,9,-20,14,3,35,-48,27,56,25,27,29,-51,-53,77,46,-32,-9,30,-20,18,39,0,-11,-33,56,-40,87,69,11,-26,-77,39,14,-1,37,37,-3,-32,-11,-34,-53,23,15,-29,38,-55,69,86,0,-100,14,-37,-47,-18, 
  /* [72][0][][] */ 15,92,-14,39,-5,32,-43,24,-44,-84,-19,8,-14,-51,-22,-43,12,8,-19,0,25,-35,-3,18,-19,-2,14,-14,38,-19,-69,47,2,43,-10,-29,2,2,8,-60,83,-47,-68,-14,19,-42,-102,118,-46,6,-36,-127,38,15,-60,-102,-11,41,-43,-39,-9,-42,116,10,62,60,-11,-28,-58,2,75,2,-13,10,-2,-8,-68,23,-9,-46,-13,62,28,-18,-25,-21,-31,4,-17,10,-8,-2,60,-49,0,-10,-12,22,8,7,78,11, 
  /* [73][0][][] */ 12,-91,-8,11,27,7,34,-19,90,-102,-45,-17,9,-4,-9,31,11,-50,85,-11,9,30,39,-100,43,-17,4,54,-36,-65,-85,94,-13,-13,44,23,-27,4,77,-20,-83,39,110,-15,-25,51,38,87,-24,12,-40,40,-36,27,65,-8,75,76,47,-20,-62,-9,127,-34,-81,96,10,41,46,-58,-49,-6,19,34,33,12,43,-46,49,69,-29,-33,-8,23,18,-73,-49,8,-59,24,-72,-27,4,-89,-28,41,-50,61,70,95,28,12, 
  /* [74][0][][] */ -98,17,42,76,-16,-18,35,45,25,103,-24,-16,-64,-14,-58,-15,-5,16,-54,-83,3,-90,2,-14,-30,67,-54,-57,4,82,-53,14,-16,57,-29,-43,-49,-71,-25,23,34,31,7,-10,-6,118,31,-78,83,-27,-1,45,-17,55,-47,-1,30,58,-37,-32,11,-44,-121,73,-16,127,-3,-4,111,39,-26,2,-9,28,6,47,45,-59,-2,-7,24,-18,34,17,33,27,-14,10,-65,-8,2,25,-2,18,-34,61,3,-10,4,19,-70,59, 
  /* [75][0][][] */ -37,29,-83,5,3,53,-9,-64,11,77,-39,21,-26,50,98,-127,18,0,-10,24,16,11,9,23,5,10,66,-6,56,101,12,25,-49,-108,-48,13,-81,55,-84,20,63,11,-41,17,1,-61,31,5,-72,-78,29,-27,-64,-48,35,-116,-12,-17,8,18,-77,9,8,-91,27,40,-73,-23,-10,-37,-2,65,25,11,14,-9,-22,-21,-46,-38,-54,72,5,30,11,-58,-47,33,-95,-24,-2,80,-1,16,-12,6,39,61,-33,-68,10,-80, 
  /* [76][0][][] */ -18,-11,24,13,-9,-42,-19,-23,41,-51,63,-49,-60,30,11,-22,-53,49,-15,127,31,44,55,60,81,26,-58,39,88,-79,-17,50,21,38,-51,-36,10,-15,-75,26,80,31,-4,-16,-83,21,-1,-49,28,-33,-8,18,12,-63,2,7,41,54,-39,42,-116,27,-41,-47,-40,-68,-109,40,23,-6,-38,106,101,-22,-27,-27,-10,-119,7,-7,-66,-9,-2,-70,-29,-51,35,-81,-22,-2,-31,12,-20,-9,-40,-72,30,-8,-34,-49,14,-33, 
  /* [77][0][][] */ -34,-53,40,-91,15,55,18,-30,-49,39,39,-10,-100,-34,53,-49,-6,-127,-117,83,-11,8,-66,-81,99,-18,76,-55,30,14,59,-50,2,-111,-16,35,-64,44,-15,4,103,38,66,25,39,0,-24,98,46,34,-61,-27,65,-11,-11,92,49,-43,77,6,89,-7,8,31,-17,-42,7,-78,52,-114,29,13,-77,-8,33,-28,12,-49,-70,-1,-31,-120,12,11,-64,-52,26,3,-3,-35,-53,-2,-42,42,76,-33,-27,59,-2,106,-53,23, 
  /* [78][0][][] */ -36,32,-16,-23,85,-30,-16,-59,-26,-42,7,21,-54,-44,0,-26,-44,-21,-2,-127,39,-56,31,-21,-75,31,70,47,27,-40,15,-60,14,32,8,-36,-14,8,-89,-87,-33,-10,-8,-1,7,106,-17,32,32,-14,10,-25,54,-77,-41,-17,-47,-15,42,21,12,-8,33,85,-43,20,-36,47,-20,-6,-17,49,3,-22,42,-68,30,33,-6,9,-15,-48,10,-38,-32,-40,-32,-13,28,-42,-16,76,-38,57,-16,24,-11,-40,-21,-35,0,-19, 
  /* [79][0][][] */ -76,45,12,-18,12,-44,1,-42,-65,3,67,4,22,-24,6,78,29,50,33,-64,37,37,-51,-21,-42,-34,-6,10,-1,-9,-12,-51,-47,53,-13,1,-30,-80,-67,-38,28,59,-9,8,-73,6,29,21,-105,8,53,15,-6,-30,10,-55,22,-8,-1,29,41,-16,-21,2,-15,26,-4,-66,-51,-1,-35,-19,15,-26,69,47,60,40,5,-32,-99,52,-17,14,-12,9,-57,-33,-14,-66,1,-27,55,59,15,-127,-50,-21,6,25,-106,1, 
  /* [80][0][][] */ -1,-31,28,-49,-38,0,-38,-62,29,33,-18,36,-17,26,-59,-21,2,30,-4,-36,127,-3,-73,-18,6,0,-23,-8,19,2,39,5,1,73,-4,14,-51,-42,-2,-48,-18,-30,59,-54,71,40,19,-9,5,0,-28,38,-3,4,-84,19,-39,43,-67,-52,-31,16,8,-7,10,83,73,13,18,33,-53,-19,13,4,-39,28,6,0,-1,-74,-7,-20,-9,2,9,-30,-56,28,79,15,69,37,-18,-27,-7,-11,-29,0,7,-40,12,-17, 
  /* [81][0][][] */ -18,31,55,33,-23,-93,-17,2,-90,60,-8,-41,0,47,-52,5,-36,-7,-56,24,-11,27,60,29,-1,127,-52,-26,-37,4,48,-64,7,67,-31,-10,-23,14,31,-94,39,59,-102,-18,13,-23,-3,-6,-38,12,6,-50,18,2,40,77,-32,39,-16,25,30,8,15,76,-51,4,-71,2,17,-6,-22,100,65,6,7,-20,55,-19,82,51,-16,5,53,47,61,61,-35,-16,4,-42,8,20,18,14,-12,57,62,47,44,-41,46,-15, 
  /* [82][0][][] */ -33,39,32,-22,-11,20,-24,33,-37,41,27,45,59,54,25,-33,53,9,4,21,32,18,19,11,-16,-72,44,12,-15,-4,-21,-23,20,-14,39,-44,-1,24,48,-127,92,-39,36,1,-17,-49,2,11,25,-46,9,1,-52,-56,-29,40,-1,-37,-15,26,-6,-14,31,-11,-1,15,-61,-12,21,45,-26,33,126,8,23,-23,-54,-6,14,-7,-29,-88,-51,17,13,-43,-2,25,44,33,19,-6,-26,50,8,-25,26,0,46,0,-4,17, 
  /* [83][0][][] */ -8,12,-75,21,-17,-1,3,-46,4,-53,-57,-36,6,42,23,33,-72,-37,-41,-14,-22,17,127,-14,29,-46,14,-58,-29,62,-26,29,23,21,-5,34,-33,1,3,-24,15,-8,11,12,16,-2,-18,27,-23,46,80,47,-10,87,18,-18,-55,-94,7,42,-62,-15,-19,25,17,-45,-19,-23,-7,9,-2,4,11,37,-23,-11,-9,6,-35,-2,34,20,11,-40,-15,36,78,-27,-68,-1,32,15,57,52,19,-13,30,69,14,-28,-15,21, 
  /* [84][0][][] */ -44,-1,65,8,19,-22,-57,37,-55,13,26,-9,-19,44,21,105,-17,43,65,-127,1,-35,49,28,-1,-52,-16,2,-36,26,-17,-51,-42,20,38,-40,0,-7,-30,-31,28,26,20,-44,-33,-11,-73,42,35,22,1,11,16,4,-55,13,21,64,-18,-23,38,2,52,-9,0,70,9,40,-32,24,4,-48,37,4,-24,-45,-32,26,-14,-8,28,-35,-3,57,49,-125,19,16,-18,-6,-30,-6,11,-38,43,63,22,-54,-45,8,-51,-77, 
  /* [85][0][][] */ -49,22,-25,17,38,-19,47,11,-75,20,3,-55,-45,-3,-71,-70,6,-54,-28,-9,66,-1,-19,60,127,47,-38,76,-60,4,46,8,-32,-114,31,-7,32,-77,-46,-53,30,-7,14,-9,-79,85,-65,2,-66,-126,19,12,-39,-63,-9,3,34,10,-78,41,-84,11,16,-79,35,-16,-63,32,5,2,31,-19,17,-31,49,-65,43,39,-28,87,-9,15,-31,-8,-37,26,0,1,-66,-1,43,-46,12,29,-14,-12,-24,-34,92,-84,-3,26, 
  /* [86][0][][] */ -17,3,20,-64,5,-14,-37,34,28,-117,-54,-81,-39,-30,62,30,15,-60,18,40,35,127,54,-47,45,84,9,9,-63,0,-38,10,-30,1,-79,-6,3,-29,-5,-66,102,-29,91,-34,-78,3,-38,37,-26,41,-86,31,-49,3,-54,-20,43,6,35,-49,33,43,72,34,26,-16,2,-26,-60,36,45,-66,44,2,-80,2,43,-32,-14,41,-113,36,80,-98,-54,-83,19,35,76,-126,-4,40,86,-26,11,-31,15,-31,23,23,46,-77, 
  /* [87][0][][] */ 28,18,34,-6,43,44,21,-52,19,-39,-11,-38,-27,-26,16,39,42,-57,-17,26,23,-6,-25,-127,14,58,-2,63,1,11,6,63,7,62,0,-8,17,94,50,-23,-1,34,3,22,-1,47,21,-41,-5,43,41,16,-6,-23,-32,27,-43,72,-58,-2,-7,-5,-20,-30,-27,7,0,27,37,59,-22,25,-13,13,-48,-88,-79,-21,24,29,-85,-18,10,-14,-13,4,-7,19,41,11,-31,42,-16,-15,-32,-94,6,-6,3,21,-5,1, 
  /* [88][0][][] */ -51,1,47,52,-32,-23,33,-15,-54,-53,-5,30,-15,-34,-19,-34,78,-100,33,1,12,-44,13,23,-2,82,-85,80,-22,-34,-58,-75,-94,-40,84,-39,-44,2,-44,85,-118,-3,-2,-33,-46,-55,-37,20,-1,-101,88,-72,-12,-33,-16,-24,-25,-36,26,20,-34,-8,-22,-15,42,-16,-41,27,-58,17,-18,44,14,7,23,19,-1,-30,-56,-7,34,9,-127,-20,15,-9,-37,-69,6,-22,-25,-4,-21,-30,43,27,-60,-21,-107,21,-58,72, 
  /* [89][0][][] */ 81,22,-62,31,-15,-46,65,-9,-23,16,-9,40,-34,51,41,-11,-9,-82,46,23,5,-51,15,2,8,-66,3,48,-47,-37,-83,61,-33,65,-7,46,-5,95,-6,-3,-13,17,-90,-79,23,55,15,-15,-31,-60,20,-76,16,-5,79,-40,74,21,44,-42,40,76,-2,-9,-47,-12,21,-77,-48,-4,127,-14,5,12,-4,-2,-30,-73,-30,27,-100,4,53,87,-10,42,-10,-28,-7,8,-22,-1,62,64,41,-27,-9,31,12,7,100,84, 
  /* [90][0][][] */ -38,20,-59,52,-51,20,-7,-16,-76,36,5,-37,11,-36,127,-15,27,-18,-15,-11,56,-6,50,-6,-20,14,-15,25,-31,11,25,-38,39,-107,22,33,28,48,36,-8,48,53,-64,55,-5,54,-49,-71,116,59,-25,-13,44,4,30,29,42,-10,-5,-30,-27,104,-37,-57,27,50,3,5,-35,15,11,5,55,5,-21,37,-21,-21,81,-61,-71,-27,-14,6,52,23,14,-28,39,-23,-19,53,40,81,92,-1,34,32,57,-24,38,-51, 
  /* [91][0][][] */ -13,-11,-14,35,-46,22,-23,-16,23,-23,-64,-16,-63,-5,1,-11,-5,-19,36,-45,-127,-18,-16,40,-3,27,-47,-20,14,-27,-33,-36,-22,48,34,2,8,26,-20,37,-6,-1,-58,-13,18,72,11,24,40,-6,17,17,-54,99,-74,-48,44,-10,13,-68,28,6,15,12,21,-3,-19,-10,-40,-26,-9,25,-80,97,-12,18,75,10,-76,-38,-21,0,26,-43,19,41,-40,-1,-78,6,24,-4,-1,-8,7,68,9,13,4,39,25,-65, 
  /* [92][0][][] */ -14,110,20,30,-48,-9,-40,20,-21,-48,51,-44,2,40,-14,-11,38,12,40,-38,-37,-34,29,5,68,-9,19,13,12,-15,-48,-7,-12,20,3,26,-8,-58,4,26,-28,9,-14,-18,-43,27,15,14,23,-9,11,-69,43,-25,-28,20,51,-7,40,16,-34,-19,-1,7,-87,11,19,-33,33,-15,18,-61,-15,-14,31,127,-33,-40,20,-16,-32,-29,30,22,-16,-43,55,-35,4,4,26,5,9,-32,9,21,-6,18,-12,17,23,-8, 
  /* [93][0][][] */ 39,-9,-25,-77,-60,0,-53,7,-38,24,-39,-62,-13,-32,50,-17,-16,-23,70,13,52,-25,56,-42,-41,-40,24,-12,0,-11,32,-10,-15,-38,0,-27,24,24,34,63,-55,26,-40,-61,12,83,-79,29,36,-10,-49,38,-55,39,24,-34,-95,57,-49,5,16,-4,-4,-111,-50,-58,-23,54,21,23,5,80,-64,17,9,25,32,127,9,5,14,-63,-2,8,-67,28,27,8,28,23,-20,-2,50,51,27,35,-60,-73,-12,-1,-9,20, 
  /* [94][0][][] */ 6,-3,21,-1,-76,-25,-91,16,-18,-86,24,-14,-10,4,76,-49,15,-55,-12,-46,49,-3,-98,-27,-5,-12,-48,12,-65,98,-29,-15,-22,34,-13,47,-7,0,-29,-97,-18,-102,-78,-5,-6,-32,-86,47,7,0,37,32,-15,-20,-3,9,-1,-32,27,-31,39,127,71,42,-16,29,28,-59,-56,63,-51,29,17,-10,-20,-42,-5,37,62,2,-4,27,-53,-2,-15,92,-20,-2,-44,58,-23,22,3,-29,49,17,65,-21,66,-67,4,37, 
  /* [95][0][][] */ -48,36,-52,-37,17,28,-21,20,0,-36,13,36,-3,-2,5,20,-3,-19,20,-41,22,41,27,19,15,-1,32,-18,-36,-16,22,20,7,-8,-43,-19,17,8,7,-11,6,2,19,-22,-29,-32,-12,-23,-27,-72,-43,35,-20,-21,-1,26,23,-30,-11,-50,-127,2,13,-2,-4,-25,10,-13,-47,47,33,15,-37,13,21,38,10,-8,-30,31,-2,-3,-40,14,19,35,-18,-38,0,-26,36,13,-27,-5,1,21,47,-35,-83,45,63,45, 
  /* [96][0][][] */ -70,21,59,-45,41,0,66,50,-53,-46,12,53,50,32,-25,46,109,2,6,27,-19,52,-55,94,-30,12,27,-18,-56,3,115,10,68,-53,-37,43,-5,77,-3,-2,125,-3,-16,-35,-7,1,-10,-20,8,16,-20,53,-8,57,-10,-40,47,66,2,42,-28,24,-60,96,-83,0,-67,-25,-38,-58,-19,17,-25,-108,-62,72,-25,5,-14,22,15,-5,-9,69,48,-1,-30,70,-24,-18,-11,-27,50,44,127,-17,12,11,50,5,4,-1, 
  /* [97][0][][] */ -48,27,-29,-57,-66,41,70,-42,25,-30,-38,-20,-77,-7,21,127,127,-28,-6,-72,-27,14,84,65,75,23,-70,-78,65,-10,32,35,-61,-53,-2,-23,62,-28,-20,69,10,-48,45,14,-41,-58,0,-20,-17,-18,24,59,61,46,47,-59,-75,-7,37,29,12,-75,-10,-85,-16,26,-6,21,33,8,25,28,7,7,6,1,-50,-31,15,3,28,-67,27,12,-15,50,-5,24,-110,-56,-48,26,-22,98,-43,-34,-18,-43,-13,10,29,-105, 
  /* [98][0][][] */ -34,21,-35,32,-31,60,15,-10,127,19,-34,-21,-25,23,38,6,12,-50,-7,-14,-22,35,6,-15,53,45,-5,22,-4,-48,-66,38,-5,-29,-4,21,-28,-38,-12,39,-17,-25,-10,-37,-5,-32,21,-49,-25,62,10,-30,16,-44,-20,-11,53,-26,-21,-50,-4,55,-24,-37,-38,49,-29,13,-10,25,18,10,16,-11,16,2,3,-31,43,4,20,-11,9,14,33,26,45,-32,-19,33,-58,-47,-25,25,-5,-33,0,14,69,11,-32,-43, 
  /* [99][0][][] */ -2,-19,38,-26,-34,-16,68,65,7,1,32,11,-39,31,43,-11,-25,2,-30,-39,14,29,49,6,2,27,-21,15,-48,-49,39,-21,24,11,39,0,71,1,18,-1,45,9,22,-60,12,34,22,-32,-18,44,-12,5,29,-9,-10,-7,15,27,12,47,-21,24,-41,2,-54,27,-90,4,-24,24,39,2,45,15,24,19,-50,-78,-6,8,29,-52,13,13,0,-2,-27,60,13,-53,-78,29,-6,15,-4,40,-15,3,-127,-42,-4,-34, 
  /* [100][0][][] */ -39,19,5,-58,-81,4,46,-14,-57,-35,2,71,12,17,-45,30,-73,3,45,-4,14,-108,-35,-58,22,89,-29,22,-47,68,-13,69,-35,-22,5,-86,51,-117,-57,18,60,-11,24,42,-1,25,-38,21,39,-5,127,33,-13,-50,65,21,-84,5,-77,40,-49,24,17,-71,28,-21,10,-11,62,13,-86,25,-72,-19,20,53,100,19,-54,83,-42,-105,-33,18,20,-49,-50,-71,58,36,-1,31,43,-98,74,-56,101,-57,-9,27,11,-37, 
  /* [101][0][][] */ -48,-52,5,-54,-72,2,-48,-4,16,-11,7,-27,-11,14,29,-27,10,49,-60,-31,-20,15,-35,-127,-29,27,24,37,-13,-36,14,48,20,31,13,-30,21,92,-21,49,31,-7,51,-17,-7,-2,-11,-3,-32,-7,16,23,30,20,-1,14,-26,-27,-45,40,-7,-39,-27,28,-32,-25,-11,28,-15,-31,-8,-22,-10,-58,-7,-74,8,8,-30,5,70,20,-28,-11,-32,-11,61,1,-1,42,-6,44,-5,20,20,67,12,-16,10,13,-11,-82, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 102,1,1,102 } };
const TfArray<102, float> quant8_scale = { 102, { 0.011943792924284935, 0.0092203468084335327, 0.010735479183495045, 0.0097128134220838547, 0.014052099548280239, 0.010394087061285973, 0.012174049392342567, 0.0084982346743345261, 0.0084697036072611809, 0.0091926967725157738, 0.011752735823392868, 0.014130044728517532, 0.010943190194666386, 0.01224132813513279, 0.0099762100726366043, 0.011042935773730278, 0.0093777719885110855, 0.013737678527832031, 0.010848087258636951, 0.0085321525111794472, 0.0093097677454352379, 0.011928960680961609, 0.01153735164552927, 0.016024995595216751, 0.0098869744688272476, 0.0089172152802348137, 0.013121756725013256, 0.01267720852047205, 0.0099096810445189476, 0.0093447938561439514, 0.011056921444833279, 0.013847795315086842, 0.014175920747220516, 0.012123686261475086, 0.014332270249724388, 0.009846273809671402, 0.011967168189585209, 0.0089757209643721581, 0.009938322938978672, 0.010349408723413944, 0.011105605401098728, 0.0091758258640766144, 0.012514453381299973, 0.011682251468300819, 0.0079585285857319832, 0.0095364740118384361, 0.0095944320783019066, 0.012879369780421257, 0.012308797799050808, 0.015441234223544598, 0.011564123444259167, 0.014846674166619778, 0.010967954061925411, 0.0082889264449477196, 0.016400702297687531, 0.012049280107021332, 0.017591753974556923, 0.009861065074801445, 0.015393529087305069, 0.011097651906311512, 0.010390454903244972, 0.01412844005972147, 0.0094425296410918236, 0.0096576856449246407, 0.012686045840382576, 0.010712596587836742, 0.010512443259358406, 0.012300333008170128, 0.011923934333026409, 0.0080722356215119362, 0.012678938917815685, 0.010333348996937275, 0.014935335144400597, 0.0085754347965121269, 0.011471020057797432, 0.0094271423295140266, 0.010978722013533115, 0.0090561080724000931, 0.013134168460965157, 0.012936171144247055, 0.013337505981326103, 0.0084354979917407036, 0.013022240251302719, 0.012881625443696976, 0.013941369019448757, 0.010042146779596806, 0.010563968680799007, 0.011473589576780796, 0.010158780962228775, 0.010504617355763912, 0.011953872628509998, 0.012256855145096779, 0.013258099555969238, 0.012506047263741493, 0.013555446639657021, 0.017272556200623512, 0.011504705063998699, 0.01231727097183466, 0.014045169577002525, 0.013001990504562855, 0.010090531781315804, 0.012298674322664738, } };
const TfArray<102, int> quant8_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[102] = { 24723, 24659, 36167, -6808, -830, 29999, 30188, 32586, -7470, 15355, -1284, 22487, -603, -2494, -5529, -617, -498, -1698, 88, 19773, 27545, 24773, 29720, 33126, 459, -7952, 25260, 20862, 30514, 19343, -5051, -825, -10002, 42374, 20181, 168, -517, -267, -332, 36660, -623, -550, 26326, 21759, 23011, 22125, 23575, -375, 408, 28184, 33896, 20229, 6062, -1554, 25000, 27556, 29534, 29095, -322, -678, 23146, -890, -179, 36424, 29622, 29291, -7697, -211, 25430, 17840, -1533, -1533, -3978, -719, -2246, 23319, 53, 29183, 39290, 1968, 40028, 27957, -3782, -466, 24995, 107, 19828, -1431, -782, -151, 13415, -9511, -2518, -445, -929, -12451, -12829, 19012, 34124, 23018, 27199, -94, };
const TfArray<1, int> tensor_dimension9 = { 1, { 102 } };
const TfArray<102, float> quant9_scale = { 102, { 6.0978069086559117e-05, 9.2307796876411885e-05, 6.7320965172257274e-05, 0.00010444023791933432, 4.8246041842503473e-05, 5.7786248362390324e-05, 8.6353575170505792e-05, 7.0584173954557627e-05, 5.4313011787598953e-05, 9.6116338681895286e-05, 0.00014812238805461675, 8.9430170191917568e-05, 4.662162609747611e-05, 0.00010726032633101568, 7.8932192991487682e-05, 5.510075789061375e-05, 7.7235177741385996e-05, 7.1161433879751712e-05, 8.1846890680026263e-05, 9.8396085377316922e-05, 0.00010528841085033491, 0.00010260836279485375, 0.00011259873281233013, 6.6769658587872982e-05, 5.6705481256358325e-05, 0.00010328939970349893, 8.5078681877348572e-05, 9.931653767125681e-05, 8.6953419668134302e-05, 0.00012698076898232102, 5.3341380407800898e-05, 4.34143039456103e-05, 8.3247294242028147e-05, 5.5805521697038785e-05, 0.00012518175935838372, 0.00019587978022173047, 0.0001271437358809635, 5.1898925448767841e-05, 7.9921752330847085e-05, 5.838337165187113e-05, 4.8260571929858997e-05, 5.9880079788854346e-05, 0.00010194404603680596, 0.00011354804155416787, 0.00011782057117670774, 0.00013721217692364007, 6.8701323471032083e-05, 9.6036026661749929e-05, 5.4012303735362366e-05, 9.8084696219302714e-05, 7.7048469393048435e-05, 6.0418886278057471e-05, 0.00031929404940456152, 4.6543998905690387e-05, 0.00010833178384928033, 6.9080830144230276e-05, 8.2358623330947012e-05, 0.00012215100286994129, 6.4617182943038642e-05, 0.00010189891327172518, 0.00014452489267569035, 0.00014566066965926439, 0.00010261020361213014, 7.3169925599358976e-05, 9.6086863777600229e-05, 6.584834773093462e-05, 4.1282262827735394e-05, 7.890766573837027e-05, 5.0852908316301182e-05, 7.9512181400787085e-05, 0.00010787366045406088, 8.7399974290747195e-05, 4.4170719775138423e-05, 0.00013883027713745832, 8.7478161731269211e-05, 6.8362765887286514e-05, 7.3080955189652741e-05, 9.7087191534228623e-05, 5.7736211601877585e-05, 0.00012754123599734157, 6.1656151956412941e-05, 6.1785212892573327e-05, 6.6946668084710836e-05, 5.5929063819348812e-05, 9.522255277261138e-05, 4.7013818402774632e-05, 8.7936554336920381e-05, 7.6025018643122166e-05, 4.8365607653977349e-05, 5.1706669182749465e-05, 0.0001841447374317795, 7.9991063103079796e-05, 0.00013856992882210761, 9.1806316049769521e-05, 0.00013611681060865521, 0.00011726669617928565, 6.17922269157134e-05, 8.8374246843159199e-05, 4.9239162763115019e-05, 8.1411431892774999e-05, 0.00010823224147316068, 4.5901146222604439e-05, } };
const TfArray<102, int> quant9_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*102] = { 
  /* [0][0][][] */ -127,-49,-118,57,51,-45,-99,-121,40,-109,62,-60,40,-22,10,43,46,-61,64,-83,-117,-110,-66,-28,42,54,-52,-93,-43,7,16,-7,37,-70,-127,39,44,55,-123,-66,-34,15,-99,-60,-64,-31,-32,-127,-14,-127,-87,-127,-23,70,-31,-90,-50,-21,17,43,-73,-52,63,-22,-102,-115,82,-62,-125,-127,31,88,45,52,105,-71,8,-119,10,58,-66,-97,13,-102,-110,55,-99,29,56,38,-23,-84,5,71,73,81,122,-64,-111,-127,-127,72, -81,-57,-127,127,127,-52,-103,-104,127,-88,13,-31,73,87,74,42,127,81,127,-107,-127,-127,-127,-98,69,44,-95,-61,-127,-127,92,117,67,-125,-102,22,127,127,34,-102,83,-12,-125,-125,-127,-127,-34,41,47,-117,-127,-78,-127,127,-85,-50,-60,-117,81,58,-122,41,64,-62,-91,-97,127,95,-93,-70,37,83,117,21,124,-69,59,-127,-71,65,-83,-121,28,127,-84,101,-39,6,127,95,-13,14,38,109,28,80,48,-127,-127,-112,-80,66, -98,-49,-120,38,72,-50,-106,-127,19,-127,-26,-72,43,-35,8,49,-2,-69,36,-50,-123,-101,-53,-27,40,39,-38,-77,-77,4,-51,-49,51,-84,-110,40,50,47,-76,-82,9,0,-107,-48,-75,-34,-26,87,0,-109,-88,-114,-24,80,-40,-65,-52,-22,53,-127,-74,23,-127,-13,-99,-127,49,23,-127,-98,11,76,48,-127,100,-48,-127,-112,5,66,-82,-75,-94,36,-83,56,-127,11,58,35,-37,-88,7,62,-127,94,99,-38,-92,-106,-114,46, 
  /* [0][1][][] */ -97,-127,-80,94,92,-64,-127,-37,118,-56,-84,-56,70,83,71,66,76,68,86,-127,-86,-123,-34,-111,94,16,-92,-127,-58,-24,102,123,63,-127,-51,47,-25,101,64,-91,127,76,-101,-74,-73,-57,-84,-111,98,-120,-80,-92,-9,71,-73,-106,-72,-45,96,57,-68,-63,97,-87,-127,-64,123,100,-97,-76,69,44,44,42,-12,-98,82,-71,-84,38,-121,-123,36,107,-29,55,-68,32,79,48,-29,78,-12,-19,38,52,40,-44,-81,-101,-116,84, -60,-61,-123,57,104,-88,-61,-51,117,-30,127,-66,127,127,127,115,47,127,75,-56,-104,-108,-116,-75,127,127,-112,-69,-107,-103,127,111,82,-79,-106,-36,-54,126,112,-104,84,97,-127,-127,-115,-98,-127,75,122,-98,-107,-33,-60,119,-127,-96,-113,-127,73,59,-127,36,27,-77,-92,-22,92,109,-61,-27,127,77,127,60,76,-39,71,-68,-127,-90,-103,-115,69,89,-122,127,-41,127,115,127,-127,84,127,127,33,-2,127,-113,-104,-48,-47,127, -79,-98,-67,87,69,-66,-106,-41,82,-73,40,-64,81,84,48,39,127,79,100,-122,-87,-111,-53,-98,92,29,-83,-115,-57,-14,80,127,61,-120,-51,-127,-11,109,87,-121,98,86,-79,-66,-67,-48,-98,74,106,-109,-70,-89,-11,65,-61,-114,-63,-73,81,61,-78,54,-119,-89,-108,-71,123,67,-91,-73,70,54,66,48,-3,-124,109,-79,-86,52,-127,-127,55,90,-26,95,-84,12,78,56,-43,77,-9,22,-35,58,5,-80,-85,-88,-81,91, 
  /* [0][2][][] */ -40,-76,-52,36,-51,-115,-57,-123,-12,-68,98,-127,41,-69,-45,76,25,-3,-55,-104,-50,6,-22,-84,22,35,-70,-38,-20,7,40,102,78,-41,34,63,-20,30,-38,-88,26,28,-35,30,-50,0,-41,-108,20,-42,-22,-123,4,-71,-83,-127,-69,-27,-91,25,-38,-127,37,-80,-36,-127,23,-127,-71,-61,-121,-127,14,-75,-49,-127,48,-69,-114,4,-71,-112,72,31,-127,39,-72,61,-22,3,4,72,41,-64,36,127,33,-39,-32,-3,-76,69, -91,-97,-75,85,17,-127,-62,-111,82,-43,-3,-96,113,67,-37,127,70,83,102,-98,-9,-15,-54,-127,57,28,-127,-35,-35,-50,105,125,127,-46,0,-32,-111,89,127,-127,91,127,-93,-45,-44,-27,-64,52,127,1,-66,-60,39,99,-62,-103,-127,-111,127,70,-67,40,44,-127,-89,-94,102,115,-76,-62,-14,-31,115,-63,-111,-74,92,-36,-124,-127,-87,-127,127,97,-104,59,-27,66,63,32,-106,127,59,-87,41,3,63,-31,-125,-40,9,91, -31,-61,-36,39,-32,-111,-82,-105,-4,-68,-76,-91,25,-57,-41,81,-20,9,-69,-68,-53,10,-6,-52,30,12,-69,-35,17,-10,48,74,27,-47,23,-33,-45,16,6,-110,56,37,-40,19,-50,-8,-56,55,35,-58,-30,-98,-2,-7,-81,-111,-89,-16,-38,-5,-51,42,-86,-62,-32,-123,-3,30,-83,-47,-87,-126,29,-81,-127,-59,28,-32,-112,3,-80,-97,70,64,-93,25,-86,72,-33,22,16,69,23,-63,-79,75,41,-23,-38,-3,-72,81, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,102 } };
const TfArray<102, float> quant10_scale = { 102, { 0.00424573989585042, 0.0064271450974047184, 0.0046873791143298149, 0.0072718947194516659, 0.0033592430409044027, 0.0040235021151602268, 0.0060125687159597874, 0.0049145873636007309, 0.0037816697731614113, 0.0066923238337039948, 0.010313366539776325, 0.0062267836183309555, 0.0032461392693221569, 0.0074682501144707203, 0.005495837889611721, 0.003836518619209528, 0.005377679131925106, 0.0049547804519534111, 0.0056987805292010307, 0.0068510565906763077, 0.007330950815230608, 0.0071443459019064903, 0.007839948870241642, 0.0046489927917718887, 0.0039482512511312962, 0.007191765122115612, 0.005923801101744175, 0.0069151450879871845, 0.0060543343424797058, 0.0088413320481777191, 0.003714017802849412, 0.0030228218529373407, 0.0057962867431342602, 0.0038855893071740866, 0.0087160710245370865, 0.013638585805892944, 0.0088526783511042595, 0.0036135835107415915, 0.0055647380650043488, 0.004065078217536211, 0.0033602546900510788, 0.0041692899540066719, 0.0070980917662382126, 0.0079060466960072517, 0.0082035316154360771, 0.0095537174493074417, 0.0047834897413849831, 0.0066867317073047161, 0.0037607324775308371, 0.0068293754011392593, 0.0053646792657673359, 0.0042068054899573326, 0.022231591865420341, 0.003240734338760376, 0.0075428527779877186, 0.0048099136911332607, 0.0057344110682606697, 0.0085050482302904129, 0.0044991215690970421, 0.0070949490182101727, 0.010062881745398045, 0.010141963139176369, 0.0071444744244217873, 0.0050946264527738094, 0.0066902716644108295, 0.0045848446898162365, 0.0028743736911565065, 0.0054941298440098763, 0.0035407522227615118, 0.0055362205021083355, 0.0075109549798071384, 0.0060854265466332436, 0.0030754890758544207, 0.0096663814038038254, 0.0060908705927431583, 0.0047599165700376034, 0.0050884317606687546, 0.0067599215544760227, 0.0040200180374085903, 0.0088803553953766823, 0.0042929532937705517, 0.0043019391596317291, 0.0046613174490630627, 0.0038941912353038788, 0.0066300919279456139, 0.0032734465785324574, 0.0061227874830365181, 0.0052934191189706326, 0.0033675679005682468, 0.0036001971457153559, 0.012821505777537823, 0.0055695641785860062, 0.0096482541412115097, 0.0063922284170985222, 0.0094774495810270309, 0.0081649664789438248, 0.0043024276383221149, 0.0061532626859843731, 0.0034283914137631655, 0.0056684603914618492, 0.0075359218753874302, 0.0031959740445017815, } };
const TfArray<102, int> quant10_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[102] = { 50232, 22131, 34040, 33939, 8752, 10128, -2108, 10783, 4716, 4910, -30067, 25465, 10432, 51246, -18089, 4387, 11168, -17719, 28202, -27968, 13447, -10726, -1466, 18580, 193, -12934, 3207, -26472, 31292, 14458, -21603, -37455, 20716, 35881, -4214, 7547, -24355, 215, 14884, 19094, -325, -1294, 11135, 11452, -14342, 27939, 2163, -5181, 26199, -6959, 17365, -8151, 46443, -18026, 32727, 8646, 7051, 11418, -37375, -21888, 3204, -533, -8016, 7395, -11065, -8296, -2172, -15068, 13546, 11176, 29110, -26906, 10080, -2380, 736, -7614, -9477, -8250, 4705, 803, 21763, 29065, 8563, -13438, -20373, -19433, 17600, 49796, 5205, -24795, -33060, 33243, -27402, 15183, -14757, -26208, -26586, 3902, -14966, 5196, 7820, 15599, };
const TfArray<1, int> tensor_dimension11 = { 1, { 102 } };
const TfArray<102, float> quant11_scale = { 102, { 5.2130257245153189e-05, 4.5200333261163905e-05, 5.159230568096973e-05, 5.6312474043807015e-05, 6.8795037805102766e-05, 5.2676168706966564e-05, 5.7307035604026169e-05, 7.3470342613290995e-05, 7.4134382884949446e-05, 4.4634260120801628e-05, 7.9296893090941012e-05, 4.64287368231453e-05, 8.3733182691503316e-05, 6.1192477005533874e-05, 7.6103176979813725e-05, 6.865550676593557e-05, 8.3812970842700452e-05, 7.2549912147223949e-05, 5.805279579362832e-05, 4.1524850530549884e-05, 4.4895296014146879e-05, 4.3514904973562807e-05, 5.6058212067000568e-05, 5.889014937565662e-05, 5.8934725529979914e-05, 5.7435921917203814e-05, 7.0077338023111224e-05, 5.2553790737874806e-05, 4.6400360588449985e-05, 3.1439609301742166e-05, 6.5285108576063067e-05, 0.00010057538747787476, 7.4144198151770979e-05, 4.6968303649919108e-05, 4.5534554374171421e-05, 8.0613863246981055e-05, 5.6791846873238683e-05, 6.7984394263476133e-05, 7.5775766163133085e-05, 5.7334971643285826e-05, 6.2652237829752266e-05, 0.00011157331755384803, 4.8313453589798883e-05, 3.6949411878595129e-05, 3.599840056267567e-05, 3.7854180845897645e-05, 7.1777103585191071e-05, 6.4226172980852425e-05, 7.3203875217586756e-05, 4.338785947766155e-05, 4.882931534666568e-05, 6.0282658523647115e-05, 4.3441086745588109e-05, 0.0001068976052920334, 5.1333230658201501e-05, 5.0941544031957164e-05, 4.6859975554980338e-05, 4.4559201342053711e-05, 9.0334004198666662e-05, 9.7083473519887775e-05, 3.4360931749688461e-05, 7.1958937041927129e-05, 7.5981130066793412e-05, 3.7071520637255162e-05, 5.3216543165035546e-05, 0.00012075746053596959, 7.7801742008887231e-05, 0.0001065320975612849, 7.0837464591022581e-05, 6.8356806878000498e-05, 7.625402940902859e-05, 9.1114423412363976e-05, 8.5485655290540308e-05, 7.9467085015494376e-05, 5.2212129958206788e-05, 7.3849027103278786e-05, 8.2389393355697393e-05, 3.6852394259767607e-05, 6.5267842728644609e-05, 8.171103399945423e-05, 6.5126099798362702e-05, 4.1699189750943333e-05, 7.4643823609221727e-05, 8.8437060185242444e-05, 4.7164314310066402e-05, 9.2193622549530119e-05, 5.7950306654674932e-05, 6.7136090365238488e-05, 5.2267747378209606e-05, 9.6984964329749346e-05, 4.220420669298619e-05, 6.443650636356324e-05, 6.7827320890501142e-05, 0.00011183221795363352, 7.7457436418626457e-05, 7.5680538429878652e-05, 6.6120614064857364e-05, 5.6674238294363022e-05, 6.5421168983448297e-05, 7.9043828009162098e-05, 4.2636198486434296e-05, 6.3092091295402497e-05, } };
const TfArray<102, int> quant11_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[102*1*1*51] = { 
  /* [0][0][][] */ 83,-56,127,1,-8,-43,-44,2,-71,-26,24,-98,11,12,-28,28,43,-104,-14,-23,25,115,51,-102,20,63,-82,-31,38,-66,-55,-53,-17,-76,-47,-102,-50,61,-85,-33,68,-88,49,-2,76,-36,-70,-82,-43,-42,61, 
  /* [1][0][][] */ -37,-21,89,-31,-62,-10,11,20,72,22,-30,-16,-22,-45,-25,-89,-45,-29,27,33,15,35,55,-79,-27,49,-4,86,-108,15,-18,27,-99,-11,19,-25,-20,-8,-25,-1,127,-18,78,-13,-25,39,-62,-5,43,40,1, 
  /* [2][0][][] */ -48,2,-20,-62,45,-26,-12,-27,-41,-17,-70,-70,-3,35,6,-7,-35,-53,-40,-13,-7,127,4,-1,-72,27,-43,-101,-26,-24,-17,24,67,58,28,14,8,9,32,27,75,48,-79,20,6,49,-2,6,-84,31,-67, 
  /* [3][0][][] */ -51,76,4,-35,-127,-35,20,-66,-31,46,-16,63,-8,-22,-3,-79,-12,12,27,-16,-12,-20,-41,-18,-79,-49,-120,-4,32,-19,-7,31,55,73,27,-23,55,32,-59,16,-9,-33,-22,6,44,-4,-29,11,-31,9,16, 
  /* [4][0][][] */ -119,62,41,-50,-30,-44,-8,21,-48,-19,23,76,40,38,73,-44,9,11,83,127,13,67,-8,-91,-110,-80,-7,-69,34,-72,49,-105,-20,30,25,19,-20,-85,0,35,29,80,-77,-25,-14,5,-65,58,-28,-49,-108, 
  /* [5][0][][] */ 8,120,15,-32,83,103,50,-30,-95,115,41,-109,-53,-14,-73,-60,74,44,-67,120,44,-27,40,-15,-34,-50,62,-88,-95,-52,-6,25,9,-54,114,62,14,65,-3,-7,29,17,83,-31,-25,-105,-11,-60,17,-127,-122, 
  /* [6][0][][] */ -2,-3,12,-49,20,2,17,35,55,53,-15,2,-32,33,14,51,-23,37,-53,-40,1,24,-16,23,43,1,5,-15,-28,-54,127,66,-18,4,-44,22,7,-41,12,-47,-28,-37,-17,33,7,12,-40,6,54,67,-110, 
  /* [7][0][][] */ 2,-20,18,-55,18,13,1,127,14,-61,-44,-54,-94,-87,-9,-8,-32,40,-27,6,-65,50,-7,-8,-49,-40,9,55,5,-8,55,-1,9,7,25,15,70,-36,2,0,99,-10,-17,2,-13,-50,37,-31,-30,43,59, 
  /* [8][0][][] */ 25,12,34,55,-16,-5,-22,-23,19,32,-33,-19,-15,-3,5,39,-35,58,5,50,29,-13,10,-34,-24,7,-34,-18,-127,-18,-2,60,-73,23,18,-58,-39,-14,10,12,32,12,19,0,26,52,-23,-22,40,20,-3, 
  /* [9][0][][] */ 82,-48,13,-28,-9,-17,71,-116,43,68,-77,19,-48,100,-100,-29,33,-12,-69,95,-63,-27,-54,55,-62,-46,-94,-27,30,-7,29,9,-5,34,26,-69,-7,-2,68,-40,-70,91,-21,-15,37,88,127,-2,55,69,51, 
  /* [10][0][][] */ -57,127,60,-44,-13,-30,-8,34,61,45,-19,-68,46,38,34,27,10,58,-50,11,-10,-98,-10,-28,97,-21,43,-5,-22,60,-2,-47,27,56,-28,108,46,-98,-26,-13,3,-36,40,-17,17,-44,-10,117,73,32,-34, 
  /* [11][0][][] */ -20,-24,-88,-60,70,22,50,-6,80,127,-81,-53,-31,-64,-24,-35,20,77,-40,69,73,52,-53,-8,63,2,50,-36,17,-101,-27,23,-45,17,-85,-59,-32,53,40,-43,-106,-101,12,-80,-30,-87,-8,40,5,-4,4, 
  /* [12][0][][] */ 20,-36,32,15,35,-69,-96,-15,19,-78,28,54,71,78,-28,14,13,50,22,115,-85,60,34,32,13,-15,-53,-15,16,-7,71,-62,-49,-85,-40,-15,86,-1,-17,-27,-35,-127,-18,4,-16,-17,-13,-56,9,-66,33, 
  /* [13][0][][] */ -87,-77,-69,-94,88,-28,-41,-25,-22,33,-14,-40,-23,-125,-59,-45,-8,-86,54,-32,-35,1,-40,-38,-9,75,-127,-109,-1,-21,57,10,16,80,-14,-49,-46,12,-51,59,34,-66,25,-38,-9,65,-38,27,33,-2,-89, 
  /* [14][0][][] */ 48,-61,-35,-6,-3,0,-31,-70,-33,-5,30,18,-14,39,-5,-29,1,127,50,9,59,57,-95,-64,100,-32,-41,21,-2,-23,11,7,18,34,-56,30,-8,-9,16,47,-7,-23,64,-14,3,-23,38,77,28,11,3, 
  /* [15][0][][] */ 2,61,16,-127,41,11,-46,6,-70,-54,3,-2,0,-24,25,-60,-28,-21,54,86,10,71,-5,-11,-62,104,-22,-67,37,66,35,-1,-57,90,-55,-47,11,57,81,18,11,-28,54,-20,-48,-65,-71,15,32,-7,42, 
  /* [16][0][][] */ -6,64,-10,29,-26,14,-94,-21,34,-127,-30,1,-47,-63,35,-30,-8,33,5,117,-61,9,5,-51,-58,-7,29,6,-86,-6,-39,24,-31,2,15,3,-19,33,-31,-10,-81,63,114,-61,22,44,1,54,-64,21,-8, 
  /* [17][0][][] */ -8,-39,-4,127,68,-51,98,26,72,12,-90,8,33,3,-40,-36,9,-64,-14,72,-2,-44,24,-30,40,78,-39,-41,-47,-37,53,-80,73,-46,79,-9,-7,-8,23,-51,13,0,26,30,24,-69,-28,122,21,37,-43, 
  /* [18][0][][] */ -46,88,11,43,-17,60,-88,45,8,111,-127,-27,-27,0,26,28,54,-42,22,-92,-26,1,-15,-29,-52,-34,23,-23,-124,-13,-85,-45,-52,20,12,-52,-83,98,-45,6,53,-12,40,30,-21,7,9,-71,-73,-47,31, 
  /* [19][0][][] */ 37,-26,-42,26,21,-3,-40,5,-23,16,105,-5,-48,13,-6,56,34,4,42,42,-20,127,-21,-71,5,-7,-20,92,41,21,48,1,-23,84,39,42,5,-62,3,2,104,-30,-24,-19,71,41,15,-44,-23,-17,-20, 
  /* [20][0][][] */ 17,-16,41,127,-24,11,2,-21,-98,19,-23,-6,1,-92,30,31,-17,-26,-24,-16,12,4,81,32,34,3,-16,59,16,16,-19,-3,-10,17,-6,-40,-83,-63,15,30,91,17,-8,-16,-37,-45,8,48,32,22,-109, 
  /* [21][0][][] */ 12,-4,6,-65,-16,-61,85,23,-26,5,83,-5,-4,-35,-60,30,31,-96,-69,24,-100,33,33,-47,85,59,-5,99,40,31,16,-17,-74,97,-7,83,-125,30,105,-17,-23,19,14,4,-27,-49,-4,108,19,-9,-127, 
  /* [22][0][][] */ -22,-4,15,13,-30,1,33,14,-21,-29,-59,-35,26,-3,-11,31,-67,-19,47,1,-16,-3,-33,13,58,11,36,-11,9,-24,127,26,-28,-14,33,66,-46,66,20,-9,-12,67,1,20,-9,-10,29,-11,-34,15,-2, 
  /* [23][0][][] */ -3,10,-27,16,24,40,-5,-25,-33,-10,-10,-7,-8,-15,24,14,104,5,-22,9,-24,45,19,-52,-6,-41,-44,24,127,-13,1,-8,-26,3,-44,-19,-4,-57,-7,22,-82,38,6,-14,8,102,-30,-11,-46,6,24, 
  /* [24][0][][] */ -17,-59,56,-33,119,-105,27,-41,-25,-127,24,13,69,-34,15,102,20,-12,17,-47,90,51,-89,-19,19,7,18,61,113,5,-4,-78,82,13,-21,-1,-1,-1,-50,53,-25,-35,15,66,2,-84,-66,-95,-19,9,38, 
  /* [25][0][][] */ -58,50,47,12,-38,-36,-43,-46,-67,-13,31,-26,0,-24,50,39,40,127,92,-68,82,47,2,-14,-9,-53,63,0,-11,33,36,22,61,99,-33,-1,18,57,-81,89,-53,-126,27,4,3,-82,-65,86,-39,-15,113, 
  /* [26][0][][] */ 0,-4,-18,-55,52,26,9,-23,15,13,23,-50,41,-16,-50,-20,5,99,-10,8,-22,-90,-36,-34,-17,-77,16,42,35,-27,127,82,-48,29,-7,-4,43,65,-36,23,26,-13,-20,45,-6,-1,-14,0,0,-10,-5, 
  /* [27][0][][] */ -13,27,10,-43,-5,34,31,26,-4,-30,22,78,69,-19,0,-60,4,51,-19,42,-38,34,60,58,57,-41,-24,127,-16,16,44,-1,25,6,-19,-101,3,9,10,-48,45,54,9,41,51,11,33,6,-29,38,-31, 
  /* [28][0][][] */ -16,-11,7,0,39,46,34,-25,15,-7,127,-42,11,-77,-20,40,-5,-39,6,-13,3,-1,-73,43,34,12,0,-22,-117,-67,-73,18,22,-2,-117,-14,-39,37,-73,8,-58,24,-14,2,50,31,-66,83,-4,-13,-40, 
  /* [29][0][][] */ -12,22,3,23,17,-16,20,-59,96,59,36,20,-25,110,62,88,30,-52,42,-45,-60,-23,-101,74,7,-52,35,-56,-45,108,-28,-2,-31,27,-8,80,4,44,127,-52,-13,-1,25,-35,-85,109,-124,-90,-29,-25,-29, 
  /* [30][0][][] */ 25,-127,9,44,-12,1,97,-9,17,-58,-85,27,-13,50,46,-34,107,18,-21,41,39,-49,-10,37,76,18,-74,-22,-85,23,76,-41,-5,43,57,32,84,-52,111,89,-5,2,-20,-63,-43,48,66,114,-75,28,-47, 
  /* [31][0][][] */ 34,67,-8,24,46,29,52,4,4,46,-52,59,47,21,-57,60,9,-10,9,106,30,10,80,1,-50,40,-75,32,5,-8,-36,-7,-19,16,4,65,2,23,76,49,-42,127,25,-49,22,-38,-11,-50,-3,57,5, 
  /* [32][0][][] */ 6,16,-1,26,25,-26,2,1,74,77,-80,-127,-71,-71,-24,-39,-7,-51,10,46,-88,-121,44,29,11,5,44,-7,-4,53,-57,35,91,20,-19,-1,55,6,-20,-14,0,29,27,13,-1,25,4,-51,-100,32,-16, 
  /* [33][0][][] */ -11,-43,-30,60,9,2,-21,-30,1,26,-127,7,0,-40,3,-55,-6,16,-127,-54,0,19,-18,1,-23,89,66,50,6,-59,-28,65,40,-58,19,61,-26,46,-44,-101,-88,-2,-68,33,55,28,55,54,24,-49,-35, 
  /* [34][0][][] */ -18,21,51,0,21,-39,29,-19,11,31,-11,7,74,41,71,-41,-5,58,-21,61,-36,85,80,51,-51,42,-40,-55,-17,-27,-46,-29,101,15,44,-127,64,2,-77,69,-61,10,0,6,61,-39,15,-5,68,-42,54, 
  /* [35][0][][] */ 2,9,41,58,-34,-10,-9,38,66,52,-37,-49,-22,-52,40,-127,-11,-60,-3,-10,-30,4,-28,-51,-44,29,26,54,17,-21,-40,-36,-32,53,22,-9,4,-10,15,19,52,26,41,31,12,22,-15,-42,-20,-81,-20, 
  /* [36][0][][] */ 43,28,50,27,16,110,30,-56,48,57,-12,30,4,18,28,31,0,-68,-65,44,119,-37,-14,-30,127,27,-59,-32,-100,-21,-10,-28,-85,23,-29,52,74,15,83,-38,119,0,38,26,-40,-43,23,90,104,-48,-1, 
  /* [37][0][][] */ -22,0,40,-22,60,23,-28,-22,-44,-127,29,16,-14,-9,50,22,94,20,-35,5,-45,31,20,-109,-25,26,-22,0,51,-12,-56,109,-2,-17,24,21,-11,-77,-25,-62,-67,44,71,-9,27,98,-49,-17,-3,-9,38, 
  /* [38][0][][] */ -78,-53,-23,47,9,28,35,-93,-39,16,23,-27,43,-81,47,-98,57,-47,-60,127,41,22,11,12,93,19,-78,-71,-41,48,58,26,0,-39,53,-48,60,-98,44,46,4,3,23,7,-30,-8,6,-117,84,-54,-52, 
  /* [39][0][][] */ -9,11,16,46,1,31,-44,-25,21,-15,85,-50,8,38,-26,7,-53,70,34,-28,35,-42,4,9,87,25,-61,-111,5,36,-39,-24,-9,-79,127,-47,2,16,-16,-25,-72,42,4,-8,14,-14,-67,-27,-30,-57,38, 
  /* [40][0][][] */ 47,12,36,-74,-6,32,-15,103,-25,54,-7,-15,29,-2,-31,64,12,-68,11,-31,40,-3,-37,86,10,31,-101,27,-13,17,-57,36,-54,-83,49,-71,-7,127,25,-52,84,11,97,-13,-1,56,-39,-91,24,-16,17, 
  /* [41][0][][] */ -2,28,20,-26,3,-20,34,-44,-17,20,77,14,28,0,-28,-21,20,-21,127,-12,-18,-11,-2,20,-16,-5,26,15,-23,16,20,43,-64,-45,-30,27,22,-22,14,-6,5,-22,-51,15,-11,12,-14,-44,41,2,0, 
  /* [42][0][][] */ -18,50,12,-40,-4,-39,71,35,-37,-6,4,-36,42,-5,35,23,-32,63,-41,-46,-30,-38,-1,-9,26,26,-56,50,25,-17,-19,26,-1,-15,7,-62,-47,127,35,-17,-13,12,-5,-7,-8,35,-26,-22,2,21,-88, 
  /* [43][0][][] */ 41,-68,15,15,18,-44,-110,-69,122,-47,15,7,-84,3,85,9,-63,11,90,11,1,13,75,-14,-30,-32,-42,27,-7,2,26,40,20,84,3,14,-85,-1,22,24,-17,76,-55,39,0,-93,109,-127,15,-22,-62, 
  /* [44][0][][] */ 22,41,91,29,-54,34,27,11,-52,-19,13,4,-12,-50,62,91,42,127,39,-76,38,48,68,-18,-29,-42,-32,47,9,0,37,-5,-5,-8,-3,-9,-43,29,43,9,-50,-12,-12,30,74,4,83,56,-40,-38,-60, 
  /* [45][0][][] */ 27,17,-23,-56,-79,10,-1,-3,12,-25,25,30,6,-41,-24,-41,-17,73,-14,0,-21,-122,23,-53,41,-6,44,-20,-2,-23,3,7,7,54,-127,31,9,17,60,-41,3,59,-6,-60,92,-23,31,9,39,-75,-58, 
  /* [46][0][][] */ 12,-29,12,-29,36,-17,-35,2,16,23,21,59,8,-10,-44,-30,-22,7,127,-29,4,-9,62,12,45,25,37,-1,39,3,44,75,32,46,-10,9,20,-32,-83,-16,-68,-29,25,14,35,-53,27,-30,-57,20,-48, 
  /* [47][0][][] */ 7,-47,-31,-3,10,-18,-15,20,127,47,60,-11,-31,-40,-8,-33,-18,-82,7,84,1,63,-32,-15,-4,12,-5,20,26,1,62,13,-36,-7,-6,11,-48,-81,10,-11,1,30,23,-7,55,28,7,-38,54,-9,18, 
  /* [48][0][][] */ 5,9,-46,-89,66,-70,43,27,-92,64,-35,-20,4,39,6,59,127,-1,-8,25,-100,-3,29,-21,-17,71,-80,28,30,5,-61,-32,-21,20,-36,-5,-35,73,-111,-18,-29,-62,-22,32,27,-83,-9,-98,-5,3,-37, 
  /* [49][0][][] */ 27,-16,43,-39,-10,15,-59,52,36,-20,48,-12,68,-8,4,100,-59,127,-9,12,-71,62,-26,-19,-20,-21,-15,30,39,-35,5,14,41,53,19,14,-51,8,45,30,31,-125,40,9,-74,37,-5,-14,-33,-7,-5, 
  /* [50][0][][] */ 59,16,8,-7,-28,-21,-26,6,6,60,-43,-24,32,-7,55,0,-42,1,84,-31,45,-91,106,-5,-38,-1,-37,19,59,53,3,-45,-34,115,27,-38,-113,-75,-12,3,-28,-16,-9,38,101,18,16,36,-121,54,-127, 
  /* [51][0][][] */ -105,-86,8,66,53,-83,28,-39,26,75,12,100,8,-44,48,8,-21,28,25,51,25,33,-127,-60,88,20,-7,-24,78,-6,96,29,92,-48,-63,-17,17,-56,-30,-1,-16,-95,6,30,53,-85,105,-57,57,65,-2, 
  /* [52][0][][] */ -10,0,14,-58,24,-33,27,-56,9,3,-127,47,5,-51,-50,22,28,-98,-50,9,-5,27,-16,28,74,-6,-72,-78,-14,28,-75,-16,44,55,-33,-96,-11,31,-1,2,-70,23,-16,48,21,-48,-20,22,20,-11,-36, 
  /* [53][0][][] */ 4,-29,2,7,34,13,51,-31,-9,36,20,-3,-7,-59,-44,-28,18,51,32,-21,28,42,-48,21,-1,-20,-15,39,15,30,-49,-10,4,8,-2,21,-16,34,6,4,40,127,54,20,-19,-42,16,-2,-21,-27,18, 
  /* [54][0][][] */ -4,53,87,36,-37,-12,-25,30,-3,-19,76,-21,6,60,-21,31,-4,-124,-22,47,-15,-10,68,-82,27,9,0,-87,-52,-42,-28,42,69,13,-39,-127,23,21,-67,-21,-43,-20,-81,-1,-14,-5,-12,19,11,29,-16, 
  /* [55][0][][] */ -6,-127,44,71,-3,-11,66,31,-4,27,-86,67,-28,-48,-16,-36,33,-72,-15,63,59,90,3,-10,-5,15,-63,76,-97,-44,42,-23,14,58,7,-7,-32,-30,-42,65,-78,-16,28,28,-12,-39,119,3,56,-11,41, 
  /* [56][0][][] */ -6,24,-127,-56,33,62,-66,-47,61,60,-3,-22,29,-49,37,3,83,-35,-12,-106,98,-32,0,45,32,26,40,-43,25,-5,-18,3,67,17,91,15,-23,-25,-1,112,20,-110,-36,17,-45,20,37,108,-21,52,-11, 
  /* [57][0][][] */ 47,34,36,-114,9,31,-3,-28,11,-1,3,-51,17,28,20,-3,-31,29,-40,25,-3,-7,14,0,-44,-32,-20,127,47,-24,-5,-7,-14,-16,34,44,27,-34,-5,21,-23,-7,5,30,82,-18,50,-79,54,-5,-10, 
  /* [58][0][][] */ -74,-15,7,11,40,-45,37,30,-20,61,56,30,-24,-25,-30,127,35,18,21,82,-8,8,-6,46,59,26,-22,-18,16,41,38,-15,42,16,-1,46,35,-30,31,44,80,19,-66,-3,46,-76,-75,-18,15,-25,0, 
  /* [59][0][][] */ 2,-12,-6,28,0,-42,24,19,50,-1,9,-7,34,8,-30,22,60,-40,3,12,45,-15,30,-23,6,74,36,-10,-20,-25,-1,60,-12,34,-19,79,-7,-49,-71,82,81,-9,-13,-26,127,-22,10,-74,86,-54,-1, 
  /* [60][0][][] */ 11,-29,39,9,4,-15,-22,2,8,-2,-14,3,32,-59,11,-2,11,15,-22,-69,-22,-8,-18,-26,8,21,-7,66,-30,13,68,-49,-15,-5,21,-9,-41,-19,18,13,72,121,-12,7,127,9,-1,-26,-10,2,-66, 
  /* [61][0][][] */ -22,45,44,-72,-32,-8,-62,53,16,127,-79,-13,-59,69,-7,-65,18,4,43,69,-63,-3,-27,-15,-16,21,36,-4,-17,-35,-19,-11,-107,-26,7,42,0,58,-26,-48,100,-11,-1,11,53,33,-44,8,59,11,-58, 
  /* [62][0][][] */ -29,-40,-2,-18,11,-9,-13,-3,124,17,41,2,-19,-28,0,5,8,-22,6,127,7,53,-58,-26,36,36,27,11,-10,7,75,-20,-42,12,15,13,-7,-62,-31,-10,-15,-22,61,-15,44,21,-7,-20,-21,31,-48, 
  /* [63][0][][] */ 83,-88,47,-45,-22,18,-63,-18,-58,93,-37,-3,32,4,11,104,85,-101,-64,105,38,7,48,-14,-15,-88,113,10,-27,63,-1,-44,-73,65,0,25,66,70,8,-44,-20,63,-88,16,9,-65,-62,14,-37,82,127, 
  /* [64][0][][] */ 14,24,38,37,11,27,-15,8,8,1,11,32,-11,15,43,127,16,5,-10,18,35,-40,-17,44,2,24,-42,57,-12,-52,-8,-33,0,14,-23,-16,-30,-7,45,-18,95,-9,6,41,10,-21,-18,-42,11,-7,-25, 
  /* [65][0][][] */ 18,-20,23,10,-8,-12,16,9,13,-6,-12,-2,-10,17,-1,28,31,27,127,-15,-17,-47,11,12,14,13,24,20,-20,-4,25,-21,-2,9,-32,3,-16,-3,7,12,-15,-6,-11,3,-7,18,-1,-7,18,-7,10, 
  /* [66][0][][] */ -18,72,32,55,44,39,81,61,-47,-25,9,17,21,1,12,67,-30,-127,-27,12,-56,-14,102,12,65,-22,-49,105,-23,15,35,76,16,7,-30,-91,-61,-7,36,-28,25,-63,-77,-1,-41,31,-77,-35,28,-9,89, 
  /* [67][0][][] */ -8,2,47,-12,-6,3,-47,-10,47,-49,20,-27,6,-4,-15,-81,15,23,17,127,-3,-17,74,-27,24,60,27,21,-27,26,-32,-10,-40,4,14,-1,-16,76,-31,-19,64,22,15,-2,8,-5,-37,-3,-8,13,20, 
  /* [68][0][][] */ -39,98,3,-95,-50,33,-103,1,-16,24,73,-18,-8,86,-61,-62,29,45,-53,-34,21,46,-71,23,-14,-16,99,-6,12,-37,-60,10,59,-20,56,-58,-21,73,-78,-17,120,-62,5,37,22,37,-117,-127,68,-8,-7, 
  /* [69][0][][] */ -26,4,35,43,63,-15,48,-18,-21,-3,-44,-5,-46,-39,-6,4,-32,-127,9,37,-3,-2,-36,57,-9,68,3,45,112,15,-26,-19,-60,44,-41,-69,40,15,-40,9,67,-106,32,39,111,-12,-122,-37,31,-42,5, 
  /* [70][0][][] */ 35,2,18,-8,-61,7,24,125,-13,-18,-36,-2,33,73,40,-32,-2,-17,-16,-42,66,30,-1,-72,-50,15,-54,-14,-35,-2,-27,78,-111,16,26,30,14,-33,-127,-9,-27,-88,28,9,-8,-48,-15,-14,-96,20,-71, 
  /* [71][0][][] */ -19,24,-10,37,-11,45,36,-15,-35,-63,-18,24,-25,38,-25,3,-65,-55,12,73,1,19,-39,30,51,81,-5,19,30,56,-12,-12,-66,-21,-34,-37,-27,23,8,7,127,-15,60,-3,37,72,7,20,99,-15,14, 
  /* [72][0][][] */ 55,-35,-4,73,-18,-11,-48,110,-41,-47,-3,-18,-49,-15,72,-76,-23,7,43,65,26,-3,-73,31,-15,3,-63,-72,9,51,100,3,31,21,-23,-30,-37,88,-26,13,-24,-39,-33,-33,127,-13,-82,-40,3,-27,66, 
  /* [73][0][][] */ 8,-26,78,4,-50,-29,4,-18,8,-16,41,-6,40,7,-37,-56,23,22,-19,-36,-7,-1,-9,-24,127,-33,-3,7,-26,45,-6,-20,53,-30,-16,-18,-6,-25,-62,-61,28,74,81,25,23,-48,-14,27,24,11,-31, 
  /* [74][0][][] */ -20,-63,1,-74,-18,28,29,10,69,-127,9,31,73,25,20,86,-43,74,37,4,-25,94,-1,-57,-80,7,16,17,12,-47,-22,-23,-34,19,112,-20,44,51,-121,-105,54,36,-83,56,42,-22,-21,-110,45,-107,-22, 
  /* [75][0][][] */ -3,7,58,-25,-2,3,-33,-19,-30,-61,14,-22,-11,3,1,-17,73,45,-48,47,4,-10,6,-37,-51,18,25,-3,5,28,-7,127,29,-9,-25,40,-21,-20,26,-26,-53,29,78,-1,12,120,40,-5,15,33,38, 
  /* [76][0][][] */ 105,-36,4,-21,67,19,53,52,6,-32,-13,-27,26,-35,-71,-25,2,21,45,60,19,53,-39,4,-4,-4,10,23,58,-28,16,35,16,35,47,-75,-18,10,-9,-55,6,-127,-16,4,11,53,-31,-4,60,21,-16, 
  /* [77][0][][] */ -13,-36,17,-16,29,14,-27,-65,-14,-4,-4,-13,35,73,70,0,-17,72,-93,-53,-23,68,58,5,46,24,-76,35,40,-3,10,-48,-18,51,-20,127,9,8,65,-11,42,-47,13,-84,41,22,91,-6,-24,-16,-93, 
  /* [78][0][][] */ -12,68,6,-42,9,-42,61,28,127,-41,-38,-6,41,29,24,-23,47,-33,-45,9,9,14,-34,37,-8,-15,11,-30,-2,-1,36,-49,-90,17,14,12,-9,2,-48,-14,-35,43,39,46,-7,-41,-34,30,55,14,-13, 
  /* [79][0][][] */ -11,33,-24,47,20,-21,4,11,-42,-44,4,-4,6,60,18,-83,55,127,-4,96,-10,-1,18,-86,36,56,-32,-29,22,-4,1,-6,-76,3,23,-35,49,33,-29,34,-6,12,-62,-18,-45,95,17,-21,-44,-48,0, 
  /* [80][0][][] */ 42,-8,-22,-6,-43,-17,49,54,50,45,17,-7,-23,-25,-17,-69,-6,69,-19,-23,-6,78,5,17,20,-3,41,35,15,-1,-63,-31,-61,2,8,0,-15,-17,6,25,-25,10,-127,-92,11,6,-15,6,-37,-8,-33, 
  /* [81][0][][] */ -16,21,25,-79,60,-53,-47,61,43,-77,-124,30,-59,52,-79,-5,-5,-88,38,-105,-9,-17,-12,116,65,-10,-114,36,48,95,-43,61,38,-51,7,69,-105,59,-61,-127,-79,-48,-43,-78,38,12,122,50,53,-1,-53, 
  /* [82][0][][] */ -54,2,32,32,13,-52,127,54,-28,19,-33,-7,-40,-5,8,-74,5,33,-61,-20,91,-82,30,-4,4,-5,-5,36,20,28,25,3,-64,42,-32,-8,-25,45,21,-69,0,-15,-68,33,-20,12,0,-28,21,11,27, 
  /* [83][0][][] */ -13,83,-4,32,39,7,-54,22,108,68,-47,-3,-9,-19,-33,74,30,11,-60,30,9,-20,64,-6,-55,-90,-4,11,127,64,-74,-19,34,28,-12,35,-19,44,6,-13,30,-51,13,-8,23,-64,-18,7,4,1,10, 
  /* [84][0][][] */ 24,-48,-24,72,-30,39,-5,19,-22,-84,17,6,83,58,4,44,10,64,40,40,-57,-3,-30,7,-65,-22,-60,27,-25,-58,-34,4,36,38,1,-7,-6,30,127,39,46,83,39,-1,-17,-45,42,-23,-1,-15,-1, 
  /* [85][0][][] */ -17,27,17,29,-9,80,9,25,127,50,5,-24,-2,24,16,-46,-49,-73,15,-1,-5,17,17,4,-35,-28,-7,-5,-19,-50,-5,-35,36,-43,11,2,-9,14,-25,-22,72,0,35,10,-1,26,16,76,57,11,14, 
  /* [86][0][][] */ 69,5,-54,38,-13,-77,-29,-20,-59,-17,-127,8,-63,10,-85,-75,41,34,-67,88,-40,37,-31,-38,59,43,40,20,31,-6,-10,-70,-49,-15,-44,-3,-50,43,24,0,58,-26,-1,-4,78,58,-46,28,-4,59,-47, 
  /* [87][0][][] */ -16,-10,10,-70,-35,2,44,-62,68,-58,-111,-42,-54,74,-33,-1,-64,-109,-7,-109,47,127,56,88,57,-59,58,-88,94,-106,-125,9,-45,-5,-82,-36,33,10,-44,-14,58,-63,38,-66,21,-28,-17,-100,-39,13,-15, 
  /* [88][0][][] */ 1,-14,60,-78,19,-84,75,-12,114,-20,7,14,33,-127,71,-29,7,77,-63,62,-62,-109,-42,-55,73,-110,-63,96,-24,-8,-90,0,82,-40,-31,28,-4,38,-41,13,90,47,-26,-26,35,11,58,-17,69,49,-11, 
  /* [89][0][][] */ 22,-9,-8,42,3,-8,-58,61,-12,0,-3,52,34,111,-39,-63,17,13,127,-92,56,15,-10,14,-9,33,18,45,59,-31,-5,-32,17,-19,-50,-6,-6,83,23,7,-33,-32,7,30,-24,89,-73,101,-2,12,21, 
  /* [90][0][][] */ -51,62,82,-17,-9,-19,63,-22,-44,-2,-29,63,14,14,52,-25,-26,8,19,48,-37,-24,19,127,50,42,-6,-106,76,31,-37,38,39,101,70,25,30,-7,0,-35,-6,74,-20,6,28,33,-35,96,13,-15,77, 
  /* [91][0][][] */ -3,72,16,-71,-1,-71,-60,-81,-44,62,-127,-11,-57,-77,40,6,74,-97,-56,26,-65,38,-46,-101,61,54,8,-52,51,-36,-117,-83,-61,-46,-72,24,45,53,83,4,88,94,7,19,106,-113,-47,-63,81,36,-42, 
  /* [92][0][][] */ -70,70,17,-22,35,-15,77,-15,10,34,28,14,5,127,99,-13,18,-15,-33,-68,9,-30,-21,31,14,30,-5,-75,51,-45,-32,42,24,-3,-93,25,33,-8,39,41,19,-1,16,85,4,7,31,101,-63,-25,82, 
  /* [93][0][][] */ -42,-13,-25,-13,28,9,1,-21,5,-40,4,-1,-45,-57,-24,-11,-5,-15,127,10,-6,4,52,-38,-54,-19,-36,12,-9,-3,-36,-6,8,29,20,-3,-9,-14,-12,-15,-15,19,-20,24,-4,-20,10,-34,33,4,27, 
  /* [94][0][][] */ -12,35,13,13,29,-32,-27,16,62,127,-6,6,2,56,-13,101,23,-12,29,-24,-43,-5,-66,39,-27,9,-31,20,12,29,-39,-21,7,-50,-25,-36,-74,10,-33,11,83,-33,11,80,72,37,0,-9,28,-21,-40, 
  /* [95][0][][] */ 26,4,11,27,17,-10,35,-13,2,2,78,-10,19,13,97,-26,-6,27,-8,4,-9,43,45,27,-31,-15,43,-1,-11,-3,-20,-3,25,-15,3,-11,18,-33,62,-1,-13,6,19,127,32,-1,-19,18,0,0,-21, 
  /* [96][0][][] */ -66,24,19,-28,0,34,-3,22,26,70,68,-41,102,54,-23,39,-45,-8,124,127,34,-41,51,46,3,-85,80,-94,-7,-31,93,-15,-81,46,-53,-67,23,33,42,9,37,73,8,25,-77,48,-78,44,-55,25,-54, 
  /* [97][0][][] */ -21,-5,37,-100,61,20,-21,20,4,21,-21,34,-33,37,69,-8,0,-38,15,29,31,54,-78,42,-51,34,-79,14,-62,39,-10,-21,23,-51,127,-39,-16,-15,-16,-30,-11,66,-35,-8,31,5,76,7,42,27,-71, 
  /* [98][0][][] */ 25,14,0,-15,53,-31,-13,-9,-23,54,47,15,-15,12,-25,-32,-17,127,32,-54,29,23,-95,-57,98,-29,-50,-10,15,-7,-36,17,17,-24,-72,61,-23,-7,18,-14,59,90,63,-10,-23,-37,2,98,37,20,-12, 
  /* [99][0][][] */ 16,-22,5,41,-6,-17,-36,17,-29,17,-1,-21,30,-8,52,-54,61,-31,-10,37,-15,19,13,-17,-6,-24,-27,-12,16,14,-2,127,-64,20,12,11,-38,33,40,-3,1,12,-4,12,24,-24,12,-20,5,-1,-23, 
  /* [100][0][][] */ 49,20,29,4,0,-83,-44,55,-49,7,6,5,5,-6,48,-13,-81,26,-18,-127,-42,36,2,-33,-18,17,-38,68,59,-50,25,-41,-57,59,1,-6,-66,41,-2,0,2,47,-58,-7,-26,82,41,34,52,3,-54, 
  /* [101][0][][] */ -11,-6,15,-23,-37,-44,23,19,-72,-18,17,14,-33,-62,-7,-12,35,25,80,21,88,127,59,-39,40,2,-98,38,84,7,-71,36,-103,-23,-106,16,32,39,4,-8,28,-61,51,-83,6,-20,0,-67,-22,-79,-27, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 102,1,1,51 } };
const TfArray<102, float> quant12_scale = { 102, { 0.0032555428333580494, 0.0028227679431438446, 0.0032219476997852325, 0.0035167229361832142, 0.0042962613515555859, 0.0032896350603550673, 0.0035788335371762514, 0.0045882347039878368, 0.0046297041699290276, 0.0027874168008565903, 0.0049521038308739662, 0.0028994821477681398, 0.0052291508764028549, 0.0038214798551052809, 0.0047526555135846138, 0.0042875474318861961, 0.0052341334521770477, 0.0045307534746825695, 0.0036254064179956913, 0.0025932334829121828, 0.002803718438372016, 0.0027175128925591707, 0.0035008443519473076, 0.0036776992492377758, 0.0036804829724133015, 0.0035868824925273657, 0.0043763411231338978, 0.0032819926273077726, 0.0028977098409086466, 0.0019634086638689041, 0.0040770652703940868, 0.0062809488736093044, 0.0046303169801831245, 0.0029331780970096588, 0.0028436402790248394, 0.0050343484617769718, 0.0035466598346829414, 0.0042456365190446377, 0.0047322087921202183, 0.0035805781371891499, 0.0039126421324908733, 0.0069677713327109814, 0.0030171829275786877, 0.0023074967321008444, 0.002248105825856328, 0.0023639996070414782, 0.0044824914075434208, 0.0040109348483383656, 0.0045715938322246075, 0.0027095787227153778, 0.0030493985395878553, 0.0037646617274731398, 0.0027129028458148241, 0.0066757723689079285, 0.0032057685311883688, 0.0031813075765967369, 0.002926412969827652, 0.0027827292215079069, 0.005641372874379158, 0.0060628782957792282, 0.0021458456758409739, 0.0044938470236957073, 0.0047450335696339607, 0.0023151224013417959, 0.0033233815338462591, 0.0075413226149976254, 0.0048587312921881676, 0.0066529465839266777, 0.004423811100423336, 0.0042688935063779354, 0.0047620763070881367, 0.0056901103816926479, 0.0053385929204523563, 0.0049627320840954781, 0.0032606557942926884, 0.0046118837781250477, 0.0051452307961881161, 0.0023014380130916834, 0.0040759872645139694, 0.0051028672605752945, 0.0040671355091035366, 0.0026041211094707251, 0.0046615186147391796, 0.0055229086428880692, 0.0029454189352691174, 0.0057575064711272717, 0.0036190059036016464, 0.0041926596313714981, 0.0032641291618347168, 0.0060567264445126057, 0.0026356594171375036, 0.0040240702219307423, 0.0042358268983662128, 0.0069839400239288807, 0.0048372293822467327, 0.0047262618318200111, 0.0041292430832982063, 0.0035393151920288801, 0.0040855626575648785, 0.0049362997524440289, 0.0026626375038176775, 0.0039401110261678696, } };
const TfArray<102, int> quant12_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[51] = { 22471, 32446, -1109, -204, 27753, 24585, 30400, 30477, 2569, 65, 19, 34666, 24263, 47112, 31757, -117, -293, -9967, 643, -209, -5182, -107, -12141, 33182, 342, 29338, 25728, 2626, -737, 37965, -428, -103, 629, 23133, -310, 32561, -7953, -1970, 7436, 38011, -1461, -2308, 51908, 22674, -40, 3976, -282, 2355, 40512, 19033, -5391, };
const TfArray<1, int> tensor_dimension13 = { 1, { 51 } };
const TfArray<51, float> quant13_scale = { 51, { 8.7171247287187725e-05, 9.9527198472060263e-05, 5.4355052270693704e-05, 3.8641646824544296e-05, 7.1651804319117218e-05, 5.9892514400416985e-05, 0.00010473364818608388, 6.7759377998299897e-05, 5.4294629080686718e-05, 4.3585965613601729e-05, 5.2938939916202798e-05, 4.5333199523156509e-05, 8.0154772149398923e-05, 4.0057297155726701e-05, 6.3308689277619123e-05, 5.1646864449139684e-05, 4.2378815123811364e-05, 5.5462911404902115e-05, 5.9353849792387336e-05, 6.4288527937605977e-05, 4.7276942495955154e-05, 5.7512155763106421e-05, 6.1002978327451274e-05, 5.1857154176104814e-05, 4.6588269469793886e-05, 8.3202772657386959e-05, 0.00011134629312437028, 6.9906294811517e-05, 4.3125848605995998e-05, 4.5062552089802921e-05, 5.8766443544300273e-05, 7.0455411332659423e-05, 4.8086472816066816e-05, 7.2954775532707572e-05, 6.8602610554080456e-05, 7.8952281910460442e-05, 7.9241508501581848e-05, 5.2039511501789093e-05, 6.2074774177744985e-05, 3.8532423786818981e-05, 5.0708276830846444e-05, 5.1845327107002959e-05, 3.9305141399381682e-05, 4.5039789256406948e-05, 6.927432696102187e-05, 5.7582190493121743e-05, 6.4045285398606211e-05, 5.1918887038482353e-05, 4.4250929931877181e-05, 8.4956060163676739e-05, 8.7500411609653383e-05, } };
const TfArray<51, int> quant13_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[1*3*3*51] = { 
  /* [0][0][][] */ -124,-92,-29,80,-102,-127,-127,-105,-14,53,119,-111,-127,-101,-127,35,81,115,118,0,77,-16,48,-34,110,-57,-52,-38,82,-73,11,46,48,-127,94,-95,127,-40,-72,-127,61,85,-93,-86,-31,-28,56,119,-120,-9,127, -127,-103,36,77,-118,-115,-103,-98,3,105,127,-115,-99,-127,-120,6,79,127,127,6,93,-14,51,-51,127,-55,-63,-53,79,-90,-8,54,72,-109,127,-127,110,-12,-53,-117,68,81,-97,-127,-58,-37,84,127,-117,-21,106, -31,-14,-61,-5,-40,-27,-31,-18,-29,55,22,-58,-9,3,3,-20,50,2,-26,10,-10,-29,-1,-19,-1,-3,-15,-13,18,-19,-23,26,20,-11,-9,-26,6,-21,-27,-95,57,29,-36,-61,-2,-17,-1,-16,-32,5,7, 
  /* [0][1][][] */ -60,-127,52,126,-87,-100,-45,-127,93,99,115,-122,-120,-61,-104,86,113,119,87,104,127,55,127,-127,93,-127,-99,68,114,-98,46,117,118,-31,72,-39,-30,63,-40,-127,115,127,-127,-53,61,76,115,119,-119,-94,-26, -66,-97,127,127,-127,-93,-56,-120,127,127,123,-118,-127,-99,-118,122,127,106,106,127,122,70,106,-106,98,-124,-127,64,127,-105,61,127,127,-43,95,-31,8,79,-14,-75,127,121,-101,-46,35,105,127,115,-127,-127,-46, 11,-10,-10,22,-29,-20,27,26,56,37,-1,-11,-20,3,-30,55,44,12,0,27,31,32,35,-37,4,-28,-19,16,5,-20,0,28,23,-2,-14,7,76,63,28,-77,22,3,-25,-31,16,65,26,0,35,0,36, 
  /* [0][2][][] */ 66,-43,108,46,42,-18,-10,0,125,49,-34,-127,96,-36,-21,113,-28,70,-38,50,29,127,42,-11,26,-7,34,127,34,-127,125,57,68,-62,4,-31,-18,127,127,-47,-2,27,-81,-70,89,102,9,-20,55,-31,-10, 65,-23,79,56,53,-12,-29,7,119,26,-26,-97,83,-19,-23,127,-27,85,-43,67,50,119,61,-20,37,-12,19,123,25,-109,127,63,61,-78,20,-35,-16,124,113,-78,3,65,-89,-92,127,127,-7,-33,65,-72,17, 13,1,23,13,30,16,14,36,34,22,-4,-37,59,26,-5,15,-23,-2,10,38,5,27,7,-60,16,18,23,25,17,1,18,15,32,-12,8,-17,-47,26,34,-31,-13,12,-2,-26,-14,36,40,-13,67,-14,-61, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant14_scale = { 51, { 0.0053301183506846428, 0.0060856277123093605, 0.003323559882119298, 0.0023627579212188721, 0.004381176084280014, 0.0036621501203626394, 0.0064039779826998711, 0.0041431724093854427, 0.0033198653254657984, 0.0026650801301002502, 0.0032369710970669985, 0.0027719154022634029, 0.0049010934308171272, 0.0024493183009326458, 0.0038710332009941339, 0.0031579667702317238, 0.0025912683922797441, 0.0033913003280758858, 0.0036292131990194321, 0.0039309458807110786, 0.0028907661326229572, 0.0035166020970791578, 0.0037300498224794865, 0.0031708248425275087, 0.0028486570809036493, 0.0050874645821750164, 0.0068083102814853191, 0.0042744465172290802, 0.0026369460392743349, 0.0027553664986044168, 0.0035932960454374552, 0.0043080220930278301, 0.002940265228971839, 0.0044608470052480698, 0.0041947322897613049, 0.0048275664448738098, 0.0048452513292431831, 0.0031819753348827362, 0.0037955848965793848, 0.0023560794070363045, 0.0031005763448774815, 0.0031701016705483198, 0.0024033274967223406, 0.002753974637016654, 0.0042358045466244221, 0.0035208843182772398, 0.0039160726591944695, 0.0031745997257530689, 0.0027057395782321692, 0.0051946700550615788, 0.0053502451628446579, } };
const TfArray<51, int> quant14_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 3 };
const ALIGN(16) int32_t tensor_data15[51] = { 1816, 51202, 14706, 12560, 19493, -3837, 42139, 21180, -10770, 1187, 749, -1694, 11111, 1950, 38971, 3890, -12401, 10502, -37874, -5928, 14024, -2837, -10880, 15041, -9591, 11071, 9346, -1721, -5836, 23875, 9851, -8097, 8637, -17060, -6908, 2019, -15645, 15220, -5340, 23135, 8325, 11582, -11970, 14057, -4261, -14926, -20511, 33308, 14848, 43924, -10424, };
const TfArray<1, int> tensor_dimension15 = { 1, { 51 } };
const TfArray<51, float> quant15_scale = { 51, { 4.9801379645941779e-05, 2.4090495571726933e-05, 8.4915511251892895e-05, 7.9657984315417707e-05, 5.7334887969773263e-05, 6.0631289670709521e-05, 3.3978863939410076e-05, 5.1088623877149075e-05, 7.112683670129627e-05, 0.00011511942284414545, 4.5668431994272396e-05, 8.0288162280339748e-05, 4.6977245801826939e-05, 7.0919122663326561e-05, 4.916590842185542e-05, 6.0143622249597684e-05, 8.0111400166060776e-05, 5.3000014304416254e-05, 6.2712024373468012e-05, 5.3415107686305419e-05, 6.474266410805285e-05, 6.5726650063879788e-05, 4.5378659706329927e-05, 4.9426493205828592e-05, 5.4641175665892661e-05, 6.0787573602283373e-05, 4.691032154369168e-05, 4.7250381612684578e-05, 8.8945926108863205e-05, 7.0017464167904109e-05, 6.3799299823585898e-05, 7.5356416346039623e-05, 7.8261786256916821e-05, 6.187927647260949e-05, 0.00010130410373676568, 5.7957895478466526e-05, 9.0317793365102261e-05, 5.7512679632054642e-05, 7.0210830017458647e-05, 6.6027365392073989e-05, 5.8301993703935295e-05, 6.7850800405722111e-05, 6.3204854086507112e-05, 9.423381561646238e-05, 7.628044841112569e-05, 8.1760867033153772e-05, 8.1552512710914016e-05, 5.4344352975022048e-05, 6.1033078964101151e-05, 4.9463968025520444e-05, 7.3227005486842245e-05, } };
const TfArray<51, int> quant15_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[51*1*1*51] = { 
  /* [0][0][][] */ -24,20,-9,-23,18,-29,-24,35,8,14,9,-3,2,-6,21,-93,-26,13,-58,-36,24,43,-9,23,25,63,-40,99,-9,127,39,-1,37,-58,-4,-19,16,-25,-11,-41,23,-7,-38,21,38,55,62,13,26,-11,88, 
  /* [1][0][][] */ 19,89,15,25,27,-121,43,-127,39,32,17,32,-45,5,-64,110,-52,-15,28,76,78,-59,-87,-9,-46,-67,85,25,-68,-97,69,-37,-75,49,-71,4,-84,-42,70,-68,32,28,11,-11,12,-52,83,9,19,-102,-7, 
  /* [2][0][][] */ 1,-6,-50,56,-118,20,62,41,-43,-8,17,-13,-33,-41,11,5,-3,-17,-14,45,93,-46,26,0,-43,-127,-32,-9,-60,13,8,12,-62,0,-11,17,-27,111,-27,10,-31,-88,6,28,30,1,-98,-62,69,12,15, 
  /* [3][0][][] */ -127,-3,-16,-29,43,-54,51,-54,-91,5,-23,48,-76,-20,-3,-2,27,-44,-1,66,-12,25,-3,83,5,-7,59,-3,14,-25,9,-55,51,15,39,-71,-42,4,62,73,-18,-11,-40,30,10,-20,26,114,10,20,29, 
  /* [4][0][][] */ 44,66,-61,40,-11,10,-52,5,-61,61,54,1,105,-62,23,-95,1,-101,26,54,-127,-39,67,-3,-29,-20,-62,-21,-21,3,-69,44,2,83,-15,15,-2,-36,28,-8,56,74,-3,-4,13,-31,36,-55,31,-46,-39, 
  /* [5][0][][] */ 42,5,49,-53,-60,25,68,39,90,31,107,37,-14,52,40,-38,-97,-46,75,-127,55,7,-14,16,-55,-72,3,26,67,-32,-30,19,25,-19,12,-68,6,33,11,57,-1,-65,-59,-69,32,-24,-57,61,2,-76,33, 
  /* [6][0][][] */ -7,-39,-50,66,-72,4,29,-13,53,-24,-15,-127,-11,23,-47,21,-103,-43,-10,-42,17,30,60,42,34,-24,24,-11,6,-5,-52,-10,42,26,73,41,-50,-84,-43,30,-13,-59,-11,19,-7,-1,-44,4,-9,-23,-17, 
  /* [7][0][][] */ -16,-75,-3,30,-33,5,-26,-127,-89,-49,-12,20,54,-22,85,-19,-51,-37,38,-3,35,12,22,13,4,-13,-24,30,-22,-37,-7,79,28,-62,-39,17,83,-35,-16,-107,32,21,69,-2,31,-13,-3,13,-18,-3,14, 
  /* [8][0][][] */ -22,22,60,-3,-28,64,43,-18,-54,64,36,48,19,8,-11,-37,-81,127,-55,-15,-45,45,12,-34,24,-44,10,-26,14,35,-28,29,39,-19,-24,89,-61,93,-11,30,51,-65,-9,-15,3,7,-10,11,-38,88,-23, 
  /* [9][0][][] */ 19,15,7,-4,-19,-71,24,-21,-47,2,-27,-1,24,56,3,-16,-33,38,-9,24,-6,-5,-4,-29,-14,16,17,-12,13,-42,10,-30,24,3,-14,43,-2,8,-9,20,-15,15,25,23,-13,10,19,7,127,28,0, 
  /* [10][0][][] */ -35,10,45,62,-18,-5,-80,73,127,-77,-35,49,14,70,11,38,-5,22,55,-66,-8,-53,80,59,15,25,-95,115,-93,19,-44,-10,-11,-79,12,-67,-30,71,-18,44,55,-83,2,3,-47,-16,122,6,-34,47,-90, 
  /* [11][0][][] */ -21,-51,23,0,50,64,26,-32,16,-15,-33,10,51,24,-32,-5,14,7,1,127,-17,15,-22,-34,22,-63,45,38,-38,73,14,7,28,39,30,-1,56,31,-12,16,-37,34,22,-38,-67,-66,-50,0,4,35,-65, 
  /* [12][0][][] */ -127,-24,36,-15,-99,12,30,-3,23,-28,-17,-10,1,31,81,-1,14,-39,20,22,-19,31,56,19,11,78,2,-6,-42,1,5,8,0,0,-59,-5,17,-5,-2,-10,10,33,79,80,-7,-24,-28,-28,-23,-49,-36, 
  /* [13][0][][] */ -17,-19,-21,-12,-2,70,-10,-6,-27,-3,-78,-15,127,88,33,-23,43,-36,-10,12,44,90,-8,20,-51,-11,-47,12,32,3,-6,16,-95,99,13,-5,-70,-14,28,-28,5,-38,-98,31,-16,44,-23,98,0,-21,25, 
  /* [14][0][][] */ -39,30,-66,13,3,-36,109,-22,30,-16,9,-30,70,-12,4,-8,33,-23,-33,-61,2,-108,-31,11,-71,-21,-13,55,-52,29,-31,46,-36,-127,-79,-3,-98,-57,63,-63,-59,2,65,32,-28,64,-91,-25,53,-11,-27, 
  /* [15][0][][] */ -34,-22,8,-25,85,-63,34,-15,48,59,54,-12,-38,127,5,-51,17,-17,-29,-52,36,5,-46,-14,23,-43,-4,-7,-8,-17,21,57,-10,-51,-8,66,-27,42,-7,-6,34,-19,22,5,31,-29,-22,9,-26,33,19, 
  /* [16][0][][] */ 30,13,-95,-17,27,17,14,-25,43,-23,37,-32,12,34,25,42,77,-81,-16,-11,92,-6,-2,124,127,-35,-6,0,-1,-26,5,-29,12,-12,-51,28,85,-18,-86,2,5,-36,-16,-4,-22,54,18,-19,20,17,-9, 
  /* [17][0][][] */ 127,-40,-24,-23,42,18,54,-49,17,-6,-27,9,-22,30,-24,11,28,-19,-22,58,-35,-4,-39,18,-21,-2,-24,-27,-11,-35,11,1,31,6,-23,-6,-26,-16,16,0,31,-16,27,13,-9,17,38,-8,9,-2,25, 
  /* [18][0][][] */ 127,63,23,-22,7,-13,-28,28,89,75,0,-6,67,-51,126,78,-20,-40,-42,16,12,24,14,8,-45,-19,73,62,-8,-14,-32,87,40,13,19,-21,-7,98,-82,-72,14,47,4,98,17,53,20,38,11,16,-56, 
  /* [19][0][][] */ 2,66,22,-18,-3,119,24,3,-23,29,-70,27,11,39,-27,-35,-80,-10,-29,-20,-10,-23,-8,89,14,-44,52,-50,53,3,48,-14,-26,-52,5,21,4,10,84,54,36,-28,127,24,60,-52,13,-15,35,6,67, 
  /* [20][0][][] */ -4,55,81,42,-19,-88,26,-62,8,51,64,-4,-19,-7,-47,-41,66,65,-19,-13,-31,-69,-56,-7,30,-41,-74,61,41,36,32,64,-72,20,-13,-6,-58,7,-79,21,5,-67,127,-6,-60,6,-2,1,-24,6,-27, 
  /* [21][0][][] */ -23,-56,91,-11,-31,-32,127,3,-2,85,88,-11,4,-16,-13,48,-9,27,25,-11,45,-24,-6,82,-27,-29,26,-36,-27,3,-11,-14,26,9,-44,-35,-1,41,-31,8,-15,-41,-23,-41,-12,22,30,-53,37,2,5, 
  /* [22][0][][] */ 24,19,-114,32,94,-7,0,15,38,113,-1,19,8,-47,3,-3,-48,-20,-36,36,62,42,-16,35,-45,-79,-29,-78,64,36,68,-30,30,127,71,13,-27,32,-74,89,-10,22,48,63,30,-31,45,71,22,11,-5, 
  /* [23][0][][] */ 100,0,-49,-6,-10,21,-25,71,-49,-108,89,-76,-45,-19,19,-45,-41,13,-62,60,113,-7,34,52,6,-121,3,-3,51,8,80,-79,28,40,-74,11,1,14,-56,61,127,56,52,-6,-121,4,3,57,-33,-61,-50, 
  /* [24][0][][] */ 15,8,-56,-38,-109,-13,37,30,76,122,-127,99,7,-27,49,-15,-89,64,52,0,46,28,-8,22,112,-96,14,-81,63,14,43,4,-8,-127,20,-25,-40,-28,17,35,33,101,-24,96,-25,127,11,73,15,-40,-36, 
  /* [25][0][][] */ -8,-27,-17,-11,-59,-47,-40,-35,11,-31,22,11,18,-58,20,-28,-7,-52,-13,-16,-79,-10,50,45,30,-2,3,8,-29,24,36,-13,-30,1,-1,127,47,67,3,16,13,21,-15,-31,16,19,2,14,-26,-10,22, 
  /* [26][0][][] */ 34,-6,-65,51,-40,-59,-22,27,20,-69,16,-47,43,23,22,-43,31,-17,38,0,-17,-5,-8,5,15,21,34,6,-35,1,31,54,3,0,13,-37,-1,41,127,-25,34,6,5,41,-11,-5,-47,9,-12,-1,-3, 
  /* [27][0][][] */ -80,51,-30,70,40,-3,102,45,27,-59,-43,-39,-69,6,-28,127,67,83,-19,-100,94,32,-9,-35,14,-49,16,-121,74,-46,4,62,-29,23,94,-57,-26,9,-24,35,-5,-95,104,-50,45,-20,-14,34,33,-1,-63, 
  /* [28][0][][] */ 82,-52,31,-41,-47,-32,50,-35,-64,28,-4,33,12,-39,-18,-44,11,-68,-23,24,127,13,-1,62,74,-1,25,2,27,4,10,30,-7,-32,-17,-10,-53,-13,3,34,-30,11,102,-31,2,6,3,33,-5,95,14, 
  /* [29][0][][] */ 27,-79,61,-21,98,-20,-22,-43,-127,-73,8,-45,5,-46,26,36,15,0,3,-32,-16,-8,-18,-36,-34,-88,-25,2,55,38,20,-18,54,-26,107,-38,-16,11,8,-60,59,-39,21,12,10,22,-58,-28,42,-6,37, 
  /* [30][0][][] */ 27,42,33,-35,52,-37,13,50,5,7,-30,-83,4,18,-2,-127,-23,-6,-27,-25,-10,16,-14,55,-5,-23,-14,9,120,4,2,15,20,36,42,-21,18,58,-6,42,-70,9,-43,5,22,30,-18,-44,6,-58,-50, 
  /* [31][0][][] */ 19,26,-52,-49,18,123,-26,-82,-25,12,127,-36,22,21,-6,3,-17,-15,39,-59,-46,49,44,24,23,-1,4,-3,-19,-13,39,6,-20,31,-28,-54,-21,19,-58,37,1,-31,53,-36,-18,-56,10,-15,75,30,-21, 
  /* [32][0][][] */ 10,53,37,-5,-3,-67,9,39,-17,12,-127,1,-29,11,-25,9,22,-30,-14,-24,57,25,24,-36,38,-18,38,-30,-42,69,33,26,-1,11,14,62,-55,-58,28,-3,71,26,14,-1,15,18,-17,8,-6,-19,2, 
  /* [33][0][][] */ -36,-19,9,76,14,3,47,9,65,22,-15,-93,-9,-45,-16,33,34,100,-100,9,25,-60,-31,-12,69,28,-43,-25,43,2,43,-8,-10,-14,127,20,3,-63,65,-40,-66,36,-33,117,-61,60,70,-45,4,35,34, 
  /* [34][0][][] */ 6,21,-19,25,-56,-22,-11,-48,-7,1,-15,-38,0,-28,-57,20,2,22,34,-48,-9,4,-26,-21,43,36,19,6,-2,24,16,64,-35,17,30,-7,22,25,5,6,-12,-1,1,127,-35,-14,6,28,10,4,32, 
  /* [35][0][][] */ -7,-80,26,-4,-3,-3,-31,-7,58,2,31,5,27,21,0,5,-6,-36,2,40,5,-17,36,-42,55,-39,-4,-11,127,-25,2,54,15,41,-11,6,-74,-42,32,43,-28,-1,-23,-13,-2,-23,7,-1,5,28,84, 
  /* [36][0][][] */ 66,51,-26,26,33,8,35,-17,17,127,24,38,-14,-50,56,-21,-51,33,0,67,44,26,-17,-91,-58,11,-27,-78,-5,3,-23,-88,-27,46,29,62,38,25,-58,-20,19,30,-6,3,49,12,-10,34,0,-4,51, 
  /* [37][0][][] */ 68,78,7,-77,-8,-10,102,1,34,18,17,-47,-49,-43,1,78,63,-56,-48,-48,-53,-32,-1,-18,16,-73,-35,2,-76,-42,-29,-26,-58,-42,1,59,-7,38,-21,43,-53,-58,-42,-71,-34,31,-50,12,127,62,-16, 
  /* [38][0][][] */ 4,-36,127,72,-22,63,5,18,70,46,-73,-26,-29,-21,-54,-11,64,-8,-22,-35,-63,80,-53,-3,2,34,-38,10,13,34,30,63,-16,-57,51,-5,5,6,-18,37,0,-15,-35,-1,3,5,39,-8,-29,-5,48, 
  /* [39][0][][] */ 25,-22,21,-63,30,32,66,-30,4,-84,1,2,-87,-7,-75,-119,-29,38,10,-29,64,29,22,-1,-50,36,-12,-35,-54,-127,91,-6,42,98,-46,38,-31,-59,-85,-7,-52,45,-4,-21,-12,-79,8,-29,59,81,-9, 
  /* [40][0][][] */ -43,60,4,15,-41,-66,43,-18,19,17,4,85,-56,6,-16,29,-101,-25,-4,-29,-9,31,-20,78,-11,-1,29,-4,-40,40,-31,87,-34,127,-30,-23,-48,42,-23,-50,67,25,19,-85,-28,8,12,0,107,-38,56, 
  /* [41][0][][] */ 26,-15,-13,-6,49,14,-42,4,-39,10,-20,4,-14,20,14,6,-27,-22,-18,20,15,-68,-6,52,37,23,9,-4,-15,-26,45,-3,7,43,-3,23,-29,16,-19,8,-15,-26,-12,15,-16,127,-58,-36,-30,18,-10, 
  /* [42][0][][] */ 12,-28,-9,-21,-89,-50,-10,90,-46,-23,17,97,127,27,-79,30,36,47,47,17,9,28,12,86,-81,10,-6,53,86,-29,44,32,-15,-4,91,108,25,2,-56,-24,43,-16,7,42,32,-4,-3,-16,-29,4,-33, 
  /* [43][0][][] */ 5,-1,-116,-22,-48,-39,52,-9,46,-9,19,-9,28,-3,-78,39,-1,64,-37,96,-12,-10,-51,57,12,34,0,-37,13,21,18,21,-2,-79,4,18,1,-81,62,4,3,7,48,12,0,-12,-127,1,-11,40,-120, 
  /* [44][0][][] */ 20,-10,46,3,-25,18,110,2,46,8,14,18,60,40,1,-57,-21,21,-6,-10,51,-39,-54,-58,29,11,20,47,-63,-39,-18,27,-47,-26,127,-11,11,57,-6,9,15,-40,15,-35,42,-4,40,-27,15,-24,-101, 
  /* [45][0][][] */ -35,-6,-14,6,-2,66,-8,-13,-18,17,127,3,29,6,-6,-18,-5,-35,-10,3,62,-23,-53,17,56,-7,7,-15,3,-14,-20,8,25,4,-8,16,-13,38,-10,29,27,-13,-48,4,-5,-30,14,12,28,44,28, 
  /* [46][0][][] */ -6,-31,19,43,39,-3,-10,-21,34,52,6,-25,-7,26,12,78,0,31,-3,-14,30,27,92,-82,-58,44,-26,-24,10,-26,14,-40,0,-31,-38,10,50,96,127,-9,124,-18,-66,59,64,-20,-75,-3,-23,-60,23, 
  /* [47][0][][] */ -11,-11,-50,73,-14,23,6,21,-77,3,23,-52,-54,-6,-44,-35,-6,71,37,-23,-41,-44,38,-24,-45,-4,127,-9,1,-10,3,-14,-100,-44,20,15,-51,-39,-98,-64,55,-46,28,50,24,72,61,-19,-39,-44,52, 
  /* [48][0][][] */ 25,-35,19,-26,-69,-17,13,28,65,85,14,-2,28,86,-14,-9,70,2,43,42,-75,39,-43,-21,5,-61,21,88,-79,43,46,-40,-64,-4,-30,-50,127,-50,-63,-92,-24,41,8,-27,17,15,-63,-7,7,-48,10, 
  /* [49][0][][] */ -46,-36,-7,-39,-24,-85,-71,-25,-51,-63,-39,-13,74,27,16,-26,30,-9,-33,-29,-62,-8,89,109,8,-42,-33,-11,-57,7,-5,-21,6,56,-32,-127,83,-15,-22,-88,-33,-49,32,-28,-32,-24,35,-71,27,80,-21, 
  /* [50][0][][] */ -9,-5,12,-32,59,14,-28,-6,11,127,-19,1,71,-38,-36,45,33,-20,3,-3,0,-13,-57,11,115,-7,-30,38,-33,-45,-45,13,-26,29,30,83,-45,15,-18,50,-8,-8,-53,8,-35,-50,30,-18,1,14,41, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant16_scale = { 51, { 0.0027444940060377121, 0.0013275981182232499, 0.0046795913949608803, 0.004389855545014143, 0.0031596564222127199, 0.0033413171768188477, 0.0018725341651588678, 0.0028154323808848858, 0.003919714130461216, 0.0063440925441682339, 0.0025167320854961872, 0.0044245836324989796, 0.0025888592936098576, 0.0039082672446966171, 0.0027094739489257336, 0.0033144424669444561, 0.004414842464029789, 0.0029207668267190456, 0.0034559839405119419, 0.0029436422046273947, 0.0035678902640938759, 0.0036221162881702185, 0.0025007631629705429, 0.0027238344773650169, 0.0030112091917544603, 0.0033499298151582479, 0.0025851712562143803, 0.0026039115618914366, 0.0049017025157809258, 0.0038585781585425138, 0.003515902440994978, 0.0041528013534843922, 0.004312912467867136, 0.0034100920893251896, 0.0055827470496296883, 0.0031939896289259195, 0.0049773044884204865, 0.0031694544013589621, 0.0038692341186106205, 0.0036386884748935699, 0.0032129525206983089, 0.0037391758523881435, 0.0034831434022635221, 0.0051931119523942471, 0.0042037232778966427, 0.0045057428069412708, 0.0044942605309188366, 0.0029948516748845577, 0.0033634593710303307, 0.0027258996851742268, 0.004035451915115118, } };
const TfArray<51, int> quant16_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int32_t tensor_data17[51] = { 2264, -5854, -1467, 23140, -10075, -3405, 7143, 43221, 31793, -195, -7, -3934, 46734, -838, 28707, 30522, -12134, -2846, 23962, -2557, -246, 21987, 27519, -6996, 2137, 39524, 34314, -2572, -237, 24504, 25930, 34132, 26751, -11341, -3964, -1634, 29747, 25362, -26, -5497, -1399, 5482, 3242, 19407, 20401, -1440, 47585, 27543, -4505, 228, 36206, };
const TfArray<1, int> tensor_dimension17 = { 1, { 51 } };
const TfArray<51, float> quant17_scale = { 51, { 7.490450661862269e-05, 5.0860795454354957e-05, 0.00011507720046211034, 6.7160355683881789e-05, 0.00015464212629012764, 8.6843378085177392e-05, 0.00011810679279733449, 5.6688531913096085e-05, 6.164818478282541e-05, 0.00010215188376605511, 0.00015718759095761925, 6.812747596995905e-05, 4.8441295803058892e-05, 4.780665403814055e-05, 7.3594346758909523e-05, 7.925137470010668e-05, 6.8273810029495507e-05, 6.7510496592149138e-05, 5.7599074352765456e-05, 7.6318916399031878e-05, 0.00011228325456613675, 7.0146801590453833e-05, 8.0353041994385421e-05, 8.4472740127239376e-05, 6.7282926465850323e-05, 4.9738300731405616e-05, 7.1487731474917382e-05, 0.00011814664321718737, 9.7476076916791499e-05, 7.9398210800718516e-05, 4.4985008571529761e-05, 7.2237089625559747e-05, 5.2819788834312931e-05, 8.4527666331268847e-05, 0.00011393345630494878, 0.00012233381858095527, 7.1047405072022229e-05, 7.7921707998029888e-05, 0.00013009397662244737, 8.9177970949094743e-05, 0.00013360858429223299, 6.7666805989574641e-05, 0.00015064439503476024, 0.00012983764463569969, 6.1417420511133969e-05, 0.00010176443174714223, 3.6857494706055149e-05, 5.3937386837787926e-05, 0.0001002553544822149, 6.8438806920312345e-05, 4.7234665544237942e-05, } };
const TfArray<51, int> quant17_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[1*3*3*51] = { 
  /* [0][0][][] */ -2,49,21,-127,53,31,24,-120,0,25,34,-30,-114,50,-42,-37,5,1,-110,21,3,-47,-61,58,-31,-127,-9,-92,-9,-94,-127,-94,-67,32,79,24,30,1,11,93,-90,-66,14,-45,-52,-51,-127,-127,58,45,-53, -29,88,27,49,-20,74,115,-127,-2,29,127,8,-127,30,-66,-56,93,17,-41,47,20,-55,-127,64,24,-110,-98,106,28,-127,-23,-88,-127,53,52,81,-127,2,20,-3,-127,-127,127,-58,-70,-2,-114,-118,89,127,-60, -18,40,13,-125,46,-6,11,-95,31,6,-15,-17,-80,34,-33,-43,-11,18,-127,-34,-9,-55,-45,23,-25,-76,-22,-65,-11,-79,-97,-59,-55,7,55,-2,17,-12,-10,127,-34,6,17,-16,-34,-69,-111,-97,-43,18,-12, 
  /* [0][1][][] */ -6,111,33,-100,-20,48,-71,-40,-46,-46,-10,35,-80,90,12,-18,118,7,-68,-1,49,-127,-126,37,45,-69,-103,25,0,-93,-39,-76,-39,0,-65,57,-88,-42,5,32,66,70,2,-54,-60,14,-41,-4,52,37,-23, 104,109,127,36,24,127,103,-98,-127,80,58,22,-79,127,-127,-23,127,127,-8,17,127,-81,-10,127,127,-95,-90,127,7,-29,41,-127,-84,43,11,127,-116,-127,127,-26,51,91,-11,-127,-127,81,-98,-35,127,56,-127, 10,71,-10,-86,30,11,-58,-19,-41,-41,-27,58,-29,57,12,0,51,-6,-34,-7,-5,-69,-92,-19,-11,34,-80,-5,17,-69,-27,-68,2,26,-4,-16,-56,-9,-3,38,27,109,-18,-42,-93,-4,34,13,-29,36,-10, 
  /* [0][2][][] */ 72,-32,-15,-28,113,18,-94,-99,2,35,-31,127,-37,-1,-44,-46,35,50,-82,97,-9,-15,11,13,5,-70,-127,-60,54,9,-110,-46,10,92,107,-54,-28,-34,18,70,24,-108,-79,5,-15,21,-115,-93,-22,-45,-49, 127,127,-12,-31,-8,8,-59,-110,-90,127,-23,101,-116,72,-123,-127,35,112,-62,127,12,-8,25,48,89,-119,-36,111,127,-45,9,6,-17,127,127,-29,-32,-84,-20,-31,74,-86,-64,22,17,127,-78,-36,29,-50,-80, 30,-3,-6,-53,127,-5,-127,-26,-1,23,-14,45,-17,21,-71,-12,9,30,-59,48,-14,-29,-35,-12,22,-20,-99,-38,30,12,-93,-32,-17,46,47,-40,1,-3,-12,75,32,-56,-70,-10,-11,-17,-75,-86,-51,-13,17, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant18_scale = { 51, { 0.0043630329892039299, 0.0029625366441905499, 0.0067030098289251328, 0.0039119524881243706, 0.009007585234940052, 0.0050584478303790092, 0.0068794772960245609, 0.0033019902184605598, 0.0035908797290176153, 0.0059501365758478642, 0.0091558536514639854, 0.0039682849310338497, 0.0028216056525707245, 0.0027846391312777996, 0.0042867190204560757, 0.0046162293292582035, 0.0039768088608980179, 0.0039323475211858749, 0.0033550274092704058, 0.0044454196467995644, 0.0065402681939303875, 0.0040859067812561989, 0.0046803993172943592, 0.0049203629605472088, 0.0039190920069813728, 0.0028971536085009575, 0.0041640130802989006, 0.00688179861754179, 0.0056777806021273136, 0.0046247821301221848, 0.002620283979922533, 0.0042076618410646915, 0.0030766439158469439, 0.0049235625192523003, 0.0066363890655338764, 0.0071256929077208042, 0.0041383649222552776, 0.0045387791469693184, 0.0075777061283588409, 0.0051944330334663391, 0.0077824248000979424, 0.0039414521306753159, 0.0087747257202863693, 0.0075627756305038929, 0.0035774384159594774, 0.0059275683015584946, 0.0021468731574714184, 0.0031417417339980602, 0.0058396677486598492, 0.0039864196442067623, 0.0027513219974935055, } };
const TfArray<51, int> quant18_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 3 };
const ALIGN(16) int32_t tensor_data19[51] = { -4131, 9500, -6065, -8488, 20018, -1993, 14026, 15553, 18453, 13290, 16681, 255, 17576, -6590, 8628, 4200, 11866, 9857, -2045, -14523, 35999, 5411, 3108, 1559, 13009, 15, 20719, 25480, 5567, 30443, -31575, 40234, -5813, 12052, 28729, 29727, -3552, 18179, 2043, 16552, 34594, -13809, -9331, 37523, -1524, -8119, -467, 6497, 12738, 9340, 21684, };
const TfArray<1, int> tensor_dimension19 = { 1, { 51 } };
const TfArray<51, float> quant19_scale = { 51, { 5.8751797041622922e-05, 7.2157818067353219e-05, 4.9111171392723918e-05, 8.3300852566026151e-05, 3.7683581467717886e-05, 4.7438417823286727e-05, 3.592330904211849e-05, 3.3754819014575332e-05, 5.3494542953558266e-05, 4.2991712689399719e-05, 4.5325690734898672e-05, 4.4407046516425908e-05, 3.4791457437677309e-05, 0.00010620713146636263, 2.7264133677817881e-05, 6.0319605836411938e-05, 4.0346454625250772e-05, 4.7874989832052961e-05, 7.2351002017967403e-05, 6.8398432631511241e-05, 5.1340943173272535e-05, 4.4544649426825345e-05, 4.2560845031403005e-05, 5.8732068282552063e-05, 4.78620313515421e-05, 5.8761139371199533e-05, 3.5741853935178369e-05, 4.1717976273503155e-05, 5.9866833908017725e-05, 4.906317190034315e-05, 5.1559229177655652e-05, 4.5177217543823645e-05, 5.5423955927835777e-05, 4.1269031498814002e-05, 4.159699528827332e-05, 3.4935703297378495e-05, 3.4408716601319611e-05, 4.7177556552924216e-05, 4.781634925166145e-05, 4.2592615500325337e-05, 3.2661038858350366e-05, 5.9776542912004516e-05, 6.0388698329916224e-05, 2.874528945540078e-05, 5.6827546359272674e-05, 5.3311403462430462e-05, 4.5777396735502407e-05, 5.7210170780308545e-05, 7.0130503445398062e-05, 7.2198075940832496e-05, 5.4209718655329198e-05, } };
const TfArray<51, int> quant19_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[51*1*1*51] = { 
  /* [0][0][][] */ 23,5,127,58,6,-58,17,-16,-2,-27,71,27,20,-1,53,4,73,8,-1,47,-24,-20,-26,12,-84,33,48,2,3,11,-18,29,-7,24,-13,-40,26,8,-1,-5,-45,-10,34,-2,-46,-15,-37,0,-6,17,13, 
  /* [1][0][][] */ 37,14,7,-42,3,8,-25,-51,-41,30,52,6,48,-37,31,-60,17,16,-28,-80,3,-20,127,-32,54,-45,7,41,34,-50,27,64,74,8,-40,-21,24,32,4,-17,-47,31,-16,-66,-47,29,21,-18,10,-42,-33, 
  /* [2][0][][] */ 66,82,-4,27,19,2,127,15,-58,-42,44,-10,-16,34,29,-5,-4,64,-4,-76,-6,-2,-19,40,73,-28,121,106,-60,-16,15,-29,-38,-14,-78,-5,-25,63,58,126,47,18,39,-29,-25,-25,29,-26,-43,45,-55, 
  /* [3][0][][] */ -5,27,1,4,-12,-66,21,1,-53,127,-8,28,-56,-11,3,6,1,24,42,14,13,-27,7,-19,8,-3,69,38,28,30,-6,71,21,-31,-14,-22,-22,31,40,-17,72,-17,59,-16,-65,5,10,9,6,-22,2, 
  /* [4][0][][] */ -24,-17,-35,-49,-20,-57,-57,14,-49,-3,-2,-26,26,19,29,42,28,9,-20,63,-19,-32,-9,-7,23,-36,53,12,20,58,-6,127,-7,15,21,10,-6,18,-3,55,-7,-30,-29,9,-10,9,-7,-2,9,-16,7, 
  /* [5][0][][] */ -7,-15,19,17,27,19,79,7,-18,92,-17,-53,13,28,15,19,-69,0,-45,127,12,20,97,-29,-6,39,2,7,-39,6,-5,0,2,-2,8,10,101,-4,-4,15,-36,6,-3,45,-34,-33,29,13,-46,-12,-32, 
  /* [6][0][][] */ 75,-14,37,-27,-3,109,36,-3,30,19,-41,-37,-24,37,-7,-42,18,-46,21,10,-35,31,-12,53,-33,-8,-2,44,-75,38,-10,-84,58,-3,6,26,-17,-9,-24,-5,11,1,10,1,-63,-9,8,-127,45,-44,86, 
  /* [7][0][][] */ 114,9,-16,-14,-24,125,52,61,101,-63,87,-72,-29,-13,-21,-63,-47,62,-34,126,20,44,18,-98,3,-44,127,11,11,-49,-33,-30,-82,-77,-58,35,-1,103,-19,-43,65,-21,10,-28,-69,30,-69,64,43,-27,-44, 
  /* [8][0][][] */ 37,37,-89,-35,63,-21,-8,-120,15,-17,4,78,10,-68,74,-27,-127,-28,-44,35,-6,62,23,-79,-79,-17,-34,43,7,29,21,100,-5,-19,-2,6,-8,72,21,67,75,-60,-50,-100,33,26,80,22,-68,-37,4, 
  /* [9][0][][] */ 62,23,30,-19,-19,-75,-6,-8,-30,-68,-18,81,36,68,-49,1,6,83,-29,-73,30,-122,-31,-18,-31,59,-118,19,-68,-22,-30,120,27,61,25,43,5,-18,-29,17,-60,30,10,-13,-24,-2,50,-31,127,67,-65, 
  /* [10][0][][] */ 41,30,-59,-6,5,21,127,-53,55,-6,34,29,61,5,-12,-70,3,-31,31,52,8,-16,39,54,-19,-110,-24,78,37,7,-24,-44,33,-38,-30,-63,14,-26,-49,-18,2,17,9,-33,-15,18,2,-11,-40,-54,-40, 
  /* [11][0][][] */ 52,37,16,127,-4,9,-32,-15,45,91,30,-38,-11,48,-22,109,62,-75,36,-44,16,-8,-4,-18,-42,-19,100,47,-41,-23,70,6,-42,12,-37,-24,-29,37,1,75,-81,-8,6,15,20,-42,26,30,-47,-41,80, 
  /* [12][0][][] */ 98,21,127,-115,62,24,65,-44,-64,56,-29,-24,2,39,2,1,110,-34,-38,-2,-68,4,-24,116,-45,-60,-65,-30,-23,-48,25,-89,-46,-1,35,-41,-13,-21,-82,-13,56,-3,-60,35,-40,-24,29,48,0,36,19, 
  /* [13][0][][] */ 37,42,-7,-44,21,42,-15,-21,-31,31,8,19,-11,19,12,-16,44,-13,0,20,-14,-7,-3,-21,17,-8,34,38,-18,-11,1,-47,-27,-62,-63,-9,-13,-15,10,32,18,3,5,10,14,-33,43,-29,127,-16,-62, 
  /* [14][0][][] */ -14,46,100,-31,67,47,55,-71,-20,-41,12,91,-25,-64,1,11,-33,-82,-35,-78,12,74,32,-78,73,100,1,42,-48,56,16,64,48,-22,93,107,27,-127,-8,-28,18,-14,85,-71,37,20,-77,43,-4,-8,66, 
  /* [15][0][][] */ 31,-14,-4,-26,-21,-43,2,12,35,18,-19,68,26,35,-17,21,8,-16,-51,0,37,-40,9,13,21,76,11,3,54,-40,11,-65,-17,-16,-27,-30,12,55,-38,127,-18,-14,37,-17,-4,-30,-1,-12,-6,-12,-10, 
  /* [16][0][][] */ 3,40,32,4,-31,-28,88,-39,-42,103,22,-30,55,56,7,-59,100,-41,-35,97,-15,6,-95,25,31,5,71,59,-27,6,23,-7,-28,-31,-58,-10,34,30,-19,-127,-2,19,23,-19,-56,3,103,-51,15,26,-37, 
  /* [17][0][][] */ 13,-10,-5,75,7,17,-26,4,1,-17,-32,-4,64,-19,31,-12,-46,51,37,-56,-42,127,114,7,3,12,-70,27,3,-43,43,95,2,-21,39,-58,-101,-2,-87,112,-12,-34,21,65,2,90,-104,13,-23,-1,-38, 
  /* [18][0][][] */ -54,23,13,-15,-46,-91,52,18,28,91,19,29,-27,46,22,-127,25,0,-21,71,7,60,-3,-7,3,-42,57,-10,66,15,-19,36,-32,-1,-54,-67,-33,-27,-9,23,-30,85,11,3,56,23,31,-46,16,71,-11, 
  /* [19][0][][] */ -18,-29,-29,32,-34,10,31,17,10,-31,7,27,127,16,-50,27,-96,53,-28,34,-13,-47,16,-5,28,13,77,35,40,36,38,-2,-34,-27,30,27,-14,6,-11,44,58,-24,9,16,45,-11,5,16,36,-24,-33, 
  /* [20][0][][] */ -42,9,-65,16,0,-4,-91,8,38,-24,-24,-36,65,-5,1,-39,97,-16,-48,-9,-5,35,-91,-3,-2,-11,-23,90,-88,21,25,-15,29,-40,-16,-45,127,69,3,52,1,-26,-31,-2,-56,-2,-12,-35,-26,-20,1, 
  /* [21][0][][] */ -27,32,-70,-25,10,-60,-86,20,-18,1,127,74,0,22,63,62,7,-10,45,-27,-24,-12,-50,37,-13,25,-73,22,69,-83,11,92,22,-30,-4,34,49,-36,49,-7,-31,-31,43,-32,-11,-12,14,6,47,32,62, 
  /* [22][0][][] */ -15,7,76,16,15,-11,27,-38,47,2,0,-24,-12,-8,-26,85,-20,-17,-7,-18,24,39,62,38,-25,-70,127,9,9,-45,46,-61,82,33,10,-37,49,-10,7,-19,-8,2,-31,29,13,-58,-14,-16,-2,-31,-24, 
  /* [23][0][][] */ 108,31,58,16,1,0,3,-64,-78,-15,-27,18,-10,35,-44,-53,-34,5,-21,27,-51,-9,-12,4,19,-32,26,93,50,36,26,1,-26,-32,-51,6,127,7,10,-9,9,5,4,-13,-27,-12,1,0,23,2,42, 
  /* [24][0][][] */ 9,9,-42,-58,87,-53,-76,15,-83,38,64,-60,56,30,39,28,-97,-86,36,117,-46,11,-60,29,-19,31,0,27,79,-89,92,-48,-29,-58,-94,-39,127,-20,-40,79,-104,-66,127,39,9,39,56,-9,82,-51,27, 
  /* [25][0][][] */ 77,9,-32,-52,-8,2,93,-41,26,-49,56,-42,-23,-8,41,53,-2,-32,-20,-30,-18,4,35,-39,17,16,12,14,40,16,-4,37,24,-13,-52,-10,64,11,91,21,0,-14,11,-26,44,-21,-127,22,69,26,-48, 
  /* [26][0][][] */ 46,-8,-49,6,38,-1,-12,14,-6,47,-10,64,5,5,57,54,30,1,68,10,-10,51,4,-31,-51,14,-62,0,50,36,46,54,-127,-48,20,-16,-33,105,-91,-71,-52,-77,85,-17,0,90,-15,-23,74,-34,-35, 
  /* [27][0][][] */ -86,7,-70,-15,81,-120,-73,79,-13,33,82,93,-66,42,3,13,47,-44,-19,5,4,-7,-9,-14,31,24,15,70,9,9,-32,-10,17,81,50,-127,-40,15,87,-26,-57,32,-22,-122,-51,19,-35,59,-21,-38,-71, 
  /* [28][0][][] */ -3,-12,36,75,48,-37,-2,56,-25,11,34,25,-2,1,4,-16,47,28,24,-26,25,12,-41,-7,127,-27,-79,23,11,60,-17,20,-39,-11,-25,-13,43,-1,-8,0,-58,7,15,-35,-5,8,24,9,-28,-23,-21, 
  /* [29][0][][] */ -51,-44,-49,13,45,11,91,-51,-90,-32,3,-40,68,31,57,0,0,-27,126,-10,60,-69,1,-119,-15,-25,-24,-7,12,-20,-67,-127,-9,-38,37,-1,-20,-51,13,15,52,8,-55,10,-69,-58,-9,-45,-39,7,26, 
  /* [30][0][][] */ 20,44,78,-75,16,127,34,8,52,114,-2,-56,-35,-13,55,-85,4,-34,48,-66,-1,19,48,-104,26,-50,64,69,-37,71,-35,47,-15,-37,-115,34,43,23,118,-1,-37,99,11,123,80,-91,110,-4,8,30,94, 
  /* [31][0][][] */ 31,-28,-40,-31,-20,-127,-57,-36,52,-5,-3,-31,-33,-5,-46,-12,-27,41,23,21,-13,-40,-7,16,-9,55,7,2,-91,-6,-40,-9,-50,-1,-14,3,60,-19,14,7,40,-9,1,-33,44,42,24,-49,-9,40,-42, 
  /* [32][0][][] */ -64,22,-50,-26,92,71,-39,-73,10,93,58,-25,20,66,-16,-109,-16,-98,-33,-56,6,0,60,-22,-52,90,55,44,74,10,83,-16,127,-71,-29,59,72,28,-11,-52,-8,21,-8,-10,9,-9,-4,4,28,23,13, 
  /* [33][0][][] */ -65,30,-18,13,-13,-19,-44,35,-33,32,47,-20,30,-15,-50,-31,41,1,-25,17,18,0,127,112,8,13,114,11,33,-8,16,-30,-27,-39,-45,-7,27,-18,-33,7,28,1,0,-19,0,4,-84,-8,16,-70,0, 
  /* [34][0][][] */ -93,-33,-95,20,-16,-127,-20,-23,-35,-82,10,-15,-62,-10,7,10,46,-124,7,20,9,32,4,34,5,53,-75,-16,3,9,46,8,-46,4,19,88,-43,57,9,30,-1,16,11,29,11,6,-53,-52,59,28,-5, 
  /* [35][0][][] */ 5,43,86,29,-14,-11,83,-63,-26,50,39,-66,30,-66,20,-44,-50,28,11,-18,-36,-30,-47,-29,12,-44,26,11,-53,73,-8,-36,-23,-73,-73,-25,-52,-13,-13,127,-20,29,10,-55,-34,-36,13,80,93,-51,6, 
  /* [36][0][][] */ -6,32,58,-106,-41,-41,83,95,-76,37,60,108,26,119,24,-25,17,-56,20,16,-58,12,26,-27,-52,18,48,32,4,35,27,-94,10,-46,-54,-30,22,-11,71,7,109,30,5,-34,-27,-30,-9,-34,-127,87,99, 
  /* [37][0][][] */ 103,-17,32,7,5,-33,32,12,78,-18,-29,34,8,-34,31,-7,-78,34,-46,-4,44,90,-127,-4,69,46,-118,-66,-69,4,39,65,24,31,-45,44,36,-44,-12,-97,70,38,32,-41,-24,-15,-66,-63,37,-14,-11, 
  /* [38][0][][] */ 10,-27,50,10,-43,59,23,-46,13,-49,-7,-19,-45,-62,-15,-4,-72,32,126,-65,-8,67,-25,-19,-30,34,2,10,102,-16,127,86,28,-27,-24,-14,50,10,-8,70,19,23,3,63,24,-11,58,-35,-69,-26,-73, 
  /* [39][0][][] */ -24,46,16,-34,49,-72,7,6,-84,19,-1,51,44,-27,5,-25,1,-29,127,24,10,-61,10,3,1,-13,4,54,-12,-45,27,-88,-38,29,-52,43,43,-6,6,2,34,-10,40,-60,-39,45,-4,25,20,39,-72, 
  /* [40][0][][] */ -4,10,-16,29,67,57,-105,-125,-6,-67,-14,-30,-10,42,11,-75,25,48,-17,38,63,27,14,-4,37,12,-11,-26,24,-49,17,-84,25,-26,-85,-24,-19,-32,-83,36,63,7,-34,71,20,30,-6,-85,0,83,127, 
  /* [41][0][][] */ -43,11,22,30,-17,60,86,-56,-69,41,10,-25,-115,-35,11,127,33,-1,49,41,21,-40,-19,-21,40,-41,-36,-74,79,-15,38,-20,26,7,-18,-32,-60,28,21,-9,-19,-6,5,5,44,45,88,-26,86,50,25, 
  /* [42][0][][] */ -50,-9,31,3,32,20,10,24,-26,-2,1,-12,-18,127,-12,-17,-36,59,-58,55,31,8,22,-49,50,111,85,67,9,76,-1,10,27,-48,-69,-63,-8,6,18,7,31,-5,35,21,-11,8,-19,-9,30,-12,-24, 
  /* [43][0][][] */ 20,15,-2,-21,-3,60,92,-113,2,22,48,5,-112,64,-10,-72,-1,-26,-50,-33,36,118,-25,106,14,107,70,-6,-21,-40,-6,-72,-127,49,-27,9,-12,37,4,-48,-17,6,-6,-39,-22,-64,36,-43,-80,-20,-31, 
  /* [44][0][][] */ 31,54,-17,30,-30,127,59,52,-72,-13,-56,-55,-46,-83,31,7,-58,-17,29,-4,-34,-17,12,-20,42,97,-9,47,-21,-94,34,-26,23,16,63,-61,17,-14,29,-88,35,52,94,-34,54,-4,-40,25,48,3,53, 
  /* [45][0][][] */ 20,26,-33,35,-35,-6,-72,8,-7,73,40,11,-11,37,-12,-16,-52,120,-27,55,23,31,-3,60,27,9,47,27,24,-27,45,19,30,-55,-9,-48,-61,-4,22,43,27,-19,27,5,-13,-23,-6,-54,53,68,127, 
  /* [46][0][][] */ -63,38,67,-26,-90,-50,24,73,-58,23,64,-54,-2,16,-27,-35,-81,-73,59,32,6,41,-20,97,6,20,-26,15,6,1,-3,-29,127,-43,-41,4,19,55,60,90,36,16,-13,15,-27,-38,28,6,118,-81,-42, 
  /* [47][0][][] */ -15,-29,-64,-46,75,-78,47,-18,-71,-72,46,68,58,-106,3,31,-36,127,45,-23,0,4,-42,85,-36,42,-17,-66,-12,31,-61,7,-15,29,69,32,58,-50,6,85,-123,10,-9,27,-28,65,9,-69,19,-51,25, 
  /* [48][0][][] */ 3,19,-7,-1,17,-17,31,-13,-10,-18,-4,-17,-23,43,5,49,-24,-20,-17,-30,-17,-3,76,-25,4,7,-32,-11,7,8,21,-8,-15,-12,-33,-9,16,-23,-8,-45,-11,127,8,-35,-7,8,63,-37,45,-10,17, 
  /* [49][0][][] */ -46,87,-8,14,-58,-114,127,-15,51,-33,17,9,-31,1,-10,-45,-35,-102,21,3,-108,-36,-1,-13,-71,-32,31,94,-16,-44,96,-12,-17,7,-38,-11,-54,-4,29,26,12,24,42,18,-54,7,41,13,21,-23,78, 
  /* [50][0][][] */ 41,19,-103,28,-127,-55,31,-9,-28,-3,-7,-43,50,-18,19,-99,27,-3,48,-55,21,7,55,16,21,33,-1,72,39,-35,-64,-37,-57,4,-26,-32,-31,45,-11,-25,84,-15,86,60,-22,-24,4,-17,48,65,-13, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant20_scale = { 51, { 0.0034787328913807869, 0.0042725121602416039, 0.0029079050291329622, 0.0049322987906634808, 0.0022312698420137167, 0.002808860270306468, 0.0021270429715514183, 0.0019986452534794807, 0.0031674474012106657, 0.0025455679278820753, 0.002683764323592186, 0.0026293706614524126, 0.0020600252319127321, 0.0062885950319468975, 0.0016143274260684848, 0.0035715638659894466, 0.0023889404255896807, 0.0028347100596874952, 0.0042839511297643185, 0.0040499167516827583, 0.0030399314127862453, 0.0026375183369964361, 0.0025200559757649899, 0.0034775647800415754, 0.0028339426498860121, 0.0034792860969901085, 0.0021162990015000105, 0.0024701491929590702, 0.0035447550471872091, 0.0029050630982965231, 0.003052856307476759, 0.0026749731041491032, 0.0032816892489790916, 0.0024435666855424643, 0.0024629856925457716, 0.002068566158413887, 0.0020373628940433264, 0.002793414518237114, 0.0028312378562986851, 0.0025219370145350695, 0.0019338818965479732, 0.003539408789947629, 0.0035756549332290888, 0.0017020277446135879, 0.0033647967502474785, 0.0031566035468131304, 0.0027105100452899933, 0.0033874523360282183, 0.0041524735279381275, 0.0042748958803713322, 0.0032097934745252132, } };
const TfArray<51, int> quant20_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[51] = { -107, -228, -5234, -3365, 32866, -10143, -2560, 19900, -139, -10596, -7358, 40130, -3813, -4830, -1909, -13920, -1585, -1574, 612, -723, 27690, -77, -557, -2937, -760, 36981, -8429, -2597, 37793, -936, -2672, -389, -262, 27094, 2542, 22799, 2009, 17, 33531, -643, -2097, -1911, -4711, 23988, 21580, -8762, -242, 31461, -506, -1, -2038, };
const TfArray<1, int> tensor_dimension21 = { 1, { 51 } };
const TfArray<51, float> quant21_scale = { 51, { 0.00011237894068472087, 0.00010646037844708189, 0.00014317235036287457, 6.956142169656232e-05, 4.1141473047900945e-05, 8.1899626820813864e-05, 0.00012010752107016742, 9.6754542028065771e-05, 8.3010891103185713e-05, 0.00010138232028111815, 9.5611292636021972e-05, 3.9220540202222764e-05, 0.00011707004887284711, 7.5386793469078839e-05, 9.7733565780799836e-05, 6.5317908592987806e-05, 0.0001081597656593658, 6.8123139499220997e-05, 0.00010929611016763374, 0.00010903835209319368, 3.4694694477366284e-05, 0.00011138145782751963, 0.00016617463552393019, 9.4361937954090536e-05, 9.7876021754927933e-05, 6.1355982325039804e-05, 0.00013351945381145924, 8.354206511285156e-05, 6.1604972870554775e-05, 4.9850121285999194e-05, 0.00016613310435786843, 0.00017502025002613664, 0.00012246787082403898, 5.0730574002955109e-05, 8.380759391002357e-05, 9.6956231573130935e-05, 0.00012767022417392582, 0.00011033413466066122, 4.4693744712276384e-05, 0.00011974596418440342, 8.7117157818283886e-05, 0.00011376477050362155, 0.00011580565478652716, 6.6684580815490335e-05, 5.2815063099842519e-05, 3.8166668673511595e-05, 6.3020503148436546e-05, 4.7002078645164147e-05, 0.0001628105528652668, 9.5089082606136799e-05, 8.1036996562033892e-05, } };
const TfArray<51, int> quant21_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*51] = { 
  /* [0][0][][] */ -19,93,-24,3,15,11,-19,3,76,14,2,11,-12,13,42,73,-25,-24,-40,-36,-21,22,-7,-6,39,12,55,-55,20,-13,-7,-3,-23,53,-55,-42,-37,-16,-3,-31,-6,-21,2,-24,-51,3,-21,-31,-3,-51,-15, 127,-32,127,127,-127,22,9,1,41,70,20,-127,40,21,127,67,46,115,-17,26,-75,43,21,46,127,-124,11,-11,-89,77,-18,127,-22,-84,127,-28,48,-12,-71,75,68,-127,42,-30,-11,108,127,-106,6,52,19, 66,30,7,68,-52,9,-31,-5,127,44,46,-65,-1,31,3,127,26,25,-30,4,-127,22,20,21,46,-46,66,-40,-1,63,-3,7,-33,17,-55,-88,6,-26,-47,21,2,-96,-71,-58,-96,16,54,-79,29,-17,-15, 
  /* [0][1][][] */ -20,26,4,-12,-29,-1,-46,-5,-30,-26,-16,8,12,17,-21,29,-16,-1,-5,8,-65,-43,-14,-13,-43,-1,-5,7,3,55,-17,-32,-10,-108,-7,53,-17,-43,21,-8,21,-28,97,-43,-21,68,13,-76,-29,-11,-3, -13,-114,100,112,-68,73,127,-127,-25,64,94,-72,127,127,33,54,127,127,127,127,-27,127,127,24,39,-82,-19,67,-111,30,127,0,127,-75,122,-127,127,127,-89,127,127,96,127,-127,-40,119,112,-41,127,127,127, -5,-3,28,35,-70,39,43,-18,-59,8,30,-29,40,53,-40,62,46,73,15,108,-103,-12,43,-20,-67,-64,6,127,-127,127,16,19,37,-127,-5,1,56,41,-41,74,64,40,-95,-86,-21,127,28,-73,55,49,52, 
  /* [0][2][][] */ -1,127,-12,-47,-55,79,-18,23,87,-2,-108,-27,-18,-25,7,64,-21,10,-29,-34,-11,1,-33,-13,-3,-8,76,-60,32,-34,1,-15,-23,5,3,-72,-24,2,-4,-30,-14,-1,-37,58,-92,-18,-47,-74,-18,-7,8, 9,-44,31,-48,-49,127,115,-63,-10,127,127,-79,17,8,-43,69,-13,-40,76,-40,-122,16,-23,127,-45,-127,57,73,-121,82,6,27,44,-108,44,-28,-43,-12,-127,-39,-23,49,-52,-32,-59,74,11,-96,1,-25,60, 22,11,-15,-71,-85,99,44,-24,109,59,57,-48,-31,-6,21,113,-13,-13,42,-38,-92,-10,-41,68,-33,-71,127,45,-29,47,3,-22,-27,-31,39,-52,-50,21,-50,-58,-9,68,25,49,-127,-16,-32,-127,-39,25,23, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant22_scale = { 51, { 0.0071012824773788452, 0.0067272852174937725, 0.0090471338480710983, 0.0043956213630735874, 0.0025997506454586983, 0.0051752789877355099, 0.0075896549969911575, 0.0061139687895774841, 0.0052455002442002296, 0.0064064003527164459, 0.0060417260974645615, 0.0024783657863736153, 0.0073977159336209297, 0.0047637298703193665, 0.0061758337542414665, 0.0041274717077612877, 0.0068346704356372356, 0.0043047359213232994, 0.006906476803123951, 0.0068901889026165009, 0.0021923752501606941, 0.0070382510311901569, 0.010500659234821796, 0.005962778814136982, 0.0061848354525864124, 0.003877115435898304, 0.0084371622651815414, 0.0052790655754506588, 0.0038928496651351452, 0.0031500544864684343, 0.01049803476780653, 0.011059618555009365, 0.0077388067729771137, 0.0032056907657533884, 0.0052958442829549313, 0.0061267134733498096, 0.0080675464123487473, 0.0069720698520541191, 0.0028242203406989574, 0.0075668082572519779, 0.00550497742369771, 0.007188853807747364, 0.0073178182356059551, 0.0042138323187828064, 0.003337410744279623, 0.0024117711000144482, 0.0039822976104915142, 0.002970085246488452, 0.010288081131875515, 0.0060087274760007858, 0.0051207691431045532, } };
const TfArray<51, int> quant22_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[51] = { 4325, 17417, 34721, 2586, 4121, 5367, 32747, 15794, 5637, 27551, 6248, -9454, -1801, 5144, 9398, 2607, 7527, 28356, 11761, 331, -571, 3888, 1345, 36714, -9805, 29395, 32018, -4903, 49896, 4496, -23540, -15821, 19100, 6082, -20207, 43705, 11062, 3711, 27939, 4759, -1806, 9180, -7536, 5282, 14622, -19596, 19545, 10749, 15435, -16032, -8775, };
const TfArray<1, int> tensor_dimension23 = { 1, { 51 } };
const TfArray<51, float> quant23_scale = { 51, { 5.2326242439448833e-05, 5.5470856750616804e-05, 3.2708507205825299e-05, 0.00012506547500379384, 6.8882414780091494e-05, 4.3971340346615762e-05, 3.7991445424268022e-05, 5.03415176353883e-05, 6.2592604081146419e-05, 3.0981711461208761e-05, 0.00012104195775464177, 8.0429555964656174e-05, 9.4474780780728906e-05, 6.4723331888671964e-05, 6.2753846577834338e-05, 4.7436504246434197e-05, 4.7785175411263481e-05, 4.5377313654171303e-05, 4.5526005123974755e-05, 9.18261066544801e-05, 0.00011256751167820767, 7.4757095717359334e-05, 5.5666645494056866e-05, 5.4546584578929469e-05, 6.1495433328673244e-05, 4.2925777961499989e-05, 3.0741397495148703e-05, 6.645581015618518e-05, 3.5608991311164573e-05, 7.2872775490395725e-05, 8.8609849626664072e-05, 0.00010372242832090706, 5.3770745580550283e-05, 8.0871315731201321e-05, 8.6458734585903585e-05, 4.0767339669400826e-05, 7.3453746153973043e-05, 9.8718890512827784e-05, 7.8924436820670962e-05, 4.5077493268763646e-05, 3.9937505789566785e-05, 8.7324537162203342e-05, 7.0667367253918201e-05, 4.8181871534325182e-05, 5.7460809330223128e-05, 0.00011888716835528612, 7.4045412475243211e-05, 7.2627612098585814e-05, 4.4765805796487257e-05, 6.0885013226652518e-05, 5.8012694353237748e-05, } };
const TfArray<51, int> quant23_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[51*1*1*51] = { 
  /* [0][0][][] */ -17,-42,-24,-11,27,23,55,22,13,-8,-114,83,-27,0,-40,28,-47,-43,125,-28,77,-53,8,-52,104,49,-58,26,-96,44,-36,5,-2,5,40,-5,20,26,56,-58,65,-8,21,30,-49,21,127,43,-105,-87,-54, 
  /* [1][0][][] */ -68,115,-127,-5,121,87,-16,-10,-57,85,86,45,-8,-67,20,24,-31,-13,8,-6,-86,-13,-100,-7,-58,48,-89,-20,-64,-59,57,-53,5,18,-3,-40,28,38,-72,-10,-21,-22,0,11,105,1,-87,25,57,118,-80, 
  /* [2][0][][] */ 12,58,52,7,-127,40,21,17,10,-22,-14,-15,-41,-59,-38,-50,21,7,10,-55,-32,76,-21,-38,110,-38,-12,-46,-1,17,-34,-41,-18,23,-27,-10,105,-41,16,28,35,5,-29,18,14,25,114,-23,-10,-34,23, 
  /* [3][0][][] */ -11,-29,-17,40,53,27,127,-6,-26,-4,-3,-6,9,-16,0,2,35,3,27,-25,-6,33,3,-42,-9,-11,3,-17,-35,40,-4,-6,-5,-8,-20,6,-42,50,3,-31,8,-17,-33,21,-15,16,-25,13,-31,-41,38, 
  /* [4][0][][] */ -60,-60,-61,-11,-12,-5,87,58,65,-36,50,10,-25,20,82,13,-80,127,-64,-48,-33,114,16,23,19,-45,-77,19,-5,-21,15,28,19,-56,44,-22,76,-5,-43,-39,-15,10,-78,-10,83,25,-22,114,109,32,-83, 
  /* [5][0][][] */ -11,-12,44,-14,42,56,-10,-55,18,16,-31,9,8,-11,-8,7,28,-51,1,52,-2,2,-38,127,17,4,-8,-1,25,8,-31,10,-8,-14,-18,-33,13,-9,7,18,43,10,22,-24,-10,3,-40,85,-31,-9,24, 
  /* [6][0][][] */ 113,-26,25,-76,-44,127,102,-22,-19,-29,-54,-12,-22,0,-29,-13,-55,-33,-21,8,2,-46,-47,48,-31,2,1,14,-46,31,5,79,-52,1,-80,-9,6,-9,-14,-2,-38,32,-6,56,-2,2,-11,37,-49,22,-58, 
  /* [7][0][][] */ -127,-67,31,15,58,25,2,11,-40,-12,16,78,74,-48,5,-57,26,9,-29,-46,89,59,5,-69,-26,19,64,101,-50,11,65,8,-22,10,-92,-7,95,55,-27,-82,14,39,-7,-81,-71,8,-14,9,28,-73,19, 
  /* [8][0][][] */ 61,-57,15,31,38,-62,14,42,-65,-32,-59,25,42,15,13,-25,29,-17,-50,-17,34,0,-16,-14,2,-21,-33,-41,-43,61,-45,52,-11,26,12,-31,24,-18,24,19,-52,3,-21,-21,32,43,127,5,-36,8,-33, 
  /* [9][0][][] */ 20,102,-21,30,-80,-31,8,11,3,61,56,-66,38,-124,-43,26,-26,-37,18,-38,79,-7,-58,-70,-73,39,-12,67,127,89,-4,1,60,-12,40,5,-55,41,60,-55,-3,96,-24,-71,-97,12,10,9,-24,-1,-8, 
  /* [10][0][][] */ -16,-7,11,-27,53,39,-12,-32,-37,-3,-25,-22,-17,-9,24,-21,7,-7,-27,5,-33,-4,10,-37,-34,0,-25,-7,127,45,-10,35,18,-7,-18,27,-16,7,-34,-62,-33,0,-5,-6,-5,-22,70,-1,18,-17,-12, 
  /* [11][0][][] */ 6,27,-62,127,82,15,-40,-41,-16,-27,-105,-5,-23,-45,-19,-26,-26,30,-44,-37,41,-43,102,29,107,-7,-58,39,63,59,34,84,34,57,5,-59,-101,-25,-36,-75,-91,-34,79,50,107,-11,22,78,42,-23,-14, 
  /* [12][0][][] */ 4,-13,13,-28,31,127,39,-6,-2,-49,8,63,31,-18,10,-1,7,-27,-10,42,15,-23,-31,-14,-29,-5,7,-12,-7,-36,-4,-29,59,-51,19,-27,-14,8,-21,-5,-18,20,15,-7,58,-22,-41,30,18,-22,6, 
  /* [13][0][][] */ 7,-24,119,52,5,-46,-66,108,-4,-36,29,63,127,-25,-38,66,0,-26,6,84,-29,35,34,52,16,-22,-24,-66,-32,-40,-24,-101,-27,-81,42,-81,2,14,10,-50,96,-69,-22,-26,41,-63,11,57,14,-43,53, 
  /* [14][0][][] */ 30,10,40,-100,25,45,54,-24,-14,-17,-24,-68,30,19,-21,-120,-76,43,25,-21,-118,-83,7,45,116,77,21,-49,-106,43,56,-34,14,107,-109,1,-36,-6,-36,-25,90,42,65,71,-74,27,42,-127,21,8,107, 
  /* [15][0][][] */ -76,-119,-42,8,26,127,17,46,0,10,68,-5,7,-2,-7,42,108,-64,-38,-57,35,3,47,17,-5,-16,43,60,-65,71,-44,19,-31,-51,43,51,10,-51,-56,-25,61,52,2,72,32,-15,18,-24,-18,40,24, 
  /* [16][0][][] */ 42,-6,54,-54,6,32,-7,-4,25,-73,-64,7,-41,3,-36,-39,41,65,58,36,4,8,22,-21,22,8,-2,127,111,38,59,-49,34,1,-58,-43,0,21,-31,-6,-34,99,-58,74,-44,19,-10,-43,-99,8,-3, 
  /* [17][0][][] */ 4,13,-67,-61,-1,86,37,45,-47,-8,-14,-71,51,-31,27,15,-127,56,78,8,-100,-39,-35,82,12,55,-84,64,9,34,-58,19,-13,-3,-5,-41,31,28,-63,-87,-11,-41,27,-4,-111,-17,-42,61,-25,49,109, 
  /* [18][0][][] */ -30,40,-50,-25,2,-92,66,-54,-5,15,-46,-16,29,98,-16,24,0,-19,41,36,-39,112,-66,8,1,15,40,14,8,24,-22,-59,3,-91,18,-32,15,-4,-89,-74,-69,24,79,54,7,-23,64,-87,127,2,-7, 
  /* [19][0][][] */ 5,-8,-14,-1,-4,16,-15,-6,-3,-22,7,2,-25,8,-2,-1,-18,16,-34,-29,-2,-18,7,-3,13,127,84,23,7,30,-30,-22,33,4,-2,-8,-5,8,-10,-14,0,15,15,6,13,11,30,-5,5,10,45, 
  /* [20][0][][] */ 7,-9,34,3,-77,21,-5,-73,28,34,-48,-34,6,70,-31,26,-19,9,83,-5,5,-97,2,-12,-9,-46,52,32,7,51,-5,-4,-88,101,-31,31,-48,0,33,-18,21,-33,21,127,15,6,42,-4,-41,-37,-32, 
  /* [21][0][][] */ -3,-68,27,-14,16,-69,-21,-68,-1,44,15,9,-5,-79,-46,-22,-56,-57,1,-45,30,26,-17,-1,-15,-17,-47,7,-26,12,75,94,-10,-24,-27,52,34,46,32,51,11,-82,18,41,-17,19,58,39,127,32,45, 
  /* [22][0][][] */ -5,-21,63,25,7,-3,92,-39,60,-35,-9,19,-34,-4,3,-23,14,38,20,-1,18,-9,20,-19,3,-23,52,-79,39,30,-1,-8,22,39,-51,-26,-37,8,25,-16,-1,-12,127,6,-44,48,8,3,-2,39,4, 
  /* [23][0][][] */ 76,-68,70,-101,-11,-127,-1,-70,17,-16,52,28,-5,63,30,18,-42,-17,-38,-57,63,106,16,-18,4,4,-43,-53,116,-52,-69,55,-64,-17,-79,51,12,2,-120,-58,-22,13,16,-90,-25,25,-61,25,-87,-49,28, 
  /* [24][0][][] */ 1,42,16,8,-19,50,28,-12,14,1,39,27,1,44,-34,64,-9,-31,5,74,-5,-86,-43,126,-57,-3,-66,3,-73,120,-34,-67,127,-2,-30,-18,-63,-5,1,15,90,17,79,75,-96,13,28,2,7,-64,-19, 
  /* [25][0][][] */ 36,-18,-12,18,-127,5,-56,-26,-11,-41,8,-24,41,34,46,69,105,61,-67,-31,-6,-60,64,-69,-14,19,0,26,-64,10,-13,85,-53,-21,19,-55,-8,-68,-50,37,-33,-66,103,-67,-23,-48,90,94,123,-14,-57, 
  /* [26][0][][] */ 0,12,-44,-15,-6,-89,12,-14,21,26,-19,1,-75,-18,27,37,27,14,32,-72,6,-22,33,-66,-36,5,-7,12,-4,-57,14,16,-34,-43,-18,85,59,24,127,-38,-29,-11,23,-7,46,17,-11,13,4,33,-77, 
  /* [27][0][][] */ 53,14,-54,-26,33,65,41,6,-41,7,0,52,61,17,61,39,30,19,86,36,-4,54,-32,-14,1,127,-90,39,65,-38,36,-32,17,10,-58,-40,-20,-15,15,-19,-20,-6,-29,21,7,9,5,28,-4,-43,-54, 
  /* [28][0][][] */ 4,-6,9,112,-87,-113,25,-86,-62,31,22,-85,-127,-87,34,59,-2,-76,9,36,-77,-76,55,-21,-8,106,-47,37,-4,53,41,-40,-37,42,43,25,-67,120,-34,78,-90,-66,-69,-43,48,56,-6,-31,-34,-40,-25, 
  /* [29][0][][] */ 4,-52,79,-74,-84,-24,0,-44,13,5,-57,58,-4,-13,0,-35,56,127,-10,-17,-40,69,32,-39,-35,-28,-29,97,-94,72,-5,-12,-18,-19,18,-5,-30,121,49,23,-14,-30,43,9,-44,9,28,20,77,24,33, 
  /* [30][0][][] */ 20,-85,66,23,-6,-10,-47,-36,9,14,12,5,-63,29,-11,23,71,1,13,-7,55,-32,-35,28,-43,6,46,-8,19,71,127,8,44,63,34,72,-50,-26,80,31,-46,35,-35,17,62,-6,56,10,13,-29,12, 
  /* [31][0][][] */ -16,-4,-7,-29,0,127,-30,17,17,26,11,31,4,6,3,19,13,-3,12,13,11,37,4,-13,7,-1,34,14,-9,8,24,7,9,-20,40,3,45,1,-1,-23,74,-12,-11,20,-13,-19,-17,17,7,19,-29, 
  /* [32][0][][] */ -15,-91,27,-56,-2,-44,13,-69,-76,57,77,34,-22,-101,43,92,-50,127,67,100,-44,34,-125,29,-40,18,-1,31,1,-63,1,-71,-20,-36,-28,66,118,-28,77,31,17,-63,-38,-40,23,-37,66,-69,19,-86,-21, 
  /* [33][0][][] */ -22,-23,4,-16,90,35,-18,-35,-28,19,-20,4,-30,-25,22,-1,-1,1,-21,-3,-6,-15,-39,-88,50,11,33,39,-48,84,-60,52,-26,-29,70,53,-127,-18,103,-38,-33,12,71,44,-54,-32,-51,24,56,-79,45, 
  /* [34][0][][] */ -15,27,-57,49,-24,-6,-21,77,15,35,91,10,54,-53,19,122,-24,16,27,28,-48,-32,24,72,-70,-4,44,-21,-9,-31,26,-76,77,36,127,-13,40,51,38,-38,6,-118,-11,-26,74,-6,61,-15,125,44,-71, 
  /* [35][0][][] */ 45,-118,48,42,77,-3,-48,3,-127,-2,-81,-22,-45,-99,-78,76,-82,125,15,-89,78,-107,-35,-34,-35,95,-56,-21,28,-61,-43,10,61,76,31,-37,-58,4,27,-51,31,33,-4,42,14,58,-110,34,-30,-58,58, 
  /* [36][0][][] */ 4,-44,32,-1,0,-9,-14,-5,-50,-55,-33,38,-28,-13,-67,6,9,-31,-2,33,4,59,15,36,14,127,-19,-23,-23,1,-5,-1,29,9,16,31,-7,4,13,12,-1,-1,26,27,-47,18,-42,-23,-25,-14,-27, 
  /* [37][0][][] */ 78,-15,-47,51,55,-26,-127,-14,-1,-33,-10,-1,-29,-69,41,-40,-29,84,41,-9,23,66,32,-27,-19,4,38,34,-74,26,20,56,15,44,3,-22,-26,18,35,-34,13,-7,-61,-49,0,25,36,62,10,62,-6, 
  /* [38][0][][] */ 12,-54,83,68,-55,17,-21,-30,40,-111,-59,7,-59,35,102,-3,-61,-18,3,8,13,-84,-59,-26,-26,3,-2,-82,17,-26,53,-33,-114,-43,13,-51,14,43,-17,-6,-50,26,22,-29,127,-32,42,0,-15,-108,83, 
  /* [39][0][][] */ 127,-18,-34,5,63,0,-4,-16,-51,51,8,43,-46,-24,-32,-61,31,20,115,31,-6,21,45,-24,14,-7,107,18,-26,79,-22,-58,30,32,-53,8,1,-4,-63,-25,14,-12,49,-29,-41,47,15,-31,-12,-22,15, 
  /* [40][0][][] */ 122,-117,-30,-108,80,-61,18,-11,41,-17,1,111,59,18,-81,4,50,-86,14,-29,8,22,-60,101,127,18,87,42,3,-23,-18,-55,85,66,29,-122,-32,52,116,-92,-123,6,3,-23,-42,15,-60,31,-8,-52,53, 
  /* [41][0][][] */ 12,-30,-4,-5,-4,2,22,-44,-25,-39,-24,-3,-6,36,-7,2,82,2,-9,23,-7,-26,-41,-25,-9,-17,13,-33,33,-14,-12,17,-38,64,10,4,-31,17,28,-61,-34,-5,127,7,-27,0,-17,-5,13,16,-58, 
  /* [42][0][][] */ -57,-12,-30,-23,31,13,37,3,-27,66,-14,0,58,66,-31,-31,12,-2,27,-2,14,33,-121,33,-89,6,-43,-30,11,43,-20,-17,14,4,-21,77,14,37,76,-35,17,63,-12,93,127,11,1,-32,-15,-57,-3, 
  /* [43][0][][] */ -7,-113,63,-98,-33,54,14,40,-43,10,55,-90,120,10,7,20,69,58,67,51,-32,-55,37,-14,-96,28,-49,3,-7,91,-60,-1,-50,56,-20,123,-15,86,127,34,-106,70,51,-98,9,-23,94,-24,-43,-107,-17, 
  /* [44][0][][] */ 109,29,-65,-14,53,-76,-98,-5,66,88,-10,-26,-71,67,-31,-52,73,8,127,-24,-103,-85,15,-42,35,-37,-11,99,32,7,39,-9,-42,-92,37,-38,41,-79,-48,-22,-33,-7,-81,-28,43,-2,21,41,37,-61,-51, 
  /* [45][0][][] */ -2,55,68,-26,-32,-15,7,17,-1,28,-10,-26,59,85,-24,58,-70,-31,127,-30,69,2,4,33,-5,-28,39,-23,-21,27,17,-18,1,44,18,26,-9,21,19,19,-7,77,17,21,-2,-25,53,14,-1,-8,-23, 
  /* [46][0][][] */ 23,-2,-51,-2,-24,43,36,-77,-10,-92,-46,-90,-28,57,36,-17,127,-18,8,-27,97,33,-36,-3,-52,-12,10,11,-67,-26,-50,-54,29,56,-32,-32,-46,2,-40,-30,-7,60,23,-33,-43,14,2,116,-25,14,-3, 
  /* [47][0][][] */ -38,-88,-3,-16,69,2,-7,-6,-16,-13,-78,67,-127,24,-18,31,30,38,24,-2,33,23,-33,-48,58,-14,-24,30,-31,-77,61,12,36,31,42,34,-45,101,-17,-63,4,-13,15,52,-22,-44,42,29,-63,-19,23, 
  /* [48][0][][] */ -35,-5,13,39,22,31,-50,44,-9,29,-6,42,-17,16,14,33,-46,-30,-32,16,-1,35,-31,23,-109,13,25,99,-3,31,-71,3,-46,56,-62,-108,-45,3,-7,2,-35,-17,84,32,73,91,127,3,-11,-30,16, 
  /* [49][0][][] */ -85,64,-25,-50,-68,-8,-46,-31,24,4,-15,20,22,10,-9,66,-21,-27,84,80,-32,11,66,-18,32,-63,-53,52,80,45,-11,-46,71,-87,-32,49,111,103,65,-40,-70,2,22,127,-51,-5,104,-28,-31,69,87, 
  /* [50][0][][] */ 58,107,6,6,19,40,63,-23,-40,5,19,18,50,13,-19,-11,15,13,-20,91,13,-28,-13,37,-36,8,42,-14,12,26,3,26,-12,67,7,51,17,-28,-32,-29,-81,-51,6,31,3,28,-20,18,-35,-3,127, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant24_scale = { 51, { 0.002649444155395031, 0.002808665856719017, 0.0016561357770115137, 0.0063324626535177231, 0.0034877357538789511, 0.0022264088038355112, 0.0019236276857554913, 0.0025489511899650097, 0.0031692625489085913, 0.0015687026316300035, 0.0061287395656108856, 0.0040724044665694237, 0.0047835586592555046, 0.0032771481201052666, 0.0031774269882589579, 0.0024018611293286085, 0.0024195155128836632, 0.0022975977044552565, 0.002305126516148448, 0.0046494477428495884, 0.0056996513158082962, 0.0037851894740015268, 0.0028185793198645115, 0.0027618671301752329, 0.0031137093901634216, 0.0021734687034040689, 0.0015565347857773304, 0.0033648689277470112, 0.0018029964994639158, 0.0036897803656756878, 0.0044865985400974751, 0.0052517964504659176, 0.002722583943977952, 0.0040947720408439636, 0.0043776808306574821, 0.0020641800947487354, 0.0037191968876868486, 0.0049984515644609928, 0.0039961952716112137, 0.0022824169136583805, 0.0020221630111336708, 0.0044215191155672073, 0.0035781136248260736, 0.0024396013468503952, 0.0029094235505908728, 0.0060196355916559696, 0.0037491547409445047, 0.0036773669999092817, 0.0022666351869702339, 0.0030828018207103014, 0.0029373671859502792, } };
const TfArray<51, int> quant24_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[51] = { -71, -12565, 2276, -1143, 18951, -5328, 719, -10247, 17434, 22325, -934, 32945, 25564, 29011, 2617, 34663, 2975, -291, 53, 45, 34296, 111, 22825, 5282, -4352, 7, 4798, 138, 2393, 49134, 27343, -93, 29243, -8454, 17037, 24882, 19100, -636, 21331, 20039, -9456, -60, 2988, 289, 28277, -387, -4660, -131, -604, -2285, -3230, };
const TfArray<1, int> tensor_dimension25 = { 1, { 51 } };
const TfArray<51, float> quant25_scale = { 51, { 0.00010517497867112979, 9.3462964287027717e-05, 6.9607260229531676e-05, 8.935143705457449e-05, 0.00011936985538341105, 0.00020321534248068929, 0.00012703101674560457, 6.7408138420432806e-05, 7.0872512878850102e-05, 6.7815672082360834e-05, 0.00022880399774294347, 4.8540681746089831e-05, 7.2830669523682445e-05, 9.5007366326171905e-05, 0.00012189865083200857, 5.772335862275213e-05, 0.00010908082185778767, 0.00014474245836026967, 0.00015263016393873841, 8.7170665210578591e-05, 4.6645684051327407e-05, 9.6270479843951762e-05, 6.4768588345032185e-05, 9.0103210823144764e-05, 0.00019881481421180069, 9.5012939709704369e-05, 8.052484190557152e-05, 0.00014183904568199068, 0.00012916502601001412, 3.4965392842423171e-05, 5.014620182919316e-05, 0.00013490390847437084, 5.5030748626450077e-05, 0.0001145637288573198, 0.00015698587230872363, 0.00010646240116329864, 9.2848917120136321e-05, 0.00016388519725296646, 0.00012026185140712187, 6.7071705416310579e-05, 0.00014475217903964221, 9.2848917120136321e-05, 0.00013405327626969665, 9.9900920758955181e-05, 0.00010476095485500991, 0.00014394013851415366, 0.00046767617459408939, 0.00011447845463408157, 0.00014566133904736489, 0.00011019741941709071, 6.5594875195529312e-05, } };
const TfArray<51, int> quant25_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[1*3*3*51] = { 
  /* [0][0][][] */ 40,99,37,64,-10,23,42,25,-127,-63,36,3,-18,-74,127,-119,6,42,30,44,-59,31,-58,60,-62,41,64,30,26,-97,-69,46,-69,3,-69,-44,-61,30,-36,-19,11,52,17,-6,-38,55,-74,9,42,23,44, 27,127,61,84,-87,8,25,100,-29,-97,127,-127,-127,-70,14,-7,66,31,8,127,-48,71,-127,-33,-33,28,83,31,58,-103,-51,36,-87,32,-127,-31,-127,-33,-36,-24,71,61,41,89,-77,-94,-29,37,48,52,127, -38,41,-32,37,25,9,-33,-47,-89,2,-7,52,30,-62,66,-76,-27,-51,-16,-57,-27,-41,35,90,-42,-58,-25,-38,-38,-82,-10,12,3,-27,-17,-25,5,18,13,-12,4,9,-29,-50,-6,-20,-23,-9,-2,-1,-35, 
  /* [0][1][][] */ 60,37,43,56,-75,20,35,127,-63,-77,15,-99,-97,-75,-26,-75,7,47,9,37,-91,44,-52,-35,25,54,38,23,58,-82,-78,42,-117,40,4,-54,-40,19,-22,-106,18,59,5,13,-81,18,63,-36,40,21,27, 127,60,84,127,-127,-15,127,93,-16,-127,45,-95,-99,-127,-122,-114,127,127,127,76,-127,127,-100,-50,105,97,127,127,127,-127,-127,127,-123,127,-112,-127,-103,127,-127,-127,85,90,127,127,-127,70,127,127,127,127,85, -75,67,-33,13,3,26,-64,99,-46,8,-5,-68,-60,9,14,-69,-26,-62,-83,-9,-77,-36,-5,-6,20,-75,-45,-58,-62,-89,-79,6,-42,0,3,-35,-9,-44,11,-62,-17,34,-56,-25,-25,-127,3,-78,-21,-35,-6, 
  /* [0][2][][] */ 42,50,64,-12,43,53,41,-12,-63,-34,-6,-52,-7,-37,-11,-85,-13,-6,16,123,-97,23,-27,127,1,23,3,23,-5,-88,-10,-40,-42,41,9,-38,15,15,-53,10,41,12,18,14,-35,67,1,54,5,16,50, 23,-1,127,28,31,127,35,121,-16,-66,18,-107,-120,-71,-46,-127,55,-27,56,-53,-39,57,-63,69,127,127,7,52,-3,-84,-75,-34,-127,65,-55,-87,49,25,-68,-27,127,127,36,71,-94,81,-27,91,12,41,112, -16,81,-43,-17,28,22,-46,-3,-65,-2,-13,2,22,-28,-5,-63,-26,13,-41,98,-60,-32,-9,103,-18,-89,-28,-48,-31,-53,-4,-27,-15,16,0,-5,-20,-28,6,22,0,-53,-24,-18,-18,-21,25,0,-8,-20,11, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant26_scale = { 51, { 0.0052789351902902126, 0.0046910867094993591, 0.0034937227610498667, 0.0044847209937870502, 0.005991403479129076, 0.010199770331382751, 0.0063759316690266132, 0.003383344504982233, 0.0035572282504290342, 0.0034037996083498001, 0.011484114453196526, 0.0024363505654036999, 0.003655511885881424, 0.0047686030156910419, 0.0061183287762105465, 0.002897246740758419, 0.0054749771952629089, 0.0072649032808840275, 0.0076608024537563324, 0.004375264048576355, 0.0023412369191646576, 0.0048320014029741287, 0.0032508603762835264, 0.0045224539935588837, 0.0099788997322320938, 0.0047688828781247139, 0.0040416973643004894, 0.0071191755123436451, 0.0064830421470105648, 0.0017549805343151093, 0.0025169346481561661, 0.006771087646484375, 0.0027620994951575994, 0.0057501746341586113, 0.0078794239088892937, 0.0053435536101460457, 0.0046602664515376091, 0.0082257147878408432, 0.0060361744835972786, 0.0033664584625512362, 0.007265391293913126, 0.0046602664515376091, 0.0067283930256962776, 0.0050142202526330948, 0.0052581545896828175, 0.0072246333584189415, 0.023473570123314857, 0.0057458947412669659, 0.0073110237717628479, 0.0055310213938355446, 0.0032923335675150156, } };
const TfArray<51, int> quant26_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 3 };
const ALIGN(16) int32_t tensor_data27[51] = { 11528, 40101, -14131, -5569, 33360, 6164, 767, -11040, -2171, -5364, 4783, 17928, -10687, 4173, 3436, 18198, 13214, 5083, -224, -4806, 2208, -2537, 10241, 9485, 19665, -3583, 354, 10657, 5860, -6466, -7669, 10170, 4671, 17144, 18565, 3448, 33334, -6697, 2209, -1714, 31165, 21390, -8934, -4900, 29978, -15486, 23279, -9229, 7099, 5427, -3989, };
const TfArray<1, int> tensor_dimension27 = { 1, { 51 } };
const TfArray<51, float> quant27_scale = { 51, { 9.2566871899180114e-05, 2.7547632271307521e-05, 7.1768241468816996e-05, 5.4919411923037842e-05, 3.4656826755963266e-05, 3.1865041819401085e-05, 6.4005747844930738e-05, 6.7538254370447248e-05, 8.9621215010993183e-05, 7.6838179666083306e-05, 6.5920954511966556e-05, 6.8374043621588498e-05, 4.8008969315560535e-05, 3.5224169550929219e-05, 9.157184831565246e-05, 4.9815935199148953e-05, 7.2046321292873472e-05, 0.00012699584476649761, 7.742533489363268e-05, 0.00015034218085929751, 4.9443162424722686e-05, 9.553079871693626e-05, 9.9783348559867591e-05, 6.0894490161444992e-05, 3.6208995879860595e-05, 6.8575995101127774e-05, 5.6360822782153264e-05, 9.9764474725816399e-05, 5.218350634095259e-05, 7.7303870057221502e-05, 8.8113389210775495e-05, 9.499257430434227e-05, 6.8134169850964099e-05, 0.00010116763587575406, 3.6445657315198332e-05, 5.4899508540984243e-05, 5.1858314691344276e-05, 9.7748248663265258e-05, 4.9287205911241472e-05, 9.6737574494909495e-05, 3.0814644560450688e-05, 6.7027736804448068e-05, 5.3387630032375455e-05, 6.7055079853162169e-05, 4.0316925151273608e-05, 9.5169481937773526e-05, 2.4605309590697289e-05, 7.7465156209655106e-05, 7.474795711459592e-05, 6.8097280745860189e-05, 0.00010421289334772155, } };
const TfArray<51, int> quant27_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[51*1*1*51] = { 
  /* [0][0][][] */ -25,10,-40,48,-45,89,-6,10,-51,19,-27,-16,97,10,-14,-57,-19,96,-5,-11,-2,36,3,52,-31,-8,-49,-70,-55,-24,-32,-2,127,-22,12,-68,15,-20,-13,24,-33,29,38,7,-49,-29,-30,57,-35,-15,29, 
  /* [1][0][][] */ 127,46,-52,-26,33,-28,-32,-19,76,77,-50,39,-19,-4,-3,-43,-49,-33,-16,-40,21,-83,14,23,32,-68,-44,-11,46,-32,45,69,6,50,-111,25,-12,-21,-57,62,70,-78,1,33,13,121,90,-21,-78,-44,52, 
  /* [2][0][][] */ -7,127,-38,-27,124,-68,-40,10,-64,-36,-19,-4,38,7,12,-9,-19,-10,3,43,92,32,31,89,26,-27,81,-46,82,-14,124,-11,44,-14,-24,-4,-48,44,-48,-17,-26,-5,64,-66,-57,59,-79,63,-11,-45,47, 
  /* [3][0][][] */ -12,80,26,99,-44,30,101,-22,-58,-90,-42,-20,22,76,-31,5,-127,72,-3,-21,57,-80,-5,5,27,-68,-22,-37,2,112,65,75,44,36,-108,-57,14,25,-46,13,20,6,-37,-11,24,17,62,28,58,62,47, 
  /* [4][0][][] */ -17,-81,-38,-84,77,-40,-127,47,-23,13,68,-102,22,-14,-8,-10,-94,-51,10,-42,85,0,-46,14,-7,-5,31,-12,-22,-11,-7,34,46,49,44,20,-79,91,39,-6,46,3,8,72,34,11,-18,-12,2,-60,61, 
  /* [5][0][][] */ -64,-32,79,71,-61,-11,-25,-36,-30,-36,-43,-6,-65,127,-34,-1,16,-16,-4,-7,57,-4,16,-7,30,-17,52,12,4,-20,64,117,1,30,23,51,15,-65,-5,77,-7,5,24,-20,16,9,-23,119,52,-19,61, 
  /* [6][0][][] */ 6,46,-71,-2,-16,-24,0,-17,-50,-18,50,-15,-6,-33,18,37,-37,-86,9,-10,24,-35,83,1,40,37,-1,44,-11,46,113,29,105,4,-34,1,13,-33,23,9,-4,-8,43,-3,-30,-6,-2,44,-11,127,13, 
  /* [7][0][][] */ -33,-33,76,-34,-14,18,-39,9,46,-13,-88,19,-15,-23,55,-6,41,60,-1,121,-2,53,66,11,127,4,38,106,35,60,12,-41,-3,-10,39,-26,36,-14,0,15,-27,-19,-48,49,27,40,71,8,45,-11,-44, 
  /* [8][0][][] */ -7,-1,19,0,-1,13,19,52,-14,1,-7,-1,-36,-3,-18,75,-1,-10,127,33,-11,28,63,-39,3,12,-33,-15,53,3,-7,4,-35,-17,5,24,1,38,-6,59,-21,5,-18,9,-7,6,-21,16,-45,-3,-26, 
  /* [9][0][][] */ -1,-7,-41,3,-16,36,69,100,-63,-36,-26,-22,-36,-12,46,6,-13,0,44,47,-35,-56,30,12,-16,-94,73,-40,-74,56,17,20,40,89,25,-14,23,-9,-8,127,10,3,42,90,-51,-4,92,9,-37,-7,-71, 
  /* [10][0][][] */ 32,28,-49,-55,37,7,7,20,4,91,36,3,0,-127,-34,-16,-20,-36,18,10,1,77,21,-10,-13,53,20,31,9,-101,-88,-77,-20,28,32,-9,36,41,4,-35,-27,9,19,-37,-2,-47,-65,26,-21,-13,-23, 
  /* [11][0][][] */ -18,-108,-43,0,-127,39,-40,-9,-14,6,51,79,37,70,-43,-61,37,-7,-126,-8,-18,31,1,2,-28,67,-32,-17,-122,-23,50,5,38,70,25,-37,-76,-13,32,26,55,14,-97,82,15,35,-25,11,112,25,-29, 
  /* [12][0][][] */ -44,28,28,50,-51,-127,1,-86,-61,112,59,89,61,84,64,77,-64,99,-24,-39,35,52,-6,40,121,36,53,-5,37,-47,-54,66,44,36,124,-25,-28,-34,8,82,23,2,-47,-47,-3,-54,-21,25,39,61,3, 
  /* [13][0][][] */ 9,-9,32,63,14,-36,49,60,31,4,91,86,-26,58,-53,-5,-48,46,28,-94,-5,54,25,-13,-21,-60,-7,-62,35,-81,42,-59,16,54,127,109,-2,56,-25,2,-27,-38,-29,-20,73,-53,53,58,8,18,-25, 
  /* [14][0][][] */ 2,59,9,-72,29,78,-47,11,-14,14,-3,22,22,-2,7,-36,26,-52,-46,48,-72,-8,16,83,-36,-30,-24,-23,40,-35,34,-33,-45,-62,-23,-46,-21,127,-3,-51,49,21,35,9,46,-7,-2,-5,46,-1,-7, 
  /* [15][0][][] */ -31,-42,20,33,30,-1,25,33,-58,3,-127,71,54,-31,-26,-31,-48,65,-15,-2,97,17,-32,-53,-35,-36,-55,-41,-1,4,-11,7,60,69,32,-16,-1,-71,-76,-10,-61,19,4,-13,-17,-64,6,50,13,96,74, 
  /* [16][0][][] */ -33,32,-93,51,-60,42,41,-127,-39,103,-3,-32,3,-19,48,87,-23,-26,18,-12,48,-2,88,-28,10,-66,3,-99,-3,10,-39,-15,49,53,-20,5,-37,2,-8,12,12,54,69,18,-21,-43,2,43,-48,-5,29, 
  /* [17][0][][] */ -1,-39,-17,33,-16,-47,7,24,0,-25,3,0,-5,41,-31,-14,57,40,-18,36,2,1,-32,-14,2,17,-16,-49,-3,1,24,9,-21,-7,-15,1,-25,-2,-6,1,-7,-20,10,127,3,3,-7,-2,-35,-5,5, 
  /* [18][0][][] */ -21,44,-12,16,23,5,67,-101,-37,22,15,88,40,-48,14,-19,-15,30,0,12,-71,-18,54,7,28,-21,-81,0,-40,-19,-7,127,39,35,-9,4,12,21,-22,-7,2,28,101,-11,35,-11,-56,18,-1,-49,29, 
  /* [19][0][][] */ 16,63,-14,41,33,15,127,-19,-35,-12,-21,-40,-13,1,28,-1,-3,-21,13,-57,-23,-5,5,-32,-40,-21,-20,-4,-4,-23,-33,45,-3,-4,-47,35,21,3,-46,5,-64,0,1,6,-47,-5,0,65,-40,-12,26, 
  /* [20][0][][] */ 90,-118,-100,40,127,-53,72,-51,-33,-84,-31,-32,-73,79,-40,-7,17,64,-33,-60,60,2,60,24,78,-72,-48,48,-36,18,58,-9,82,-83,82,105,-70,-19,-18,27,104,48,50,97,-23,-2,-127,-58,19,2,15, 
  /* [21][0][][] */ -40,1,-42,31,48,-14,-1,32,-43,1,-27,-17,73,24,-54,-32,21,-12,20,12,19,11,-18,36,-1,8,-59,-20,49,-21,-33,60,-30,12,13,0,2,1,10,24,-34,-8,62,-45,-29,-13,-5,25,50,127,20, 
  /* [22][0][][] */ 10,-37,1,-17,-50,-30,-13,3,-27,37,14,-31,2,32,17,-26,29,-11,-10,0,-31,0,-79,-1,11,10,38,-34,29,-30,-6,33,32,-52,-5,-10,-24,32,1,53,-10,28,-32,-11,-69,72,25,-5,-12,127,4, 
  /* [23][0][][] */ 21,-14,30,127,0,3,-5,12,-53,-45,10,19,110,53,-13,2,-24,0,20,-14,-29,67,-51,-43,-20,-9,4,14,45,-66,42,4,-61,25,64,-66,-3,-95,-12,5,-18,37,57,-45,-32,28,-57,62,6,-19,29, 
  /* [24][0][][] */ -60,37,27,21,-38,12,15,-45,-72,-67,18,32,20,17,127,12,-37,-11,13,-15,-38,11,-73,-15,1,-52,2,28,5,21,6,20,8,-27,101,32,22,-20,-71,48,68,50,68,-4,-12,-30,-27,-13,-32,65,16, 
  /* [25][0][][] */ -1,-22,-38,-15,19,2,-32,127,-19,-23,21,28,12,11,14,103,-3,-32,105,15,-31,-8,7,6,57,4,-40,5,15,-2,11,5,-30,-7,-16,-2,-2,-3,10,121,17,1,54,-11,-1,18,-14,25,-5,-1,-1, 
  /* [26][0][][] */ -69,-112,-48,-7,-24,-27,86,90,-80,115,-38,50,61,-76,87,-19,-54,41,-17,-48,41,45,-11,36,127,60,9,36,-67,-9,-64,-114,28,17,-21,43,11,26,-57,53,-45,23,59,-102,63,-10,21,93,26,-21,10, 
  /* [27][0][][] */ -27,3,-62,35,-15,-8,-17,-127,-57,-56,-16,-15,12,69,22,-59,-4,22,33,30,39,14,-14,-1,-10,-7,46,-41,58,1,-38,17,26,29,12,19,19,9,2,-62,-11,18,-2,-21,-64,16,-1,39,-3,-30,27, 
  /* [28][0][][] */ -8,127,0,3,33,9,-13,-24,-23,30,-13,16,3,5,19,39,11,5,-11,-36,31,-33,-35,3,-56,50,110,27,22,-16,-5,-24,9,14,-34,7,69,-2,-44,2,-86,-30,19,31,-54,48,-19,0,-5,-31,55, 
  /* [29][0][][] */ 127,-60,95,16,39,-16,-16,-34,65,-26,71,-10,-48,-20,-10,-13,-73,53,28,-60,81,20,-36,0,73,42,-56,-19,16,45,15,-54,-12,24,48,-7,-40,15,-4,-27,93,17,17,19,71,-14,89,-69,51,70,-57, 
  /* [30][0][][] */ 18,-32,31,4,-81,-95,56,31,-41,47,-24,10,4,57,-40,16,-127,32,14,61,58,21,91,56,-44,-21,-24,19,45,-69,-79,39,-41,1,65,57,2,16,-23,-20,21,106,-24,103,-34,-23,-49,-3,-33,0,13, 
  /* [31][0][][] */ -49,113,-34,44,-73,37,-38,-29,-96,-51,-31,-37,21,8,-23,-40,-45,26,19,-49,-48,1,47,41,-23,-25,-18,-10,2,-22,31,-54,95,-66,22,-115,56,5,-21,29,-9,-20,31,-13,-60,16,-17,127,-42,-22,115, 
  /* [32][0][][] */ -52,23,42,117,-59,-50,-34,-35,-47,-32,-16,-97,43,61,-71,-69,-93,29,-27,51,29,-76,-4,121,77,30,41,-2,9,-14,60,-14,59,31,127,-101,-24,-28,-23,-11,-22,47,6,-61,-56,-12,30,30,93,17,4, 
  /* [33][0][][] */ -7,12,-27,-22,-62,12,-18,-127,-28,34,19,40,4,-5,-48,-24,-68,5,51,3,-13,17,-30,34,-68,-12,68,-38,-29,-46,56,-12,11,52,-25,-5,-63,16,-18,-6,-34,57,48,-42,-23,81,57,4,28,-7,17, 
  /* [34][0][][] */ -48,-39,27,-11,-41,64,-77,-41,16,-29,-20,29,9,18,-4,56,69,-53,49,1,-2,-82,-4,-37,35,68,27,61,24,43,43,72,-19,-14,96,-22,127,23,-58,57,-93,4,-2,-11,45,-42,43,40,-79,-17,-17, 
  /* [35][0][][] */ -4,-33,-6,-66,-26,-29,127,-15,24,23,61,18,21,3,8,14,23,10,-25,-38,-23,-5,-19,18,-34,-13,52,83,98,-46,-21,16,-8,-8,-35,-32,-25,48,13,8,12,-9,-7,32,-26,-27,-11,-30,40,23,29, 
  /* [36][0][][] */ 13,-30,-8,-77,107,-42,-66,30,20,-11,38,-15,12,44,-13,10,-2,-9,5,-59,74,21,67,-28,-53,26,-46,-2,13,-127,-11,-7,17,26,-115,-34,-91,-102,46,-7,-22,-8,-21,2,7,38,-55,12,48,-44,-43, 
  /* [37][0][][] */ -13,-17,-13,49,-7,-40,-80,28,-45,-14,-56,68,44,1,10,-53,-79,-24,-12,-28,-31,38,118,22,51,38,54,3,46,-17,24,-83,22,-45,4,127,70,-36,-19,33,-13,18,22,3,-23,24,24,63,56,25,-26, 
  /* [38][0][][] */ 67,-14,105,30,34,11,42,30,-5,-16,74,-36,59,62,-65,-36,12,-13,38,-40,46,3,15,18,6,127,61,-19,-96,17,17,45,9,57,-80,18,14,6,25,3,-17,16,-16,-3,17,-36,19,-59,-12,6,16, 
  /* [39][0][][] */ 10,70,31,-42,-73,3,-6,0,-3,-27,8,-8,-20,-2,12,-26,127,-21,-3,-27,21,31,14,3,-46,-1,8,28,-28,22,7,-51,14,39,2,17,17,19,-34,-1,48,26,15,-12,-108,1,-5,38,-20,-28,15, 
  /* [40][0][][] */ -28,-2,-2,53,-17,23,-31,-51,7,33,-7,114,-50,60,-36,127,43,-77,-61,91,3,-4,-70,-4,-11,40,29,-82,59,88,51,117,5,40,23,-99,-84,-34,-11,44,-22,-56,21,-50,86,-26,-18,4,-78,-21,9, 
  /* [41][0][][] */ -50,-108,-48,-9,-89,-14,-127,8,-92,-20,-76,-10,-46,77,62,75,9,10,-21,-8,-47,-68,9,-30,-78,26,115,-12,-63,12,-6,-65,-3,88,76,-23,-53,-6,-2,114,-114,-5,-65,5,-107,74,-48,114,23,33,-5, 
  /* [42][0][][] */ -22,39,-52,-23,-86,-66,82,-2,-1,-37,-50,-12,127,2,-46,105,-28,-6,-44,-13,-41,-2,-17,36,18,-50,72,88,-17,-53,8,34,97,68,12,96,34,26,15,91,-60,89,46,-43,-32,39,-50,61,-2,-41,51, 
  /* [43][0][][] */ 37,-40,-102,58,67,13,84,-92,48,25,-15,-44,18,-10,2,-43,25,-87,47,-6,-18,41,-67,10,-50,-62,29,-1,28,106,-28,-33,83,-29,21,36,-40,-2,-18,20,9,-38,-5,79,23,127,-42,43,27,31,77, 
  /* [44][0][][] */ -18,43,-13,-1,-14,-21,-22,13,-19,56,-35,-24,50,-39,-18,1,-60,44,-23,76,-44,6,11,-62,9,55,-42,-37,-64,-25,-25,127,109,22,-27,7,21,15,-4,-30,5,-63,-87,38,-53,-6,0,9,70,-69,-2, 
  /* [45][0][][] */ -41,17,-47,18,-19,-13,122,-27,-44,-29,-26,120,117,11,-48,-15,-127,94,10,-14,51,5,17,73,-3,-55,-34,46,63,5,6,-43,47,58,10,-66,20,2,-52,0,-15,48,17,-43,70,27,78,-9,56,4,26, 
  /* [46][0][][] */ -82,8,12,-35,12,-20,81,23,14,-7,-15,18,0,15,-31,13,25,-5,-18,-6,27,9,20,9,-9,-14,-45,75,8,-11,22,-24,22,26,31,-17,12,-18,62,-31,-24,-36,-24,-16,57,34,18,127,21,18,-11, 
  /* [47][0][][] */ -17,52,-37,0,-127,38,60,4,-12,-14,13,-53,7,25,1,55,-8,39,4,18,-31,-16,-5,-66,47,-22,-3,-45,26,84,13,83,-25,46,35,40,-46,79,-8,16,25,13,14,-15,-73,22,-56,62,-5,19,70, 
  /* [48][0][][] */ -9,-36,-5,68,-109,6,17,6,48,9,-51,9,47,-15,-19,-24,2,-24,3,-37,43,15,-84,-5,13,-44,37,-37,-15,-114,-12,46,28,46,-8,-37,-44,-22,4,56,-8,32,1,-116,-48,-25,-15,31,79,127,67, 
  /* [49][0][][] */ 25,91,-73,-61,11,91,-82,-8,-24,-21,6,4,15,76,37,105,6,-74,-26,-35,-19,49,-46,33,55,-23,-83,10,-37,79,38,-22,76,41,42,1,2,-72,31,4,4,-23,-21,127,-59,17,92,-49,-12,-103,7, 
  /* [50][0][][] */ -23,18,-16,4,-61,4,7,33,-6,30,-30,-32,2,35,6,-12,-9,4,-5,8,-38,4,-25,-5,-24,-26,-21,-30,7,65,16,-13,33,-12,22,22,127,-30,1,30,45,29,14,-20,-14,11,23,49,-27,19,8, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant28_scale = { 51, { 0.0044706081971526146, 0.001330440049059689, 0.0034661178942769766, 0.0026523871347308159, 0.0016737856203690171, 0.001538953511044383, 0.0030912207439541817, 0.00326182646676898, 0.0043283449485898018, 0.0037109754048287868, 0.0031837173737585545, 0.0033021916169673204, 0.0023186404723674059, 0.0017011859454214573, 0.0044225524179637432, 0.002405909588560462, 0.0034795480314642191, 0.0061333891935646534, 0.0037393327802419662, 0.0072609232738614082, 0.0023879061918705702, 0.0046137538738548756, 0.0048191351816058159, 0.0029409592971205711, 0.0017487490549683571, 0.0033119453582912683, 0.00272200140170753, 0.0048182234168052673, 0.0025202538818120956, 0.0037334663793444633, 0.0042555229738354683, 0.0045877597294747829, 0.0032906066626310349, 0.0048859906382858753, 0.0017601789440959692, 0.0026514257770031691, 0.0025045482907444239, 0.0047208480536937714, 0.0023803741205483675, 0.0046720365062355995, 0.0014882235554978251, 0.0032371704000979662, 0.0025784082245081663, 0.0032384912483394146, 0.0019471455598250031, 0.0045963036827743053, 0.0011883376864716411, 0.0037412559613585472, 0.0036100263241678476, 0.0032888252753764391, 0.0050330641679465771, } };
const TfArray<51, int> quant28_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int32_t tensor_data29[51] = { -1080, -744, 1518, -2899, -1728, -39, 18760, -2271, -8192, -9449, -174, -6346, -4262, 292, 368, 122, -119, 16177, -72, -45, 14239, 24562, -7873, 12523, -4058, -941, 2501, 21185, 19979, -887, 145, 762, 133, -4824, -151, 32240, 1687, -744, 23133, 361, 25131, -1747, -8157, -1122, 13783, -133, 1233, 35235, 28368, -2893, 6004, };
const TfArray<1, int> tensor_dimension29 = { 1, { 51 } };
const TfArray<51, float> quant29_scale = { 51, { 0.0001002134449663572, 0.00015015649842098355, 7.188368181232363e-05, 0.00017790705896914005, 0.00015280427760444582, 0.00010922671208390966, 0.00020982140267733485, 0.0001789220841601491, 6.2923230871092528e-05, 6.7591114202514291e-05, 0.00011474713392090052, 0.00015324397827498615, 8.0695106589701027e-05, 0.00022257283853832632, 7.1686510636936873e-05, 0.00011886113497894257, 0.00014576682588085532, 0.00018224946688860655, 0.00012547450023703277, 9.114878048421815e-05, 0.00015489607176277786, 0.00026122003328055143, 0.00017779514018911868, 9.8720411187969148e-05, 0.00013096144539304078, 9.1270820121280849e-05, 0.00011233357508899644, 8.323319343617186e-05, 8.6055595602374524e-05, 0.00011913073103642091, 0.00017312189447693527, 0.00025655742501839995, 0.00012375567166600376, 0.00011114861263195053, 0.00016419083112850785, 5.0222475692862645e-05, 0.0001221020647790283, 6.2677761889062822e-05, 4.4478591007646173e-05, 0.0001881804782897234, 6.1011691286694258e-05, 0.0001736466510919854, 5.9821952163474634e-05, 0.00015946610074024647, 0.00025809483486227691, 0.00014072256453800946, 7.7265372965484858e-05, 9.8969590908382088e-05, 6.5902509959414601e-05, 0.00018172248383052647, 0.00017187040066346526, } };
const TfArray<51, int> quant29_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[1*3*3*51] = { 
  /* [0][0][][] */ -81,-7,-6,-12,16,27,-4,15,-26,-14,-12,8,-36,-14,2,19,1,6,15,-9,-10,13,-2,-5,-2,-8,8,-14,-6,-1,5,-9,-9,3,-12,15,-29,35,-78,-2,-80,-44,5,11,-13,4,-31,-72,27,-9,1, 8,-4,64,-7,13,59,-18,25,127,93,41,38,127,29,72,42,31,-22,92,46,13,-103,27,-51,41,37,21,-26,10,29,38,37,27,-9,-5,-7,31,-19,-93,25,-53,-59,15,-52,-15,-62,45,-78,-80,-60,45, 65,-8,-1,12,15,16,-3,17,-2,-24,-18,10,22,14,-14,25,2,-7,20,-9,-17,22,-2,4,16,-2,12,-4,-29,6,9,4,8,-11,-32,11,-13,41,-12,-15,-68,-36,16,2,-6,0,-3,-72,-23,-17,7, 
  /* [0][1][][] */ -127,-20,105,-19,9,-5,-13,37,69,54,7,15,57,2,24,24,-16,-59,80,9,-32,-41,21,-40,42,57,2,-13,-18,24,9,-24,-8,1,11,-51,19,27,-75,8,-36,14,94,-37,-46,4,28,-127,-127,-5,14, 0,127,127,127,127,127,-127,127,125,127,127,127,113,109,127,127,127,-127,96,127,-127,-127,127,-127,127,127,127,-127,-127,127,110,127,127,127,127,-127,127,-37,-119,120,-127,127,-40,127,-127,127,127,110,-7,127,23, 113,-3,27,3,12,16,-28,-6,102,65,-11,35,73,42,27,8,-24,-45,82,32,-13,-31,3,-29,8,50,2,17,-31,7,7,-9,32,55,-14,-23,12,65,-35,-52,-45,14,127,12,-33,7,6,-73,-104,7,12, 
  /* [0][2][][] */ -72,17,-1,16,-2,-15,0,-8,-5,11,15,3,-1,-6,18,-11,2,26,30,10,-10,-11,23,9,-6,-21,8,-7,4,0,-23,-2,4,1,0,-14,-40,26,-62,-54,-28,-4,48,9,-4,-1,-3,-79,-46,5,-25, 6,6,-70,-48,-20,-53,-9,-45,61,33,-3,-26,-44,-127,8,-72,-3,13,-127,-14,-14,-95,12,121,7,55,-54,-40,-45,-9,-127,-110,-58,16,31,-50,12,127,-127,-127,-38,19,95,2,-20,11,57,-71,-117,22,-127, 70,14,0,-3,-9,-40,1,-3,7,7,9,-8,-7,-56,27,-12,5,8,-61,-17,-3,-13,8,28,4,-26,8,1,4,-4,-21,-22,-15,13,-24,-9,-43,61,28,-50,-19,1,50,20,5,1,2,-55,-25,20,-39, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant30_scale = { 51, { 0.0063594221137464046, 0.0095287468284368515, 0.004561650101095438, 0.011289763264358044, 0.0096967713907361031, 0.0069313929416239262, 0.013315008021891117, 0.011354175396263599, 0.0039930311031639576, 0.0042892489582300186, 0.0072817122563719749, 0.0097246747463941574, 0.0051208124496042728, 0.014124198816716671, 0.004549137782305479, 0.0075427815318107605, 0.0092501835897564888, 0.011565327644348145, 0.0079624578356742859, 0.0057841897942125797, 0.0098295146599411964, 0.016576701775193214, 0.011282660998404026, 0.0062646758742630482, 0.0083106523379683495, 0.0057919342070817947, 0.0071285506710410118, 0.0052818763069808483, 0.0054609822109341621, 0.0075598899275064468, 0.010986102744936943, 0.016280818730592728, 0.0078533831983804703, 0.0070533542893826962, 0.010419348254799843, 0.0031870566308498383, 0.0077484473586082458, 0.0039774538017809391, 0.0028225567657500505, 0.011941702105104923, 0.0038717270363122225, 0.011019403114914894, 0.0037962275091558695, 0.010119522921741009, 0.016378380358219147, 0.0089300805702805519, 0.0049031656235456467, 0.0062804888002574444, 0.0041820923797786236, 0.011531885713338852, 0.010906684212386608, } };
const TfArray<51, int> quant30_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 3 };
const ALIGN(16) int32_t tensor_data31[51] = { 20005, -35682, 4633, -7472, 6235, -11417, 41826, 13431, -14095, 8855, 36778, -20133, -1625, 32038, 18953, -6388, -5882, 28309, 6208, -5084, 37363, 58584, 21401, 898, 684, -5942, 30520, 3438, -2981, 12475, 9867, 3020, 17946, 33261, 25205, -18415, 14041, 16201, -1105, 2557, -12015, 35039, 7348, 26510, 31300, 14788, 14591, 48637, 68167, -100, 23396, };
const TfArray<1, int> tensor_dimension31 = { 1, { 51 } };
const TfArray<51, float> quant31_scale = { 51, { 4.8959867854136974e-05, 3.3789932786021382e-05, 6.1069658841006458e-05, 5.2686020353576168e-05, 4.5446493459166959e-05, 8.433522452833131e-05, 2.3103673811419867e-05, 4.589051241055131e-05, 6.2572864408139139e-05, 9.0019544586539268e-05, 7.3682356742210686e-05, 5.2870971558149904e-05, 6.8398665462154895e-05, 4.0651604649610817e-05, 7.8863442467991263e-05, 7.2507100412622094e-05, 4.492560401558876e-05, 2.9643788366229273e-05, 0.00012125783541705459, 9.6865944215096533e-05, 4.9039681471185759e-05, 1.9214521671528928e-05, 4.0000555600272492e-05, 5.8268229622626677e-05, 6.9335728767327964e-05, 0.00011022206308552995, 5.3034833399578929e-05, 6.5313281083945185e-05, 4.9478821892989799e-05, 6.4158222812693566e-05, 5.361323565011844e-05, 3.8891226722626016e-05, 5.5941793107194826e-05, 7.9022407589945942e-05, 4.6873792598489672e-05, 9.3418377218768001e-05, 8.9310335170011967e-05, 5.7168956118403003e-05, 6.4879910496529192e-05, 9.820702689466998e-05, 8.0473895650357008e-05, 3.1576357287121937e-05, 5.746435999753885e-05, 6.3099141698330641e-05, 3.547484811861068e-05, 5.8432546211406589e-05, 8.8661246991250664e-05, 2.45155424636323e-05, 3.3404110581614077e-05, 7.737477426417172e-05, 2.9259981602081098e-05, } };
const TfArray<51, int> quant31_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[51*1*1*51] = { 
  /* [0][0][][] */ 24,5,127,-43,-16,-74,19,-12,-82,-7,17,-8,7,31,31,41,-81,-36,-1,51,-34,-17,-46,2,50,2,12,-35,-10,-36,-4,-9,38,-3,19,3,-21,-13,10,-56,43,10,58,-63,65,-18,-24,-35,21,-34,-15, 
  /* [1][0][][] */ 60,-2,66,66,74,-40,-23,114,-25,-31,20,-28,5,54,100,103,-18,2,82,72,-47,-6,-107,-20,56,-47,127,-41,26,103,63,-10,45,-54,38,31,-29,62,-9,37,82,59,94,37,69,-22,-11,-3,-49,-94,-4, 
  /* [2][0][][] */ -1,27,-25,-53,26,95,38,6,-12,-21,80,58,42,-23,-48,43,-43,-10,-65,41,71,-43,32,17,1,-4,-75,17,7,101,86,-6,-24,-23,-44,30,-56,-15,-33,14,-34,2,-59,-44,-68,127,-32,7,19,-39,-21, 
  /* [3][0][][] */ -19,1,-75,-42,58,-56,-28,-13,23,35,81,9,60,35,81,127,97,-73,-2,66,-1,-23,-59,120,35,44,15,16,18,71,-34,-27,-3,15,11,-63,-105,-5,-9,-63,0,21,12,30,20,24,-53,30,7,11,-70, 
  /* [4][0][][] */ -54,-15,-5,6,-5,83,-3,20,6,-39,-14,22,53,43,22,8,13,-7,-55,-22,49,103,-16,7,-79,-45,-5,4,108,-59,21,127,42,-8,-35,45,-41,30,62,83,-23,-29,-8,-6,11,-40,-16,14,37,-19,49, 
  /* [5][0][][] */ 61,-29,25,40,-5,4,10,-41,13,-43,10,41,62,34,26,-4,-51,-54,-5,127,-20,-13,8,-2,-20,-18,29,33,-32,11,29,-88,65,-8,-1,-63,23,11,16,16,30,68,-18,14,19,4,-36,17,34,-119,-44, 
  /* [6][0][][] */ 121,57,54,52,-1,-27,24,-73,127,36,33,103,-21,39,-36,38,-76,-54,18,66,20,-34,-6,42,40,-72,-27,28,9,14,-28,-49,4,32,111,22,24,-11,-92,76,-20,-120,-73,76,-24,-107,12,-36,7,47,11, 
  /* [7][0][][] */ 33,-19,47,-23,-50,1,0,-26,-11,7,-25,-32,2,5,6,-33,0,-23,24,52,-20,-30,18,-5,7,-32,-30,-83,34,-3,-2,-2,7,10,-19,-12,78,6,90,-21,-42,-10,28,-43,35,21,13,-11,-40,21,127, 
  /* [8][0][][] */ 127,14,-82,41,-35,-88,64,53,70,9,-16,21,48,29,-16,123,18,25,-18,-81,41,33,48,-64,-50,108,-6,-15,-66,119,52,-72,14,-12,25,25,-58,-48,-1,31,-3,-2,-73,-54,-13,73,41,59,-21,-21,-41, 
  /* [9][0][][] */ 3,-23,11,-12,-26,-36,-32,-7,28,-1,14,-20,-7,0,-28,34,41,-1,4,-41,29,-41,29,-47,17,-16,-9,19,40,-1,-76,13,-34,-24,2,-72,-16,-19,9,-65,127,40,61,77,12,-4,11,4,12,-23,3, 
  /* [10][0][][] */ 58,-51,-96,-113,-14,-83,32,33,72,17,27,-24,-96,13,96,57,-16,-40,-72,-16,-127,11,-20,-43,-46,-50,-89,-1,-19,-95,0,-39,-32,47,41,41,-80,41,21,-3,5,35,21,1,-69,-37,48,-27,53,34,-26, 
  /* [11][0][][] */ 7,-43,22,62,27,-24,-5,22,-2,33,6,-46,10,69,-11,-25,17,26,-42,71,35,11,8,28,19,14,104,22,76,35,48,-9,76,-6,86,-7,43,2,-37,8,54,-93,32,13,1,127,45,-8,0,-5,31, 
  /* [12][0][][] */ -43,-8,-24,-66,-15,12,50,-35,-1,23,15,-31,-37,-19,64,6,17,5,28,-43,-21,31,-21,33,14,2,-56,-24,-7,-41,-7,8,-40,-17,-53,54,14,50,25,19,127,38,-6,-47,-7,-1,23,-33,74,29,51, 
  /* [13][0][][] */ -4,-13,-16,-127,-4,3,3,-69,0,40,-12,-29,-52,2,-18,40,4,-11,20,-69,28,17,16,-6,-30,-24,11,-3,22,-8,-67,19,29,15,-17,-6,48,-14,34,-48,-35,34,24,8,29,14,124,46,35,-13,20, 
  /* [14][0][][] */ -27,-77,-92,1,-29,-127,-88,-15,-91,20,-23,-98,57,22,-4,50,18,37,-35,80,-32,-60,50,-9,30,59,-8,10,-37,-38,-15,-52,-42,-16,-34,-18,72,-22,-1,-78,69,60,-108,-47,94,-24,20,22,74,-16,55, 
  /* [15][0][][] */ -15,25,24,13,20,-7,-15,1,29,6,6,-26,47,3,-4,18,-9,-33,-2,30,-36,-23,-43,-2,48,16,41,-62,-33,-1,-9,-71,20,-1,-1,2,-5,6,22,-36,64,53,35,43,23,1,-11,-38,-61,-66,127, 
  /* [16][0][][] */ 14,-96,9,-2,-23,-77,65,-67,-59,26,20,-36,-10,-43,42,95,3,-30,78,-54,-44,15,26,85,-33,-43,-33,-46,11,6,-12,-49,81,31,53,-25,61,85,67,127,42,-25,46,81,4,-93,104,-49,27,54,-63, 
  /* [17][0][][] */ -11,9,-3,127,-41,48,49,46,37,-80,13,-7,43,-33,55,-86,27,17,-56,-37,35,9,56,8,-23,17,-52,-66,-36,33,-1,12,18,25,-21,2,-84,-34,-12,-47,-8,57,44,27,-53,40,-32,-3,-46,-121,-7, 
  /* [18][0][][] */ -2,-12,-14,-16,7,-30,-21,-3,-21,-15,15,-15,15,-1,-4,29,-9,6,-13,-9,-21,7,43,-11,5,3,10,-66,-14,-34,8,4,-10,-20,-15,-22,-29,25,127,-22,-52,-14,-26,-26,3,-1,0,43,28,-40,56, 
  /* [19][0][][] */ -19,53,6,-8,-8,12,-45,-20,-47,1,-93,-24,24,-43,94,65,57,4,-58,-40,-21,-34,12,-67,51,63,-13,1,-37,28,-31,-45,-28,-43,-33,-72,22,8,97,-76,-8,127,-74,-40,98,81,-39,-5,16,54,-4, 
  /* [20][0][][] */ 39,-37,36,11,10,-42,-38,-28,-28,20,-29,-2,-27,42,37,33,22,15,-127,-43,26,3,9,-59,-29,20,-44,-37,-3,11,45,21,30,-18,40,20,-7,-35,17,-33,-18,-13,-91,-19,-1,9,22,19,-31,-3,-14, 
  /* [21][0][][] */ 2,5,81,-46,127,45,10,-60,11,-34,2,-44,-12,8,-39,26,46,-27,-4,4,-33,13,71,123,8,-60,-20,-54,-46,-59,-32,-16,-89,-59,12,85,48,5,-23,61,-29,-60,3,10,-35,3,-21,-10,90,68,64, 
  /* [22][0][][] */ -13,32,53,36,5,21,-22,-75,8,-11,127,-43,-39,-21,87,-32,37,21,8,-25,-49,-8,68,59,19,21,10,17,48,-53,39,-6,-11,-29,36,27,-18,28,-11,18,-8,17,-18,-24,-41,-80,35,-5,50,-109,32, 
  /* [23][0][][] */ 43,34,23,76,32,2,-23,69,-50,-66,26,-20,-51,25,65,-12,23,34,30,59,-12,-4,21,33,35,-10,5,-16,5,-19,32,-10,-24,20,32,68,-127,14,-5,-49,44,42,61,-31,-24,-38,-14,-11,-3,-15,-58, 
  /* [24][0][][] */ -52,64,-84,73,42,111,5,31,-50,27,25,27,81,-67,5,60,54,36,-50,-6,17,-18,-22,-21,16,27,-49,-6,-56,8,8,-6,14,-13,-20,-20,-13,-19,-45,-113,-69,23,-103,-46,8,127,4,51,-29,-50,16, 
  /* [25][0][][] */ 46,34,19,-33,-48,-28,-12,18,11,7,15,18,-41,16,-14,0,17,25,5,13,-11,-28,-31,-22,20,-55,-12,47,-5,-23,26,7,3,35,-6,-50,-9,7,-4,-49,17,-49,3,21,2,127,-2,-12,13,40,17, 
  /* [26][0][][] */ 26,-83,-74,-73,14,-7,0,-77,-38,15,12,16,-69,56,58,91,15,19,126,-37,-81,6,-42,-24,-100,-9,-9,-49,43,-71,-49,-34,-82,-23,-42,-97,-28,38,-89,-3,-37,56,26,60,69,-94,46,-41,44,-86,127, 
  /* [27][0][][] */ 20,56,-14,-77,118,36,14,46,38,-33,13,-63,34,-4,20,9,-74,-8,17,80,-43,-57,127,-15,-14,67,-40,-54,7,56,-27,1,67,-22,21,13,-9,-12,32,-52,-39,-7,3,-41,-14,-4,-16,52,41,-66,-30, 
  /* [28][0][][] */ 30,49,25,-5,-47,79,-3,69,22,-16,-22,96,96,-103,-81,62,-3,-59,30,95,44,-14,-3,12,15,-26,-45,5,-50,81,9,-5,-15,34,-40,-2,-66,-40,-15,-4,22,-23,-127,31,-27,90,-14,31,-30,2,38, 
  /* [29][0][][] */ -35,-28,33,32,110,36,3,-22,-39,-26,66,-35,-73,-40,-68,-23,-31,10,-43,9,-21,0,23,87,32,-58,-57,-12,50,-23,-50,127,-13,-24,-12,22,36,109,7,33,-77,29,75,-9,25,3,-3,-2,37,-62,5, 
  /* [30][0][][] */ 18,-24,39,127,-1,-6,21,58,-32,-9,15,49,-36,-14,-29,-16,26,-4,3,11,8,12,-65,13,0,0,28,-58,9,-14,48,27,-46,14,-2,3,14,-4,-55,-41,24,30,-24,4,-11,-6,-20,-98,-17,27,78, 
  /* [31][0][][] */ -14,-18,88,-29,13,23,29,15,29,-40,5,-21,23,-4,15,45,-15,5,-10,12,-13,11,-13,-15,-6,27,3,-24,-17,15,43,24,28,5,-38,76,-34,4,15,-37,127,-1,-29,-69,48,56,-1,-19,9,-4,-17, 
  /* [32][0][][] */ -14,-30,-50,63,-5,-13,-12,39,-63,-79,21,86,-19,64,-52,-4,-78,23,93,127,-72,-59,-90,11,-23,7,2,-57,49,-20,-44,24,62,-26,35,-31,-96,-15,-8,-12,95,-66,-41,-90,104,-32,-2,-102,37,-74,15, 
  /* [33][0][][] */ 50,6,-27,-100,45,30,-4,-127,-24,45,-4,-32,-84,4,-30,37,92,42,37,-108,40,-35,27,-17,-43,-66,45,-30,-31,-27,-50,-64,-123,-11,26,38,13,-1,-12,-19,-4,34,-87,-23,33,-30,107,-68,30,26,-7, 
  /* [34][0][][] */ 32,-127,-4,-14,14,28,-12,-74,-36,4,2,-29,36,21,73,51,39,9,-47,-19,-20,-64,-18,87,18,-38,-24,-23,43,-21,-68,70,30,56,67,19,-51,10,8,-71,-39,-60,-70,33,-1,41,48,13,28,1,6, 
  /* [35][0][][] */ -34,-25,100,63,21,16,0,-66,-83,17,-72,122,14,-34,-66,58,18,15,-37,115,-13,14,-35,73,-18,72,-29,-53,-62,57,-127,-100,77,-21,-52,19,87,37,-3,117,-70,117,29,62,-32,-18,-3,47,-9,-20,-19, 
  /* [36][0][][] */ 41,-32,-14,-13,15,-80,-1,-42,-127,8,-13,10,-47,8,43,52,14,-6,-13,-29,21,0,-16,-6,-24,-7,-1,17,-13,70,68,29,-57,39,19,-13,-1,-28,20,-74,-16,-32,41,-26,5,16,-9,-3,8,-15,-14, 
  /* [37][0][][] */ 77,-62,92,36,109,49,-82,22,20,-127,46,-8,5,4,68,77,50,5,-44,-124,48,-53,-61,5,34,-42,-35,-50,-26,-12,-36,3,-28,-95,-6,-50,-37,43,104,-63,-12,-26,-86,-19,-9,79,-54,-32,14,56,-67, 
  /* [38][0][][] */ 28,-127,73,-49,14,-67,23,-28,-112,-10,-48,20,-24,47,-39,70,27,-52,-2,5,38,-13,6,-11,60,61,66,-28,31,116,86,86,-22,-33,36,-20,2,-8,5,-5,-26,-4,115,16,-10,-59,-78,7,103,-71,32, 
  /* [39][0][][] */ -3,-8,18,7,3,-5,-9,18,9,6,-18,-4,-13,7,-10,29,11,18,13,-1,20,-3,-3,3,-2,2,-7,-102,-6,1,-13,-3,14,3,7,16,-2,2,11,-12,-22,-3,11,-19,-31,5,2,5,6,7,127, 
  /* [40][0][][] */ 3,-25,13,37,21,-11,-27,-18,3,-6,-36,-5,67,51,45,21,-6,6,127,-2,28,37,-28,34,-19,-28,27,-11,80,-43,-28,-67,6,-4,11,3,-36,67,39,18,-21,-43,16,17,-2,9,-2,2,21,-9,-1, 
  /* [41][0][][] */ 84,57,-13,8,-11,-28,-41,-65,22,17,86,127,-49,19,-78,87,-33,43,81,57,-61,-76,-72,-67,30,-13,123,19,-24,10,-72,-46,-23,-53,-51,-89,-54,-9,-22,-81,91,7,-75,-92,44,56,3,-1,-43,-45,13, 
  /* [42][0][][] */ 9,-26,112,17,-9,-75,7,-55,-46,-78,-57,59,68,48,-4,61,-31,-90,11,48,-28,-35,6,36,-85,6,36,-10,-12,11,-49,-9,-82,13,53,-127,40,68,-12,40,85,22,-39,-13,-12,-45,-27,-14,6,-53,60, 
  /* [43][0][][] */ 71,19,-26,-44,3,38,67,10,38,39,-23,7,-86,35,-33,-10,-4,-56,-70,-12,21,-8,-80,51,-41,12,-32,6,44,-51,114,-4,14,-127,34,54,-81,12,-6,-16,-49,30,12,-3,10,-97,29,-56,40,88,10, 
  /* [44][0][][] */ 64,25,68,-42,2,-55,-7,-36,-83,31,62,-19,-106,97,20,1,-22,9,51,40,2,-21,-36,-10,-13,-51,-26,-20,10,-111,19,-7,19,-20,51,-53,37,38,37,61,127,-107,-19,10,31,-88,82,-3,-2,3,-11, 
  /* [45][0][][] */ 67,-22,-65,113,-19,-85,23,9,8,40,40,66,-7,-12,-29,127,-28,16,73,-34,-7,-29,0,20,-11,16,27,-49,-24,93,-71,-68,-63,-73,18,85,-18,-15,-25,-91,-106,18,29,-113,37,-123,86,34,-12,44,5, 
  /* [46][0][][] */ 55,-62,16,-42,-8,67,-11,18,-1,-12,32,26,-27,-12,-66,-6,25,44,-51,7,83,5,-69,11,22,-127,71,-11,15,19,11,-29,-42,64,-14,13,-42,-9,-38,-21,18,-85,3,88,-39,14,23,-37,-24,20,43, 
  /* [47][0][][] */ 2,27,37,25,-61,-32,15,-1,-4,-18,13,53,2,-57,36,-28,-127,-13,24,91,-51,16,11,-7,-45,-55,15,-11,28,-51,1,26,-16,-47,-73,15,83,33,-51,-28,46,54,5,4,17,-32,-52,-5,-20,-35,-23, 
  /* [48][0][][] */ -18,-80,29,-49,-83,-2,18,-21,20,88,-7,3,54,96,-123,-105,33,-66,-121,-69,13,14,-107,-13,-61,34,-116,5,7,0,-12,22,-31,-115,4,36,-127,-46,-48,0,-97,50,105,-32,-47,-2,15,-13,101,94,-43, 
  /* [49][0][][] */ 5,-13,-7,10,12,-10,127,6,-22,-12,84,-31,2,7,-10,10,-37,59,25,2,-9,-14,4,5,14,25,28,-14,-8,-7,1,19,-33,37,-10,-15,-47,-12,4,20,3,2,-49,-27,4,-2,3,32,-3,50,-4, 
  /* [50][0][][] */ 103,90,30,109,-90,-59,22,71,-81,121,-18,51,25,39,-91,-44,20,-93,-71,49,57,-7,-76,4,44,-102,21,2,40,25,13,-44,42,-127,76,-11,-40,12,15,106,-45,24,-46,-6,74,16,53,-5,-29,62,-58, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant32_scale = { 51, { 0.0028618467040359974, 0.0019751198124140501, 0.0035696993581950665, 0.0030796511564403772, 0.0026564798317849636, 0.0049296393990516663, 0.0013504769885912538, 0.0026824339292943478, 0.003657566150650382, 0.0052619040943682194, 0.0043069482780992985, 0.0030904621817171574, 0.003998100757598877, 0.002376204589381814, 0.004609797615557909, 0.0042382511310279369, 0.0026260323356837034, 0.0017327656969428062, 0.0070878732949495316, 0.0056620961986482143, 0.00286651193164289, 0.0011231446405872703, 0.0023381488863378763, 0.0034059474710375071, 0.0040528750978410244, 0.0064428001642227173, 0.0031000403687357903, 0.0038177510723471642, 0.0028921810444444418, 0.003750234842300415, 0.003133849473670125, 0.00227330531924963, 0.0032699606381356716, 0.0046190894208848476, 0.0027399095706641674, 0.0054605756886303425, 0.0052204490639269352, 0.0033416918013244867, 0.0037924195639789104, 0.0057404865510761738, 0.004703933373093605, 0.0018457298865541816, 0.003358958987519145, 0.0036883282009512186, 0.0020736081060022116, 0.0034155522007495165, 0.0051825079135596752, 0.0014330047415569425, 0.0019525674870237708, 0.0045227804221212864, 0.001710331067442894, } };
const TfArray<51, int> quant32_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[51] = { 220, 17609, -1431, 3513, -835, 12529, 9236, 6459, 11714, 4782, -684, -3894, 18195, -264, 21203, 38015, 48264, 23924, 16165, -930, 13742, -202, -395, 446, 4640, 27554, -2156, 7508, -314, 15802, 15301, -1008, 312, 16753, -377, 439, -12278, 2134, 3202, 2414, -244, -255, 809, 908, 34577, 5265, -1294, 16985, 75, -878, 2174, };
const TfArray<1, int> tensor_dimension33 = { 1, { 51 } };
const TfArray<51, float> quant33_scale = { 51, { 0.0002229202218586579, 9.6665025921538472e-05, 6.8939203629270196e-05, 0.00013684781151823699, 0.00016183736443053931, 0.00020598911214619875, 0.00014129818009678274, 4.3409192585386336e-05, 0.00023065625282470137, 9.2169975687284023e-05, 0.00021667532564606518, 0.000225524723646231, 0.00017716301954351366, 0.00018384387658443302, 0.00010613649646984413, 8.6703090346418321e-05, 3.4145487006753683e-05, 4.9970192776527256e-05, 0.000120539654744789, 0.00015116854046937078, 0.00022560443903785199, 0.00010316861880710348, 0.00010415673023089767, 0.00016754094394855201, 9.7095173259731382e-05, 5.3629402827937156e-05, 0.00015092527610249817, 0.0001739610597724095, 0.00012538682494778186, 0.00015306132263503969, 0.00011607078340603039, 8.9388835476711392e-05, 5.250723916105926e-05, 9.6564515843056142e-05, 9.9597389635164291e-05, 0.00014554032532032579, 0.00013870447583030909, 0.00025383461616002023, 0.0002000634849537164, 9.7732801805250347e-05, 0.00024497965932823718, 0.00012167866225354373, 0.00014547145110554993, 4.6048986405367032e-05, 3.6091681977268308e-05, 0.00018693618767429143, 0.00019148140563629568, 4.8320427595172077e-05, 0.00018296399503014982, 0.00020327122183516622, 0.0001534365292172879, } };
const TfArray<51, int> quant33_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*51] = { 
  /* [0][0][][] */ -19,-30,8,-8,3,1,20,13,-1,-25,-3,3,-15,-2,-2,16,-36,-72,16,-6,-8,15,3,5,127,-14,-2,4,0,5,10,-18,-28,-14,-50,-14,-4,9,-5,-19,-2,-9,-4,0,29,1,8,-14,4,-2,1, 19,-26,36,-18,2,-3,-42,24,-26,-35,0,-13,16,5,-41,-102,-95,-85,-15,-23,-25,1,-16,-3,89,-127,-21,14,7,-12,-31,6,12,-76,-1,-127,48,33,-51,77,-32,1,-5,-11,-78,-33,-19,-3,-77,-17,-65, -14,-25,19,-14,4,7,13,20,2,13,-8,2,4,-4,-1,6,-45,27,12,-26,-7,11,0,2,100,2,1,15,5,8,2,-13,2,-4,45,-1,-28,8,-11,-18,-6,-7,0,24,36,0,-12,-7,-13,-2,-16, 
  /* [0][1][][] */ -51,-46,22,-32,24,-27,18,12,-6,-127,-6,-15,-26,29,2,-56,-96,-127,22,-16,0,5,-15,11,-76,-4,-15,18,-12,-19,-7,22,127,-20,-127,6,40,17,-42,-46,-15,11,-7,77,-127,-28,-12,-49,-46,-32,-51, 127,-127,127,127,127,-127,-127,127,-127,6,127,127,-127,101,-127,-86,-11,10,-127,127,-127,127,127,122,-121,-65,127,-127,127,-127,-127,127,116,-127,38,15,127,-127,127,127,127,127,127,127,0,127,127,-127,127,127,127, -38,-45,-8,-5,14,-17,23,22,0,114,-30,-20,-10,-127,9,-21,-79,-18,28,52,-4,-44,-6,4,-95,26,-18,-24,-4,-6,8,14,20,0,98,-5,37,25,-22,-42,-19,3,-16,49,-75,-24,-98,-79,-25,-18,-13, 
  /* [0][2][][] */ -20,-2,1,-14,-37,7,5,13,6,-34,-23,-10,-5,6,5,10,-127,-2,14,-3,0,27,0,-15,-12,6,-16,9,-13,4,2,-10,10,35,-54,17,3,8,-4,-36,0,-10,-5,19,-13,-7,0,-18,-3,-5,-16, 11,22,18,36,-107,9,35,43,-15,-8,-37,-21,-20,-6,-36,-127,-102,0,-5,-8,-12,-89,-1,-127,-17,-97,26,-42,20,10,-22,12,-1,-3,-5,106,25,23,6,115,9,8,-11,-13,-104,-6,19,-47,25,1,25, -7,-5,7,-9,-25,8,12,0,5,37,-24,-7,4,-5,0,-48,-45,27,7,-7,-3,33,5,-9,-38,6,-21,8,-7,3,2,-3,-8,26,57,12,-6,11,5,-16,-4,-14,1,19,-30,-5,-37,-37,2,8,22, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant34_scale = { 51, { 0.016610171645879745, 0.0072026783600449562, 0.0051367795094847679, 0.010196766816079617, 0.012058782391250134, 0.015348604880273342, 0.010528371669352055, 0.003234494011849165, 0.017186596989631653, 0.0068677444942295551, 0.016144853085279465, 0.01680423691868782, 0.013200723566114902, 0.013698524795472622, 0.0079084141179919243, 0.0064603975042700768, 0.0025442393962293863, 0.0037233654875308275, 0.0089816180989146233, 0.011263829655945301, 0.016810176894068718, 0.0076872725039720535, 0.0077608982101082802, 0.012483765371143818, 0.0072347293607890606, 0.0039960197173058987, 0.01124570332467556, 0.012962139211595058, 0.0093427896499633789, 0.011404863558709621, 0.0086486348882317543, 0.0066605168394744396, 0.0039124051108956337, 0.0071951891295611858, 0.0074211740866303444, 0.010844461619853973, 0.010335110127925873, 0.01891365647315979, 0.014907076023519039, 0.0072822403162717819, 0.018253859132528305, 0.0090664876624941826, 0.010839330032467842, 0.0034311895724385977, 0.0026892537716776133, 0.013928938657045364, 0.014267611317336559, 0.0036004385910928249, 0.013632964342832565, 0.015146090649068356, 0.011432820931077003, } };
const TfArray<51, int> quant34_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[51] = { 63008, 3661, 34383, 9545, -3727, 50027, 15409, -4996, 6857, -3164, 43266, 30554, 62488, 15478, -1028, 61402, 3826, 5815, -12990, 4357, 56288, 16024, 20092, 65066, 89414, 33718, -5034, -5530, 3026, 70536, 21040, -23845, -40560, -10372, -5964, -6326, 22643, -26393, 5455, 45746, 15024, 36816, -6356, 5100, -2527, -13480, 23873, 4505, 30822, 4691, -6338, };
const TfArray<1, int> tensor_dimension35 = { 1, { 51 } };
const TfArray<51, float> quant35_scale = { 51, { 3.2560605177422985e-05, 9.443781164009124e-05, 6.0546673921635374e-05, 5.3779021982336417e-05, 3.2362662750529125e-05, 3.924475095118396e-05, 0.0001238202239619568, 8.8100256107281893e-05, 3.5622841096483171e-05, 7.7026896178722382e-05, 5.7168494095094502e-05, 5.853301627212204e-05, 3.3194151910720393e-05, 4.2466555896680802e-05, 6.3827370468061417e-05, 2.2350937797455117e-05, 8.6360167188104242e-05, 9.2248614237178117e-05, 6.0625792684732005e-05, 7.424554496537894e-05, 3.2981257390929386e-05, 6.756345828762278e-05, 8.1112550105899572e-05, 3.4938915632665157e-05, 1.7853746612672694e-05, 7.1467235102318227e-05, 8.8210988906212151e-05, 7.7306409366428852e-05, 9.9812365078832954e-05, 4.3713505874620751e-05, 6.2885810621082783e-05, 6.5862659539561719e-05, 7.3480448918417096e-05, 4.6134417061693966e-05, 4.8623463953845203e-05, 4.3437154090497643e-05, 3.7433117540786043e-05, 6.5921238274313509e-05, 8.4078259533271194e-05, 3.577210009098053e-05, 4.8132587835425511e-05, 5.4399322834797204e-05, 5.7475783250993118e-05, 6.793612556066364e-05, 0.00010384456982137635, 8.3823877503164113e-05, 5.8247154811397195e-05, 9.6366944490000606e-05, 6.9662593887187541e-05, 0.0001003525176201947, 9.3079645012039691e-05, } };
const TfArray<51, int> quant35_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[51*1*1*25] = { 
  /* [0][0][][] */ -39,-127,14,47,-66,-60,46,-8,-22,-18,-28,63,-109,-25,2,22,90,11,0,34,-55,-4,-49,-15,-45, 
  /* [1][0][][] */ 39,-15,2,-26,0,15,12,-23,21,18,-21,-30,12,127,3,-8,16,10,22,-40,-4,7,-10,4,-17, 
  /* [2][0][][] */ -7,127,-16,-91,3,-38,-58,38,-66,-82,-56,64,68,-34,-19,-86,31,-41,37,-4,8,-24,-85,-16,49, 
  /* [3][0][][] */ 35,-87,-91,-44,-25,-23,104,127,-43,27,-84,12,-36,57,-13,-18,2,-5,-7,36,0,104,55,6,60, 
  /* [4][0][][] */ -20,10,-19,63,-11,-61,-14,42,18,51,-33,0,119,66,4,-30,90,127,3,-23,-114,-34,71,4,18, 
  /* [5][0][][] */ -10,6,-127,93,-59,-112,20,0,56,-53,-19,89,-43,14,65,24,99,-18,22,8,-96,-14,-88,6,-42, 
  /* [6][0][][] */ -127,-30,-14,-1,-7,-1,-19,-19,3,-7,2,-6,16,-9,2,1,-4,4,29,-35,9,5,1,-3,-7, 
  /* [7][0][][] */ 127,-34,-16,83,-23,74,14,-60,-50,121,-105,55,-4,-29,5,70,-26,-3,90,-10,-15,55,-94,32,-34, 
  /* [8][0][][] */ 30,-36,33,26,25,19,-74,3,31,-81,-6,-38,1,55,1,-35,124,127,-6,16,-82,-30,49,39,56, 
  /* [9][0][][] */ -2,51,-52,-37,18,3,10,-68,21,-23,127,16,29,-21,-12,-15,-13,16,49,9,19,-26,42,-10,-6, 
  /* [10][0][][] */ 112,-95,-40,-13,-2,-18,-30,103,-25,-46,13,21,-14,-37,-23,42,30,-45,-127,-14,-9,119,-26,-76,43, 
  /* [11][0][][] */ -54,-124,-49,-15,8,19,-61,-127,3,-23,-5,69,101,-71,-13,26,-42,56,29,-16,24,13,-31,-3,-10, 
  /* [12][0][][] */ 24,-61,88,-28,61,-92,-1,-42,56,57,27,-27,-6,-32,37,-5,5,-94,-10,30,-26,-14,-98,-127,16, 
  /* [13][0][][] */ 0,-9,10,-4,6,6,19,3,9,-9,-6,14,4,127,-20,126,6,-53,27,-7,35,-2,-22,5,-41, 
  /* [14][0][][] */ 5,-55,19,-67,41,46,76,-42,-63,42,42,81,127,-48,4,43,-39,51,-29,-88,1,33,20,21,9, 
  /* [15][0][][] */ -69,-59,-1,-77,62,-70,49,-71,-99,27,5,37,-72,5,-32,-33,-47,77,-127,43,11,16,-63,100,115, 
  /* [16][0][][] */ 19,-23,19,127,38,48,-12,-21,-43,0,4,-20,16,-14,-16,-39,-10,-15,51,-2,18,-12,-59,50,-1, 
  /* [17][0][][] */ -125,41,-79,37,25,35,-11,-59,-17,-71,-61,-4,-3,36,-5,18,34,-3,49,-29,-6,5,18,127,-30, 
  /* [18][0][][] */ -9,75,119,61,-68,11,72,43,52,-15,37,-35,-91,109,17,82,25,-127,24,-19,-82,-9,62,-30,83, 
  /* [19][0][][] */ -45,3,110,47,8,-114,-37,-1,-20,86,-127,-15,-4,16,12,0,-16,-15,33,-86,14,6,57,107,4, 
  /* [20][0][][] */ -41,-52,-26,10,79,9,-65,-2,-127,84,-12,-19,72,-34,3,-33,26,-95,-33,-31,-42,20,-22,19,-69, 
  /* [21][0][][] */ -13,35,65,104,-17,-65,-28,97,32,-115,5,-127,0,26,15,-91,-103,-38,65,36,78,-3,2,-12,-26, 
  /* [22][0][][] */ -3,49,-127,-13,-44,-37,115,57,-22,69,-58,60,37,19,-6,-4,45,14,-93,-98,-26,-30,-49,-16,-6, 
  /* [23][0][][] */ -18,-8,-41,-29,14,-86,43,95,-115,-28,-7,-43,-121,127,8,-71,-105,-34,20,-20,17,26,-5,36,-77, 
  /* [24][0][][] */ -31,-5,-23,-25,-61,38,70,25,-119,-75,-32,23,-126,127,8,70,-113,-75,37,-127,65,-54,-14,78,-32, 
  /* [25][0][][] */ -26,-53,-17,90,-36,-118,-65,26,29,-86,-2,106,-6,-27,74,-13,127,27,1,-28,-74,7,-98,42,-42, 
  /* [26][0][][] */ -47,-49,-1,-63,-17,41,-30,11,-15,58,7,40,16,-18,-33,-29,19,127,-15,-4,-29,0,41,-36,12, 
  /* [27][0][][] */ 6,50,7,9,-7,-2,13,-12,-9,3,7,28,-29,11,99,-11,-11,7,-15,-18,4,127,9,21,2, 
  /* [28][0][][] */ -61,-71,-50,27,36,-21,24,109,-4,-39,-18,79,-69,36,0,-40,-24,113,32,11,127,-15,-80,12,-45, 
  /* [29][0][][] */ 21,-50,19,37,-25,-75,-30,25,42,-127,92,-92,-60,-14,13,31,-110,-17,15,-85,57,43,-48,-98,-12, 
  /* [30][0][][] */ 27,18,-63,-65,-20,18,-1,-35,-127,80,7,47,39,63,-4,-19,-19,49,20,20,16,-27,-24,1,-116, 
  /* [31][0][][] */ -1,32,-9,8,56,99,-49,-4,-28,24,26,-36,51,102,-59,-20,120,-100,-16,-8,-15,-7,127,1,60, 
  /* [32][0][][] */ -41,-3,22,82,112,37,-26,91,56,86,127,39,-39,2,6,-92,-55,-50,-5,107,-9,-46,-34,90,59, 
  /* [33][0][][] */ -40,69,118,-11,23,99,99,-24,67,53,7,52,8,11,-7,-23,-65,30,14,-61,-27,9,53,-127,-40, 
  /* [34][0][][] */ -17,95,14,18,17,1,-50,9,6,72,-40,-4,76,127,-1,54,-8,-89,8,-2,-18,-6,19,-28,3, 
  /* [35][0][][] */ -4,70,39,24,9,-22,-1,55,-13,19,-4,-13,127,24,1,-55,-68,-34,-26,19,20,6,14,-3,95, 
  /* [36][0][][] */ -1,40,-67,-58,32,68,23,-23,-72,35,84,-23,-90,11,-7,-27,7,3,127,-29,-28,0,20,-40,36, 
  /* [37][0][][] */ 5,-54,7,-63,-30,102,60,-127,25,29,-27,86,102,-89,-77,119,-20,69,-31,14,115,-41,-30,-10,123, 
  /* [38][0][][] */ -29,127,22,-4,0,-22,-9,17,6,-2,-17,-8,-17,-3,10,-30,-8,-24,-45,-16,13,29,-13,6,25, 
  /* [39][0][][] */ 14,-46,38,33,-20,-45,65,127,5,-114,-32,-58,-71,-40,5,10,41,49,34,27,-31,-86,-20,54,-45, 
  /* [40][0][][] */ 7,-30,-57,13,6,-39,-10,15,51,-1,-18,-4,127,-15,26,-19,-13,-23,9,28,13,-2,-53,17,35, 
  /* [41][0][][] */ -17,33,-53,92,71,-70,1,-14,-21,-35,10,-107,18,-75,-49,16,-65,-45,-71,39,-56,24,127,-25,-93, 
  /* [42][0][][] */ 23,-41,70,19,19,-4,78,-17,36,-39,69,-49,55,0,6,-30,107,127,-82,25,-44,8,-6,40,-6, 
  /* [43][0][][] */ -10,-57,96,-10,6,-89,-3,60,-85,-7,-54,115,38,127,42,31,66,25,6,71,-6,-27,-38,63,-55, 
  /* [44][0][][] */ -1,-2,-64,53,44,56,-76,-28,12,-81,64,127,13,-48,-49,103,-4,16,-49,37,10,-11,21,-53,21, 
  /* [45][0][][] */ -2,17,15,-35,-7,40,-51,-8,35,13,45,39,43,-43,-13,50,-10,-2,-8,-31,39,-17,-13,1,127, 
  /* [46][0][][] */ -51,22,-7,14,54,9,41,4,18,41,127,0,-21,-19,10,-13,6,0,-46,-45,2,-32,-32,-99,-43, 
  /* [47][0][][] */ -19,-126,-14,-11,51,56,6,15,-12,-20,17,-35,11,-8,-22,-12,14,-9,4,71,-6,127,-17,-42,32, 
  /* [48][0][][] */ -53,-79,-74,43,8,17,4,-6,46,11,34,-7,13,4,2,-7,-5,4,42,-127,8,-68,-2,-22,-35, 
  /* [49][0][][] */ 54,75,30,-1,3,-12,8,0,14,15,-41,-14,19,1,7,2,6,14,-49,-17,1,-127,-25,24,-44, 
  /* [50][0][][] */ 18,-18,-12,12,10,11,-8,-25,-1,5,26,20,-9,-1,25,-5,-6,9,19,20,-1,127,4,8,0, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 51,1,1,25 } };
const TfArray<51, float> quant36_scale = { 51, { 0.0023031141608953476, 0.0066798841580748558, 0.0042826570570468903, 0.0038039598148316145, 0.0022891131229698658, 0.002775904955342412, 0.0087581947445869446, 0.0062316088005900383, 0.0025197158101946115, 0.0054483548738062382, 0.0040437076240777969, 0.0041402247734367847, 0.0023479270748794079, 0.0030037933029234409, 0.0045147109776735306, 0.001580952201038599, 0.0061085266061127186, 0.0065250350162386894, 0.0042882533743977547, 0.0052516213618218899, 0.0023328682873398066, 0.0047789765521883965, 0.0057373461313545704, 0.0024713396560400724, 0.0012628517579287291, 0.0050551029853522778, 0.0062394412234425545, 0.0054681259207427502, 0.0070600430481135845, 0.0030919939745217562, 0.0044481116347014904, 0.0046586734242737293, 0.0051975036039948463, 0.0032632327638566494, 0.0034392909146845341, 0.0030724466778337955, 0.0026477624196559191, 0.0046628168784081936, 0.0059471200220286846, 0.0025302732829004526, 0.0034045695792883635, 0.003847835585474968, 0.0040654432959854603, 0.0048053362406790257, 0.0073452536016702652, 0.0059291268698871136, 0.0041200048290193081, 0.0068163378164172173, 0.0049274549819529057, 0.0070982496254146099, 0.0065838168375194073, } };
const TfArray<51, int> quant36_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[25] = { -303, 3708, 731, 1127, -167, 50510, 588, 709, 53379, 35077, -34, 47042, 1241, 380, -254, 38775, -100, -1198, -3358, 52982, 34149, 2338, 56660, 44173, -8615, };
const TfArray<1, int> tensor_dimension37 = { 1, { 25 } };
const TfArray<25, float> quant37_scale = { 25, { 3.4831864468287677e-05, 4.4143049308331683e-05, 4.1577379306545481e-05, 4.8976333346217871e-05, 5.6667882745387033e-05, 4.7165460273390636e-05, 8.3150393038522452e-05, 3.7123500078450888e-05, 4.7358160372823477e-05, 6.6296473960392177e-05, 4.4298976717982441e-05, 4.1399158362764865e-05, 4.3023395846830681e-05, 5.7742683566175401e-05, 8.2693419244606048e-05, 9.0819099568761885e-05, 4.745316255139187e-05, 5.3548119467450306e-05, 4.1062878153752536e-05, 3.7583162338705733e-05, 8.0460784374736249e-05, 4.1310089727630839e-05, 5.7577133702579886e-05, 4.7695248213130981e-05, 5.2446848712861538e-05, } };
const TfArray<25, int> quant37_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[1*3*3*25] = { 
  /* [0][0][][] */ 92,67,93,69,87,-38,63,80,-41,-61,55,-94,62,66,101,-114,73,64,60,-79,-77,55,-40,-55,80, 110,92,114,101,127,-80,92,98,-67,-86,80,-112,82,94,-18,-104,102,94,104,-90,-89,85,-97,-95,106, 39,41,45,38,47,-41,39,41,-20,-38,50,-31,36,44,-89,-38,38,41,47,-15,-18,41,-60,-52,47, 
  /* [0][1][][] */ 109,101,100,90,51,-64,105,95,-73,-87,62,-100,91,98,127,-127,90,86,74,-127,-90,81,-67,-71,81, 127,127,127,127,50,-127,127,127,-127,-127,127,-127,127,127,-30,-115,127,127,127,-124,-127,127,-127,-127,127, 58,56,56,49,1,-65,54,52,-56,-53,73,-38,56,55,-102,-27,44,53,59,-40,-40,63,-72,-69,59, 
  /* [0][2][][] */ 42,42,25,32,8,-16,40,36,-35,-36,21,-34,44,45,59,-52,22,40,31,-65,-50,42,-21,-22,21, 50,52,40,47,-39,-48,40,40,-77,-59,65,-42,61,56,-25,-56,40,57,62,-62,-62,67,-50,-47,43, 29,28,29,18,-16,-29,28,14,-49,-24,58,-4,29,24,-63,2,17,35,35,-26,-23,42,-28,-26,20, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 1,3,3,25 } };
const TfArray<25, float> quant38_scale = { 25, { 0.002089290414005518, 0.0026477954816073179, 0.0024939009454101324, 0.0029377061873674393, 0.0033990619704127312, 0.002829086035490036, 0.0049875401891767979, 0.0022267475724220276, 0.0028406446799635887, 0.0039766058325767517, 0.0026571482885628939, 0.0024832109920680523, 0.0025806361809372902, 0.0034635309129953384, 0.0049601299688220024, 0.0054475255310535431, 0.0028463432099670172, 0.0032119317911565304, 0.0024630401749163866, 0.0022543191444128752, 0.0048262113705277443, 0.0024778684601187706, 0.0034536006860435009, 0.0028608639258891344, 0.0031458751764148474, } };
const TfArray<25, int> quant38_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 3 };
const ALIGN(16) int32_t tensor_data39[25] = { 19475, 20499, 24667, -5802, -24658, 2722, 24171, -1832, 12245, 8792, -20833, -32027, -36021, 5372, 861, 52751, -7223, 11430, -16906, -20379, 3842, 6737, 25937, -14826, 13932, };
const TfArray<1, int> tensor_dimension39 = { 1, { 25 } };
const TfArray<25, float> quant39_scale = { 25, { 0.00015077005082275718, 7.8290278906933963e-05, 7.3158167651854455e-05, 0.00015093531692400575, 9.5897317805793136e-05, 0.00013291049981489778, 9.9640579719562083e-05, 0.00011667473881971091, 0.00011231299140490592, 0.00012092247925465927, 0.00011234948760829866, 7.2218004788737744e-05, 9.2396549007389694e-05, 0.00011593246745178476, 0.00016336132830474526, 3.3703316148603335e-05, 0.00016604806296527386, 0.00010156349162571132, 0.00011960332631133497, 0.00014056479267310351, 7.3311501182615757e-05, 0.00012467757915146649, 5.9464753576321527e-05, 0.00013192757614888251, 4.9966354708885774e-05, } };
const TfArray<25, int> quant39_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[25*1*1*25] = { 
  /* [0][0][][] */ 13,2,-9,5,-67,-53,6,-17,-50,-43,127,-78,0,38,-18,-110,1,-15,-88,26,11,-26,19,-9,-7, 
  /* [1][0][][] */ -19,-56,127,26,-26,11,-48,0,-36,-16,64,-127,54,-56,-11,-30,-35,72,-6,0,-8,105,37,6,85, 
  /* [2][0][][] */ -63,-78,26,16,20,52,126,-34,-99,59,34,-39,-31,-8,-52,111,-48,-120,25,127,-43,19,-46,-59,-40, 
  /* [3][0][][] */ -74,16,-5,-1,16,7,-34,57,52,-17,-34,24,-15,-35,1,-15,49,127,-20,-14,-1,-46,65,16,-37, 
  /* [4][0][][] */ -17,71,-1,-24,127,117,-18,-21,79,-60,18,-13,-74,94,57,114,-38,52,52,76,53,60,4,-52,-17, 
  /* [5][0][][] */ -18,-26,14,-1,-11,26,-3,18,4,127,7,-27,-6,-29,-17,-12,1,20,16,-10,-36,-13,3,60,-11, 
  /* [6][0][][] */ -58,-6,15,-31,47,23,-24,42,-15,-10,22,-31,-3,-4,-30,29,-28,-23,-14,-74,67,-60,23,43,-127, 
  /* [7][0][][] */ 23,52,-20,19,35,6,-22,16,-50,0,-26,63,88,24,22,6,-98,127,-19,-48,-34,-64,-37,-7,62, 
  /* [8][0][][] */ -2,10,2,27,6,38,17,127,9,-48,8,-7,-40,9,-33,11,27,-18,32,-38,48,-86,17,7,-16, 
  /* [9][0][][] */ 29,31,13,-62,2,35,58,-18,-16,-85,24,-34,-54,74,-28,8,-40,-127,49,5,-32,42,-2,-12,-2, 
  /* [10][0][][] */ 6,30,7,23,84,69,13,3,127,54,-16,-25,-22,-102,-14,77,-20,64,75,2,-9,111,-20,25,-89, 
  /* [11][0][][] */ -81,102,-2,-4,13,91,-49,22,42,17,7,119,-62,-42,124,-40,44,106,36,-20,-98,48,-28,-9,127, 
  /* [12][0][][] */ 127,15,-16,50,66,4,-10,22,83,8,9,88,27,-6,-23,27,54,9,74,-1,39,-44,16,2,82, 
  /* [13][0][][] */ -28,24,20,16,55,46,-33,11,127,-5,-3,-58,-76,-6,45,19,-62,-75,28,-9,45,-59,-1,-3,65, 
  /* [14][0][][] */ 10,-15,17,1,12,5,2,1,19,-2,-10,-17,-1,11,-3,-4,-1,-1,127,1,-6,3,-22,-2,-34, 
  /* [15][0][][] */ -11,-28,43,80,66,-59,-91,90,-90,-3,3,29,-13,-33,105,-36,26,87,-69,-104,-123,-25,-6,20,-127, 
  /* [16][0][][] */ -85,-29,2,-11,-15,0,11,0,-1,17,2,-10,52,-19,2,23,127,1,-5,61,27,12,19,14,-26, 
  /* [17][0][][] */ 81,16,36,-18,-16,-2,22,14,-111,-6,4,-17,6,-40,-28,-27,26,90,9,-25,-34,26,3,-15,-127, 
  /* [18][0][][] */ -29,-55,2,22,-17,43,53,12,28,6,33,127,80,-45,16,-65,-50,31,102,18,-34,49,79,31,-1, 
  /* [19][0][][] */ 52,12,103,23,44,39,48,23,28,33,51,127,-5,-27,17,35,31,-40,-72,12,-14,-65,1,16,3, 
  /* [20][0][][] */ -67,-3,1,25,-20,-27,18,-14,-7,1,-16,-1,58,-11,-21,35,127,29,-13,22,43,-8,42,63,-26, 
  /* [21][0][][] */ 13,-3,92,3,-1,-23,-13,-1,24,5,-15,-70,15,22,8,-19,-8,19,127,9,-8,-21,-2,6,-21, 
  /* [22][0][][] */ 77,-71,-16,-86,-46,-38,27,89,-11,-24,-29,-50,22,-10,13,63,-78,9,-18,100,-37,-111,127,87,21, 
  /* [23][0][][] */ 16,96,8,55,72,17,-5,4,-15,-103,-54,79,55,127,-13,18,18,-40,13,-6,16,-3,19,-20,-3, 
  /* [24][0][][] */ -103,-42,-20,15,-112,-53,111,-19,-82,6,-61,-3,-78,42,5,-47,56,63,50,127,-59,26,-22,-63,86, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 25,1,1,25 } };
const TfArray<25, float> quant40_scale = { 25, { 0.0085564916953444481, 0.0044431248679757118, 0.0041518677026033401, 0.0085658710449934006, 0.0054423580877482891, 0.0075429277494549751, 0.0056547955609858036, 0.0066215172410011292, 0.0063739796169102192, 0.0068625845015048981, 0.006376050878316164, 0.0040985113009810448, 0.0052436827681958675, 0.0065793916583061218, 0.0092710712924599648, 0.0019127283012494445, 0.0094235483556985855, 0.0057639246806502342, 0.0067877201363444328, 0.0079773236066102982, 0.0041605695150792599, 0.0070756939239799976, 0.003374739782884717, 0.0074871447868645191, 0.0028356872498989105, } };
const TfArray<25, int> quant40_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[25] = { 16819, 33092, 374, -8, -12, 12257, -699, 11, 9692, 2233, -323, 10666, 1932, 5199, -66, 6781, 1052, 686, 708, 38211, 9042, 11022, -61, 38, 448, };
const TfArray<1, int> tensor_dimension41 = { 1, { 25 } };
const TfArray<25, float> quant41_scale = { 25, { 0.00016061974747572094, 5.1851089665433392e-05, 0.00027720897924154997, 0.00029651861405000091, 0.0003025120822712779, 0.00024177059822250158, 0.00023056573991198093, 0.00047544855624437332, 0.00029677877319045365, 0.00033424244611524045, 0.00032052863389253616, 0.00023993640206754208, 0.0004635546647477895, 0.00044086747220717371, 0.00040082313353195786, 0.00028399634175002575, 0.00019571400480344892, 0.00053534668404608965, 0.00024057437258306891, 5.373696330934763e-05, 0.00016511241847183555, 0.00022278477263171226, 0.0002718833857215941, 8.1021411460824311e-05, 0.00026244414038956165, } };
const TfArray<25, int> quant41_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[1*3*3*25] = { 
  /* [0][0][][] */ 6,-12,-25,27,-17,-78,-14,-127,3,-1,2,10,19,29,9,22,-23,-3,-6,-112,-41,-42,-28,-3,-11, -46,44,127,72,-11,-67,36,88,1,8,-37,-3,-41,-21,57,2,23,1,-6,-127,-127,56,17,-7,8, 27,-15,-34,14,-2,10,-31,40,11,-1,-12,7,16,-4,-52,-2,-15,-5,-14,-23,-4,25,12,-2,-9, 
  /* [0][1][][] */ -93,-118,-58,-74,60,-127,49,123,-30,-127,-1,-6,56,-127,-55,-25,33,-20,10,-76,-49,-7,-126,127,31, -127,-127,-74,-127,127,-83,127,-89,-127,83,127,-127,-127,2,-127,-127,127,127,127,-110,-48,-127,127,40,127, -36,-15,-57,-33,9,25,-23,-39,-35,26,37,33,41,-7,120,-34,10,-39,35,20,-7,-66,-6,5,3, 
  /* [0][2][][] */ 33,-12,18,35,-46,79,-34,21,17,8,-19,18,6,33,28,32,-21,4,-13,-17,44,6,18,-35,-15, 18,-6,-32,67,-108,87,-31,-15,37,7,-58,27,-28,-4,62,-15,8,-36,-47,-2,-19,26,-32,18,-30, 25,16,12,10,-18,-79,-4,-4,19,0,-26,5,9,0,-40,13,-11,5,-23,-11,33,14,14,-9,-10, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 1,3,3,25 } };
const TfArray<25, float> quant42_scale = { 25, { 0.0068263392895460129, 0.0022036712616682053, 0.011781381443142891, 0.01260204054415226, 0.012856763787567616, 0.010275250300765038, 0.0097990436479449272, 0.020206563174724579, 0.012613098137080669, 0.014205303974449635, 0.0136224664747715, 0.010197296738624573, 0.019701072946190834, 0.018736867234110832, 0.017034983262419701, 0.012069844640791416, 0.0083178449422121048, 0.02275223471224308, 0.010224410332739353, 0.0022838208824396133, 0.0070172776468098164, 0.009468352422118187, 0.01155504398047924, 0.0034434099216014147, 0.011153875850141048, } };
const TfArray<25, int> quant42_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 3 };
const ALIGN(16) int32_t tensor_data43[25] = { 32693, -48969, 2338, 257, 1514, 14192, -1639, 50129, 28773, 41292, 23722, 9035, 25939, 9048, -15337, 73805, 3665, 25455, -4780, 21262, 36840, 46335, -26433, -7659, 50024, };
const TfArray<1, int> tensor_dimension43 = { 1, { 25 } };
const TfArray<25, float> quant43_scale = { 25, { 6.8538385676220059e-05, 0.00016738759586587548, 0.00017893810581881553, 6.6555447119753808e-05, 6.2228347815107554e-05, 3.5721499443752691e-05, 9.4645212811883539e-05, 6.371903873514384e-05, 5.2198152843629941e-05, 7.5151605415157974e-05, 0.00018025498138740659, 0.00012159676407463849, 9.4633382104802877e-05, 3.8805752410553396e-05, 9.6499898063484579e-05, 3.2332904083887115e-05, 9.5931238320190459e-05, 6.2610939494334161e-05, 0.0001364250056212768, 0.00017345986270811409, 0.00010957617632811889, 5.8729994634632021e-05, 0.00010639001266099513, 0.0003392366343177855, 5.3396561270346865e-05, } };
const TfArray<25, int> quant43_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const ALIGN(16) int8_t tensor_data44[25*1*1*12] = { 
  /* [0][0][][] */ -127,71,8,-8,0,-20,103,27,-90,23,-58,-9, 
  /* [1][0][][] */ 127,117,49,-56,103,-6,-17,-3,80,0,36,-24, 
  /* [2][0][][] */ 5,0,8,-1,127,-54,-7,-1,16,0,5,2, 
  /* [3][0][][] */ 72,-79,15,-45,3,22,-13,127,-8,74,49,47, 
  /* [4][0][][] */ -45,15,12,-7,-41,0,9,0,-26,-9,127,-11, 
  /* [5][0][][] */ 53,21,16,-2,127,7,-4,16,34,0,10,14, 
  /* [6][0][][] */ 29,-2,127,21,-98,69,-17,-34,23,-22,-96,-26, 
  /* [7][0][][] */ -24,-32,-30,17,-40,-33,9,-22,-3,-12,-127,14, 
  /* [8][0][][] */ -19,-127,75,-5,39,-61,104,1,51,-21,-41,-5, 
  /* [9][0][][] */ 28,-48,-47,-4,-4,9,-24,1,-2,8,-127,28, 
  /* [10][0][][] */ 13,-45,3,-10,-28,-127,-4,0,16,0,-6,0, 
  /* [11][0][][] */ 5,14,33,5,123,-127,-17,4,38,7,-8,-6, 
  /* [12][0][][] */ 14,50,-5,15,-20,-6,-35,-16,-127,-20,0,-2, 
  /* [13][0][][] */ -70,-8,24,-14,-21,38,8,-4,6,2,127,-38, 
  /* [14][0][][] */ -72,8,39,20,38,-17,95,41,127,28,-58,-12, 
  /* [15][0][][] */ -51,-49,-115,-5,-46,124,-74,-15,-55,11,-127,-32, 
  /* [16][0][][] */ 31,23,9,-127,5,-14,-15,104,30,57,-32,19, 
  /* [17][0][][] */ 58,-127,10,-14,50,-1,-13,18,-59,14,55,25, 
  /* [18][0][][] */ 1,21,-17,-8,56,127,8,5,-34,-5,-31,1, 
  /* [19][0][][] */ -44,-50,-127,-15,-17,1,22,-3,11,-2,54,-5, 
  /* [20][0][][] */ -44,-90,62,29,-11,31,9,-59,-127,-39,-14,-31, 
  /* [21][0][][] */ 27,-30,-48,61,-37,-38,2,-49,32,-1,-127,-5, 
  /* [22][0][][] */ 3,53,-5,-24,34,127,11,16,-5,8,66,4, 
  /* [23][0][][] */ 10,33,-5,0,-25,6,14,-3,15,-52,2,127, 
  /* [24][0][][] */ 47,9,5,-18,-21,-72,-72,-2,-127,-11,-24,0, 
};
const TfArray<4, int> tensor_dimension44 = { 4, { 25,1,1,12 } };
const TfArray<25, float> quant44_scale = { 25, { 0.0046212687157094479, 0.011286274529993534, 0.012065079994499683, 0.0044875671155750751, 0.0041958079673349857, 0.0024085575714707375, 0.0063815475441515446, 0.0042963195592164993, 0.0035195122472941875, 0.0050671715289354324, 0.012153871357440948, 0.0081987828016281128, 0.0063807498663663864, 0.0026165163144469261, 0.0065066013485193253, 0.002180078299716115, 0.0064682592637836933, 0.0042216046713292599, 0.0091985920444130898, 0.011695703491568565, 0.0073882825672626495, 0.003959928173571825, 0.0071734525263309479, 0.022873366251587868, 0.003600316122174263, } };
const TfArray<25, int> quant44_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const ALIGN(16) int32_t tensor_data45[12] = { 34440, 61059, 53588, 8284, 338, 57338, 160, -255, 81818, -1217, 50400, -252, };
const TfArray<1, int> tensor_dimension45 = { 1, { 12 } };
const TfArray<12, float> quant45_scale = { 12, { 0.00010157140059163794, 8.0332443758379668e-05, 0.00017176117398776114, 9.0197310782968998e-05, 7.2708193329162896e-05, 5.9547866840148345e-05, 9.4484159490093589e-05, 4.1876370232785121e-05, 3.8582453271374106e-05, 4.2081384890479967e-05, 0.00017483564442954957, 0.00022875305148772895, } };
const TfArray<12, int> quant45_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const ALIGN(16) int8_t tensor_data46[1*3*3*12] = { 
  /* [0][0][][] */ -105,-68,-72,-80,74,-50,127,28,-81,-1,-80,-108, -97,-101,-87,-127,98,-85,126,106,-93,-103,-127,36, 1,-37,-26,-59,45,-45,64,31,-36,82,-69,75, 
  /* [0][1][][] */ -127,-100,-106,-91,98,-80,124,36,-103,9,-74,-127, -121,-127,-127,-117,127,-127,125,127,-127,-110,-125,41, -6,-52,-42,-51,61,-72,76,26,-41,127,-71,86, 
  /* [0][2][][] */ -31,-42,-64,-11,58,-23,67,3,-44,3,1,-32, -39,-56,-77,-16,72,-54,65,39,-52,-57,5,10, -7,-23,-16,-6,36,-29,37,-2,-12,62,7,25, 
};
const TfArray<4, int> tensor_dimension46 = { 4, { 1,3,3,12 } };
const TfArray<12, float> quant46_scale = { 12, { 0.0043167844414710999, 0.0034141286741942167, 0.0072998497635126114, 0.0038333856500685215, 0.0030900982674211264, 0.0025307843461632729, 0.0040155765600502491, 0.0017797456821426749, 0.0016397541621699929, 0.0017884587869048119, 0.0074305147863924503, 0.0097220046445727348, } };
const TfArray<12, int> quant46_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 3 };
const ALIGN(16) int32_t tensor_data47[12] = { 1155, 13915, 24636, -7565, -8258, 15803, -15566, -9745, 14733, -10509, 25372, 10759, };
const TfArray<1, int> tensor_dimension47 = { 1, { 12 } };
const TfArray<12, float> quant47_scale = { 12, { 9.2747141025029123e-05, 8.9340726844966412e-05, 5.4830794397275895e-05, 0.00031294993823394179, 0.00015453877858817577, 0.00018826495215762407, 0.00029461673693731427, 0.00035054239560849965, 0.00024135748390108347, 0.00027421014965511858, 6.0005197155987844e-05, 9.9490993306972086e-05, } };
const TfArray<12, int> quant47_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const ALIGN(16) int8_t tensor_data48[12*1*1*12] = { 
  /* [0][0][][] */ 6,-33,-39,29,103,49,2,20,-3,127,-5,21, 
  /* [1][0][][] */ 13,127,25,-99,1,-102,-34,-51,13,43,-22,29, 
  /* [2][0][][] */ -34,-27,84,18,22,34,41,-34,40,-9,-5,127, 
  /* [3][0][][] */ 127,-24,-31,6,12,-38,-7,13,-7,-13,108,-2, 
  /* [4][0][][] */ 0,6,9,0,-2,-4,110,-2,127,6,0,4, 
  /* [5][0][][] */ 0,-36,17,15,-4,22,-127,-6,54,6,8,2, 
  /* [6][0][][] */ -1,48,15,0,127,-4,4,7,2,4,-4,-13, 
  /* [7][0][][] */ 127,-44,40,50,38,-76,-1,38,-13,-2,127,-5, 
  /* [8][0][][] */ 13,-14,10,-1,-127,-5,-2,-12,48,65,10,-31, 
  /* [9][0][][] */ 127,-25,-10,26,36,-37,22,8,-5,7,76,2, 
  /* [10][0][][] */ 6,-1,127,2,-11,14,52,-110,-16,1,22,-24, 
  /* [11][0][][] */ -13,-7,98,-27,-6,9,19,-127,-1,4,0,2, 
};
const TfArray<4, int> tensor_dimension48 = { 4, { 12,1,1,12 } };
const TfArray<12, float> quant48_scale = { 12, { 0.003941753413528204, 0.0037969807162880898, 0.0023303087800741196, 0.013300372287631035, 0.0065678977407515049, 0.0080012604594230652, 0.012521211057901382, 0.014898051507771015, 0.010257693007588387, 0.011653930880129337, 0.0025502208154648542, 0.0042283670045435429, } };
const TfArray<12, int> quant48_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const ALIGN(16) int32_t tensor_data49[12] = { 1225, 24449, 6920, 2640, 993, 2323, 19005, 935, -85, 466, 8014, 2, };
const TfArray<1, int> tensor_dimension49 = { 1, { 12 } };
const TfArray<12, float> quant49_scale = { 12, { 0.00022056310262996703, 0.00012216309551149607, 0.00081059004878625274, 0.00023064803099259734, 0.00030416372464969754, 0.0002305877860635519, 0.00013250859046820551, 8.3277889643795788e-05, 0.00022091927530709654, 0.00064907607156783342, 0.00023286347277462482, 0.00042265723459422588, } };
const TfArray<12, int> quant49_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const ALIGN(16) int8_t tensor_data50[1*3*3*12] = { 
  /* [0][0][][] */ 57,-42,0,-60,-8,-12,21,3,26,3,-49,-9, -32,-58,-10,6,19,-22,-32,35,-48,18,10,4, -4,31,1,-8,-5,0,15,-10,-1,-2,1,-7, 
  /* [0][1][][] */ 127,-71,-4,-127,6,-127,23,108,-79,10,-127,51, -3,-127,-127,-16,127,-35,-127,127,127,-127,1,122, 20,-18,11,3,-23,0,3,80,14,29,3,19, 
  /* [0][2][][] */ 23,-14,-1,-51,-4,-3,17,19,10,7,-44,-43, -13,-44,-6,10,-7,-13,-46,30,-33,20,10,-127, -12,28,3,-3,2,1,-4,9,-10,4,1,-11, 
};
const TfArray<4, int> tensor_dimension50 = { 4, { 1,3,3,12 } };
const TfArray<12, float> quant50_scale = { 12, { 0.010015197098255157, 0.0055471085943281651, 0.036806788295507431, 0.010473127476871014, 0.013811283744871616, 0.010470392182469368, 0.0060168709605932236, 0.003781432518735528, 0.01003137044608593, 0.029472857713699341, 0.010573725216090679, 0.019191766157746315, } };
const TfArray<12, int> quant50_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 3 };
const ALIGN(16) int32_t tensor_data51[12] = { 3282, -2803, -5413, 13758, 17394, -16233, -3106, -31755, 11842, 6334, -4391, 47639, };
const TfArray<1, int> tensor_dimension51 = { 1, { 12 } };
const TfArray<12, float> quant51_scale = { 12, { 0.00012123562919441611, 0.00012562047049868852, 4.7292574890889227e-05, 0.00019847268413286656, 7.4340583523735404e-05, 0.0002054711221717298, 0.00019170386076439172, 0.00019730420899577439, 0.00023763741774018854, 0.0002014463534578681, 0.00012432564108166844, 0.000108819775050506, } };
const TfArray<12, int> quant51_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const ALIGN(16) int8_t tensor_data52[12*1*1*6] = { 
  /* [0][0][][] */ 95,21,-18,127,-22,-23, 
  /* [1][0][][] */ 28,127,-26,28,-45,70, 
  /* [2][0][][] */ -13,-21,77,-1,127,1, 
  /* [3][0][][] */ -127,11,-16,16,-32,-14, 
  /* [4][0][][] */ 7,61,-7,3,-18,-127, 
  /* [5][0][][] */ 127,-8,22,-34,42,-8, 
  /* [6][0][][] */ 1,-10,127,1,-71,2, 
  /* [7][0][][] */ -14,-3,78,-8,127,6, 
  /* [8][0][][] */ 0,1,-127,-1,75,4, 
  /* [9][0][][] */ -9,-127,36,-6,60,13, 
  /* [10][0][][] */ 127,-28,20,-34,36,-5, 
  /* [11][0][][] */ 2,-12,-96,-19,-127,-1, 
};
const TfArray<4, int> tensor_dimension52 = { 4, { 12,1,1,6 } };
const TfArray<12, float> quant52_scale = { 12, { 0.0071285455487668514, 0.007386370562016964, 0.0027807606384158134, 0.011670014820992947, 0.0043711592443287373, 0.012081515975296497, 0.011272014118731022, 0.011601309292018414, 0.013972865417599678, 0.011844863183796406, 0.0073102354072034359, 0.0063985045999288559, } };
const TfArray<12, int> quant52_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const ALIGN(16) int32_t tensor_data53[6] = { 7503, 63082, 65597, 265, -25725, 4050, };
const TfArray<1, int> tensor_dimension53 = { 1, { 6 } };
const TfArray<6, float> quant53_scale = { 6, { 0.00033080947468988597, 4.6278903027996421e-05, 0.00012008541671093553, 0.00020402087830007076, 0.00013552360178437084, 5.2200779464328662e-05, } };
const TfArray<6, int> quant53_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const ALIGN(16) int8_t tensor_data54[1*3*3*6] = { 
  /* [0][0][][] */ -79,-76,-50,-24,51,35, 50,-98,-89,81,87,54, -8,-41,-39,-60,37,23, 
  /* [0][1][][] */ -127,-98,-72,-38,73,64, 84,-127,-127,127,127,127, -7,-49,-59,-93,53,72, 
  /* [0][2][][] */ -59,-39,-28,-13,30,35, 45,-49,-47,72,47,82, 2,-11,-14,-44,15,52, 
};
const TfArray<4, int> tensor_dimension54 = { 4, { 1,3,3,6 } };
const TfArray<6, float> quant54_scale = { 6, { 0.014059402979910374, 0.0019668533932417631, 0.0051036300137639046, 0.0086708869785070419, 0.0057597528211772442, 0.0022185330744832754, } };
const TfArray<6, int> quant54_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 3 };
const ALIGN(16) int32_t tensor_data55[6] = { 32048, -20173, -10101, -5911, 30587, -3086, };
const TfArray<1, int> tensor_dimension55 = { 1, { 6 } };
const TfArray<6, float> quant55_scale = { 6, { 8.6226194980554283e-05, 0.00046392332296818495, 0.00010131970338989049, 8.6783118604216725e-05, 0.00013893401774112135, 0.00059213134227320552, } };
const TfArray<6, int> quant55_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const ALIGN(16) int8_t tensor_data56[6*1*1*3] = { 
  /* [0][0][][] */ -127,11,9, 
  /* [1][0][][] */ 127,-4,-3, 
  /* [2][0][][] */ 110,1,127, 
  /* [3][0][][] */ 127,-7,-19, 
  /* [4][0][][] */ -127,0,58, 
  /* [5][0][][] */ 0,127,-1, 
};
const TfArray<4, int> tensor_dimension56 = { 4, { 6,1,1,3 } };
const TfArray<6, float> quant56_scale = { 6, { 0.004467720165848732, 0.024037702009081841, 0.0052497745491564274, 0.0044965767301619053, 0.0071987207047641277, 0.030680667608976364, } };
const TfArray<6, int> quant56_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const ALIGN(8) int32_t tensor_data57[3] = { 30455, 2236, 10180, };
const TfArray<1, int> tensor_dimension57 = { 1, { 3 } };
const TfArray<3, float> quant57_scale = { 3, { 0.00012738521036226302, 0.00022916760644875467, 0.00012320262612774968, } };
const TfArray<3, int> quant57_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const ALIGN(16) int8_t tensor_data58[1*3*3*3] = { 
  /* [0][0][][] */ -5,-1,-3, -9,127,38, 18,-5,-41, 
  /* [0][1][][] */ 12,-1,65, 41,-121,127, -127,-4,-79, 
  /* [0][2][][] */ -3,10,-59, -13,-16,-15, 36,11,-2, 
};
const TfArray<4, int> tensor_dimension58 = { 4, { 1,3,3,3 } };
const TfArray<3, float> quant58_scale = { 3, { 0.0093908132985234261, 0.01689419150352478, 0.0090824738144874573, } };
const TfArray<3, int> quant58_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 3 };
const ALIGN(8) int32_t tensor_data59[3] = { 89434, 114670, 71568, };
const TfArray<1, int> tensor_dimension59 = { 1, { 3 } };
const TfArray<3, float> quant59_scale = { 3, { 1.8226137399324216e-05, 9.5429950306424871e-06, 1.9101027646684088e-05, } };
const TfArray<3, int> quant59_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const ALIGN(16) int8_t tensor_data60[3*3*3*3] = { 
  /* [0][0][][] */ 32,64,21, -3,-9,14, -33,-72,-8, 
  /* [0][1][][] */ 79,115,34, -6,-12,20, -74,-127,-16, 
  /* [0][2][][] */ 33,21,24, -2,-10,11, -29,-36,-16, 
  /* [1][0][][] */ -8,-38,-11, -26,-77,-18, -10,-41,-14, 
  /* [1][1][][] */ 50,80,0, 73,127,2, 54,83,1, 
  /* [1][2][][] */ -41,-30,16, -61,-64,15, -42,-36,18, 
  /* [2][0][][] */ 17,3,-21, 49,11,-56, 49,31,-75, 
  /* [2][1][][] */ 55,-81,24, 68,-99,33, 47,-41,-4, 
  /* [2][2][][] */ 42,-98,56, 30,-127,95, 18,-74,52, 
};
const TfArray<4, int> tensor_dimension60 = { 4, { 3,3,3,3 } };
const TfArray<3, float> quant60_scale = { 3, { 0.0046476647257804871, 0.0024334636982530355, 0.004870761651545763, } };
const TfArray<3, int> quant60_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,48,48,3 } };
const TfArray<1, float> quant61_scale = { 1, { 0.013564875349402428, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,48,48,3 } };
const TfArray<1, float> quant62_scale = { 1, { 0.019299820065498352, } };
const TfArray<1, int> quant62_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,48,48,6 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,49,49,6 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,24,24,6 } };
const TfArray<1, float> quant65_scale = { 1, { 0.017007064074277878, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,24,24,12 } };
const TfArray<1, float> quant66_scale = { 1, { 0.02202284149825573, } };
const TfArray<1, int> quant66_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,24,24,12 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,24,24,12 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,25,25,12 } };
const TfArray<1, float> quant69_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,12 } };
const TfArray<1, float> quant70_scale = { 1, { 0.014831075444817543, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,25 } };
const TfArray<1, float> quant71_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfArray<4, int> tensor_dimension72 = { 4, { 1,12,12,25 } };
const TfArray<1, float> quant72_scale = { 1, { 0.017620544880628586, } };
const TfArray<1, int> quant72_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const TfArray<4, int> tensor_dimension73 = { 4, { 1,12,12,25 } };
const TfArray<1, float> quant73_scale = { 1, { 0.016671624034643173, } };
const TfArray<1, int> quant73_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const TfArray<4, int> tensor_dimension74 = { 4, { 1,13,13,25 } };
const TfArray<1, float> quant74_scale = { 1, { 0.016671624034643173, } };
const TfArray<1, int> quant74_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const TfArray<4, int> tensor_dimension75 = { 4, { 1,6,6,25 } };
const TfArray<1, float> quant75_scale = { 1, { 0.014137642458081245, } };
const TfArray<1, int> quant75_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant75 = { (TfLiteFloatArray*)&quant75_scale, (TfLiteIntArray*)&quant75_zero, 0 };
const TfArray<4, int> tensor_dimension76 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant76_scale = { 1, { 0.013420705683529377, } };
const TfArray<1, int> quant76_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant76 = { (TfLiteFloatArray*)&quant76_scale, (TfLiteIntArray*)&quant76_zero, 0 };
const TfArray<4, int> tensor_dimension77 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant77_scale = { 1, { 0.017107788473367691, } };
const TfArray<1, int> quant77_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 0 };
const TfArray<4, int> tensor_dimension78 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant78_scale = { 1, { 0.015758262947201729, } };
const TfArray<1, int> quant78_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 0 };
const TfArray<4, int> tensor_dimension79 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant79_scale = { 1, { 0.020705655217170715, } };
const TfArray<1, int> quant79_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 0 };
const TfArray<4, int> tensor_dimension80 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant80_scale = { 1, { 0.01992352120578289, } };
const TfArray<1, int> quant80_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 0 };
const TfArray<4, int> tensor_dimension81 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant81_scale = { 1, { 0.019749894738197327, } };
const TfArray<1, int> quant81_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const TfArray<4, int> tensor_dimension82 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant82_scale = { 1, { 0.015825161710381508, } };
const TfArray<1, int> quant82_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const TfArray<4, int> tensor_dimension83 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant83_scale = { 1, { 0.016888849437236786, } };
const TfArray<1, int> quant83_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 0 };
const TfArray<4, int> tensor_dimension84 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant84_scale = { 1, { 0.017167989164590836, } };
const TfArray<1, int> quant84_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant84 = { (TfLiteFloatArray*)&quant84_scale, (TfLiteIntArray*)&quant84_zero, 0 };
const TfArray<4, int> tensor_dimension85 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant85_scale = { 1, { 0.018145924434065819, } };
const TfArray<1, int> quant85_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant85 = { (TfLiteFloatArray*)&quant85_scale, (TfLiteIntArray*)&quant85_zero, 0 };
const TfArray<4, int> tensor_dimension86 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant86_scale = { 1, { 0.01635446771979332, } };
const TfArray<1, int> quant86_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const TfArray<4, int> tensor_dimension87 = { 4, { 1,7,7,51 } };
const TfArray<1, float> quant87_scale = { 1, { 0.01635446771979332, } };
const TfArray<1, int> quant87_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const TfArray<4, int> tensor_dimension88 = { 4, { 1,3,3,51 } };
const TfArray<1, float> quant88_scale = { 1, { 0.016012769192457199, } };
const TfArray<1, int> quant88_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const TfArray<4, int> tensor_dimension89 = { 4, { 1,3,3,102 } };
const TfArray<1, float> quant89_scale = { 1, { 0.01436217688024044, } };
const TfArray<1, int> quant89_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 0 };
const TfArray<4, int> tensor_dimension90 = { 4, { 1,3,3,102 } };
const TfArray<1, float> quant90_scale = { 1, { 0.016165856271982193, } };
const TfArray<1, int> quant90_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 0 };
const TfArray<4, int> tensor_dimension91 = { 4, { 1,3,3,102 } };
const TfArray<1, float> quant91_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant91_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 0 };
const TfArray<4, int> tensor_dimension92 = { 4, { 1,1,1,102 } };
const TfArray<1, float> quant92_scale = { 1, { 0.023439131677150726, } };
const TfArray<1, int> quant92_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const TfArray<2, int> tensor_dimension93 = { 2, { 1,64 } };
const TfArray<1, float> quant93_scale = { 1, { 0.026691000908613205, } };
const TfArray<1, int> quant93_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 0 };
const TfArray<2, int> tensor_dimension94 = { 2, { 1,3 } };
const TfArray<1, float> quant94_scale = { 1, { 0.052242238074541092, } };
const TfArray<1, int> quant94_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant94 = { (TfLiteFloatArray*)&quant94_scale, (TfLiteIntArray*)&quant94_zero, 0 };
const TfArray<2, int> tensor_dimension95 = { 2, { 1,3 } };
const TfArray<1, float> quant95_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant95_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,60,59 } };
const TfArray<1, int> outputs0 = { 1, { 61 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 61,58,57 } };
const TfArray<1, int> outputs1 = { 1, { 62 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 62,56,55 } };
const TfArray<1, int> outputs2 = { 1, { 63 } };
const TfArray<2, int> inputs3 = { 2, { 63,1 } };
const TfArray<1, int> outputs3 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata4 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 64,54,53 } };
const TfArray<1, int> outputs4 = { 1, { 65 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 65,52,51 } };
const TfArray<1, int> outputs5 = { 1, { 66 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 66,50,49 } };
const TfArray<1, int> outputs6 = { 1, { 67 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 67,48,47 } };
const TfArray<1, int> outputs7 = { 1, { 68 } };
const TfArray<2, int> inputs8 = { 2, { 68,1 } };
const TfArray<1, int> outputs8 = { 1, { 69 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 69,46,45 } };
const TfArray<1, int> outputs9 = { 1, { 70 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 70,44,43 } };
const TfArray<1, int> outputs10 = { 1, { 71 } };
const TfLiteDepthwiseConvParams opdata11 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 71,42,41 } };
const TfArray<1, int> outputs11 = { 1, { 72 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 72,40,39 } };
const TfArray<1, int> outputs12 = { 1, { 73 } };
const TfArray<2, int> inputs13 = { 2, { 73,1 } };
const TfArray<1, int> outputs13 = { 1, { 74 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 74,38,37 } };
const TfArray<1, int> outputs14 = { 1, { 75 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 75,36,35 } };
const TfArray<1, int> outputs15 = { 1, { 76 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 76,34,33 } };
const TfArray<1, int> outputs16 = { 1, { 77 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 77,32,31 } };
const TfArray<1, int> outputs17 = { 1, { 78 } };
const TfLiteDepthwiseConvParams opdata18 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 78,30,29 } };
const TfArray<1, int> outputs18 = { 1, { 79 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 79,28,27 } };
const TfArray<1, int> outputs19 = { 1, { 80 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 80,26,25 } };
const TfArray<1, int> outputs20 = { 1, { 81 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 81,24,23 } };
const TfArray<1, int> outputs21 = { 1, { 82 } };
const TfLiteDepthwiseConvParams opdata22 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 82,22,21 } };
const TfArray<1, int> outputs22 = { 1, { 83 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 83,20,19 } };
const TfArray<1, int> outputs23 = { 1, { 84 } };
const TfLiteDepthwiseConvParams opdata24 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 84,18,17 } };
const TfArray<1, int> outputs24 = { 1, { 85 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 85,16,15 } };
const TfArray<1, int> outputs25 = { 1, { 86 } };
const TfArray<2, int> inputs26 = { 2, { 86,1 } };
const TfArray<1, int> outputs26 = { 1, { 87 } };
const TfLiteDepthwiseConvParams opdata27 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs27 = { 3, { 87,14,13 } };
const TfArray<1, int> outputs27 = { 1, { 88 } };
const TfLiteConvParams opdata28 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs28 = { 3, { 88,12,11 } };
const TfArray<1, int> outputs28 = { 1, { 89 } };
const TfLiteDepthwiseConvParams opdata29 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs29 = { 3, { 89,10,9 } };
const TfArray<1, int> outputs29 = { 1, { 90 } };
const TfLiteConvParams opdata30 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs30 = { 3, { 90,8,7 } };
const TfArray<1, int> outputs30 = { 1, { 91 } };
const ALIGN(1) uint8_t opdata31[1] = { 1,  }; /* op type 40=MEAN */
const TfArray<2, int> inputs31 = { 2, { 91,2 } };
const TfArray<1, int> outputs31 = { 1, { 92 } };
const TfLiteFullyConnectedParams opdata32 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs32 = { 3, { 92,6,5 } };
const TfArray<1, int> outputs32 = { 1, { 93 } };
const TfLiteFullyConnectedParams opdata33 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs33 = { 3, { 93,4,3 } };
const TfArray<1, int> outputs33 = { 1, { 94 } };
const TfLiteSoftmaxParams opdata34 = { 1 };
const TfArray<1, int> inputs34 = { 1, { 94 } };
const TfArray<1, int> outputs34 = { 1, { 95 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 6528, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 10404, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 5202, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1275, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 625, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data44, (TfLiteIntArray*)&tensor_dimension44, 300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data45, (TfLiteIntArray*)&tensor_dimension45, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data46, (TfLiteIntArray*)&tensor_dimension46, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data47, (TfLiteIntArray*)&tensor_dimension47, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data48, (TfLiteIntArray*)&tensor_dimension48, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data49, (TfLiteIntArray*)&tensor_dimension49, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data50, (TfLiteIntArray*)&tensor_dimension50, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data51, (TfLiteIntArray*)&tensor_dimension51, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data52, (TfLiteIntArray*)&tensor_dimension52, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data53, (TfLiteIntArray*)&tensor_dimension53, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data54, (TfLiteIntArray*)&tensor_dimension54, 54, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data55, (TfLiteIntArray*)&tensor_dimension55, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data56, (TfLiteIntArray*)&tensor_dimension56, 18, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data57, (TfLiteIntArray*)&tensor_dimension57, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data58, (TfLiteIntArray*)&tensor_dimension58, 27, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data59, (TfLiteIntArray*)&tensor_dimension59, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data60, (TfLiteIntArray*)&tensor_dimension60, 81, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension62, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 14416, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 14406, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 14416, (TfLiteIntArray*)&tensor_dimension65, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension66, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 7504, (TfLiteIntArray*)&tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension69, 7500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 7504, (TfLiteIntArray*)&tensor_dimension70, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3600, (TfLiteIntArray*)&tensor_dimension71, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension72, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant72))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4240, (TfLiteIntArray*)&tensor_dimension73, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant73))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension74, 4225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant74))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4240, (TfLiteIntArray*)&tensor_dimension75, 900, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant75))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1840, (TfLiteIntArray*)&tensor_dimension76, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant76))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension77, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant77))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1840, (TfLiteIntArray*)&tensor_dimension78, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant78))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension79, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant79))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1840, (TfLiteIntArray*)&tensor_dimension80, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant80))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension81, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant81))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1840, (TfLiteIntArray*)&tensor_dimension82, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant82))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension83, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant83))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1840, (TfLiteIntArray*)&tensor_dimension84, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant84))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension85, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant85))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2512, (TfLiteIntArray*)&tensor_dimension86, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant86))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension87, 2499, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant87))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3696, (TfLiteIntArray*)&tensor_dimension88, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant88))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2768, (TfLiteIntArray*)&tensor_dimension89, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant89))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1840, (TfLiteIntArray*)&tensor_dimension90, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant90))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension91, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant91))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1344, (TfLiteIntArray*)&tensor_dimension92, 102, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant92))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension93, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant93))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension94, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant94))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension95, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant95))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs28, (TfLiteIntArray*)&outputs28, const_cast<void*>(static_cast<const void*>(&opdata28)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs29, (TfLiteIntArray*)&outputs29, const_cast<void*>(static_cast<const void*>(&opdata29)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs30, (TfLiteIntArray*)&outputs30, const_cast<void*>(static_cast<const void*>(&opdata30)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs31, (TfLiteIntArray*)&outputs31, const_cast<void*>(static_cast<const void*>(&opdata31)), OP_MEAN, },
  { (TfLiteIntArray*)&inputs32, (TfLiteIntArray*)&outputs32, const_cast<void*>(static_cast<const void*>(&opdata32)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs33, (TfLiteIntArray*)&outputs33, const_cast<void*>(static_cast<const void*>(&opdata33)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs34, (TfLiteIntArray*)&outputs34, const_cast<void*>(static_cast<const void*>(&opdata34)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_16_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;
  ctx.tensors_size = 96;
  for (size_t i = 0; i < 96; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_MEAN] = Register_MEAN();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 35; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 35; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_16_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  95, 
};
TfLiteStatus tflite_learn_16_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_16_invoke() {
  for (size_t i = 0; i < 35; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_16_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
